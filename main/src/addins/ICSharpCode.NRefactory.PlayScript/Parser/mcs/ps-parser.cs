// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

//#line 2 "ps-parser.jay"
//
// ps-parser.jay: The Parser for the PlayScript language
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//          Ben Cooley	    (bcooley@zynga.com)
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using Mono.CSharp;
using Linq = Mono.CSharp.Linq;
using Enum = Mono.CSharp.Enum;
using Attribute = Mono.CSharp.Attribute;
using Delegate = Mono.CSharp.Delegate;
using Nullable = Mono.CSharp.Nullable;

namespace Mono.PlayScript
{
	/// <summary>
	///    The PlayScript Parser
	/// </summary>
	public class PlayScriptParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		public bool parsing_playscript = false;
		
		static readonly object ModifierNone = 0;
	
		const string RootNs = PsConsts.PsRootNamespace;
	
		NamespaceContainer current_namespace;
		NamespaceContainer prev_namespace;
		NamespaceContainer private_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
		Constructor current_constructor;
		
		// Set by config params to enable/disable inclusion of methods, fields, consts, classes, structs, etc.
		bool is_config_enabled = true;
		
		bool is_package_function = false;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		// Current modifier namespace identifier
		public string ns_modifier;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
//#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives package_declaration opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_package_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN error",
//t    "no_config_package_directive : import_directive",
//t    "no_config_package_directive : use_namespace_directive",
//t    "package_directive : no_config_package_directive",
//t    "package_directive : config_package_directive",
//t    "$$2 :",
//t    "config_package_directive : IDENTIFIER_CONFIG $$2 no_config_package_directive",
//t    "$$3 :",
//t    "config_package_directive : IDENTIFIER_CONFIG $$3 OPEN_BRACE opt_package_directives CLOSE_BRACE",
//t    "package_directives : package_directive",
//t    "package_directives : package_directives package_directive",
//t    "use_namespace_directive : use_namespace",
//t    "use_namespace : USE NAMESPACE IDENTIFIER SEMICOLON",
//t    "import_directive : import_package",
//t    "$$4 :",
//t    "import_package : IMPORT namespace_or_type_expr $$4 DOT_STAR SEMICOLON",
//t    "import_package : IMPORT typeof_type_expression SEMICOLON",
//t    "import_package : IMPORT IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "import_package : IMPORT error",
//t    "$$5 :",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "package_declaration : opt_attributes PACKAGE $$5 opt_package_name $$6 OPEN_BRACE $$7 opt_package_statements_or_blocks CLOSE_BRACE $$8 opt_package_statements_or_blocks",
//t    "opt_package_name :",
//t    "opt_package_name : package_name",
//t    "package_name : IDENTIFIER",
//t    "package_name : package_name DOT IDENTIFIER",
//t    "package_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_package_statements_or_blocks : opt_extern_alias_directives opt_package_statements",
//t    "opt_package_statements_or_blocks : OPEN_BRACE opt_package_statements_or_blocks CLOSE_BRACE",
//t    "opt_package_directives :",
//t    "opt_package_directives : package_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_package_statements :",
//t    "opt_package_statements : package_statements",
//t    "package_statements : package_statement",
//t    "package_statements : package_statements package_statement",
//t    "package_statement : no_config_package_statement",
//t    "package_statement : config_package_statement",
//t    "package_statement : attribute_sections CLOSE_BRACE",
//t    "no_config_package_statement : type_declaration",
//t    "no_config_package_statement : method_declaration",
//t    "no_config_package_statement : no_config_package_directive",
//t    "$$9 :",
//t    "config_package_statement : IDENTIFIER_CONFIG $$9 no_config_package_statement",
//t    "$$10 :",
//t    "config_package_statement : IDENTIFIER_CONFIG $$10 OPEN_BRACE opt_package_statements CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "type_declaration : namespace_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$11 :",
//t    "attribute_section : OPEN_BRACKET $$11 attribute_section_cont",
//t    "$$12 :",
//t    "attribute_section_cont : attribute_target COLON $$12 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$13 :",
//t    "attribute : attribute_name $$13 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$14 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$14 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : member_config_block",
//t    "class_member_declaration : config_member_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : use_namespace_class_directive",
//t    "class_member_declaration : import_class_directive",
//t    "class_member_declaration : error",
//t    "use_namespace_class_directive : opt_attributes opt_modifiers use_namespace_directive",
//t    "import_class_directive : opt_attributes opt_modifiers import_directive",
//t    "$$15 :",
//t    "config_member_declaration : IDENTIFIER_CONFIG $$15 class_member_declaration",
//t    "$$16 :",
//t    "member_config_block : IDENTIFIER_CONFIG $$16 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE",
//t    "$$17 :",
//t    "$$18 :",
//t    "$$19 :",
//t    "$$20 :",
//t    "$$21 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$17 type_declaration_name $$18 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$19 OPEN_BRACE $$20 opt_class_member_declarations CLOSE_BRACE $$21 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$22 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST IDENTIFIER COLON type $$22 opt_constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER COLON member_type opt_constant_initializer",
//t    "opt_constant_initializer :",
//t    "opt_constant_initializer : constant_initializer",
//t    "$$23 :",
//t    "constant_initializer : ASSIGN $$23 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "$$24 :",
//t    "field_declaration : opt_attributes opt_modifiers VAR IDENTIFIER COLON member_type $$24 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$25 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type $$25 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED IDENTIFIER COLON simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$26 :",
//t    "opt_field_initializer : ASSIGN $$26 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER COLON member_type",
//t    "$$27 :",
//t    "field_declarator : COMMA IDENTIFIER COLON member_type ASSIGN $$27 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size COLON member_type",
//t    "$$28 :",
//t    "fixed_field_size : OPEN_BRACKET $$28 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : error",
//t    "$$29 :",
//t    "method_declaration : method_header $$29 method_body",
//t    "$$30 :",
//t    "$$31 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name OPEN_PARENS $$30 opt_formal_parameter_list CLOSE_PARENS opt_method_return_type $$31 opt_type_parameter_constraints_clauses",
//t    "$$32 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_GET method_declaration_name OPEN_PARENS $$32 opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "$$33 :",
//t    "method_header : opt_attributes opt_modifiers FUNCTION_SET method_declaration_name OPEN_PARENS $$33 opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "$$34 :",
//t    "$$35 :",
//t    "$$36 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL FUNCTION $$34 method_declaration_name OPEN_PARENS $$35 opt_formal_parameter_list CLOSE_PARENS COLON VOID $$36 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers FUNCTION modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS method_colon member_type",
//t    "method_header : opt_attributes opt_modifiers FUNCTION method_declaration_name error",
//t    "opt_method_return_type :",
//t    "opt_method_return_type : method_colon member_type",
//t    "method_colon : COLON",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON error",
//t    "$$37 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier IDENTIFIER COLON parameter_type ASSIGN $$37 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER",
//t    "parameter_array : opt_attributes DOTDOTDOT IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes DOTDOTDOT error",
//t    "$$38 :",
//t    "$$39 :",
//t    "$$40 :",
//t    "property_declaration : opt_attributes opt_modifiers PROPERTY member_declaration_name COLON member_type $$38 OPEN_BRACE $$39 accessor_declarations $$40 CLOSE_BRACE",
//t    "$$41 :",
//t    "$$42 :",
//t    "$$43 :",
//t    "indexer_declaration : opt_attributes opt_modifiers INDEXER indexer_declaration_name OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS COLON member_type OPEN_BRACE $$42 accessor_declarations $$43 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$44 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$44 accessor_body",
//t    "$$45 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$45 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$46 :",
//t    "$$47 :",
//t    "$$48 :",
//t    "$$49 :",
//t    "$$50 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$46 type_declaration_name $$47 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$48 OPEN_BRACE $$49 opt_interface_member_declarations CLOSE_BRACE $$50 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$51 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$51 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$52 :",
//t    "operator_declarator : OPERATOR overloadable_operator OPEN_PARENS $$52 opt_formal_parameter_list CLOSE_PARENS COLON operator_type",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_USHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "overloadable_operator : OP_IN",
//t    "$$53 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$53 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$54 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$54 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "$$55 :",
//t    "destructor_declaration : opt_attributes opt_modifiers FUNCTION TILDE $$55 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$56 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type $$56 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$57 :",
//t    "$$58 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT member_declaration_name COLON type OPEN_BRACE $$57 event_accessor_declarations $$58 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$59 :",
//t    "opt_event_initializer : ASSIGN $$59 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type",
//t    "$$60 :",
//t    "event_declarator : COMMA IDENTIFIER COLON member_type ASSIGN $$60 event_variable_initializer",
//t    "$$61 :",
//t    "event_variable_initializer : $$61 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$62 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$62 event_accessor_block",
//t    "$$63 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$63 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$64 :",
//t    "$$65 :",
//t    "$$66 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$64 OPEN_BRACE $$65 opt_enum_member_declarations $$66 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$67 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$67 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$68 :",
//t    "$$69 :",
//t    "$$70 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE type_declaration_name OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$69 opt_type_parameter_constraints_clauses $$70 SEMICOLON",
//t    "namespace_declaration : opt_attributes opt_modifiers NAMESPACE IDENTIFIER opt_namespace_url SEMICOLON",
//t    "opt_namespace_url :",
//t    "opt_namespace_url : namespace_url",
//t    "namespace_url : ASSIGN LITERAL",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$71 :",
//t    "type_declaration_name : IDENTIFIER $$71 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : STAR",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : new_expression",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : array_initializer",
//t    "primary_expression : object_or_collection_initializer",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : UNDEFINED",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT_AT IDENTIFIER",
//t    "member_access : primary_expression DOT_STAR",
//t    "member_access : primary_expression DOTDOT IDENTIFIER",
//t    "member_access : primary_expression DOTDOT_STAR",
//t    "member_access : primary_expression DOUBLE_COLON IDENTIFIER",
//t    "member_access : primary_expression DOUBLE_COLON OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT_AT OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "member_access : primary_expression DOT OPEN_PARENS expression CLOSE_PARENS",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : SUPER DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : SUPER open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : builtin_types open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "object_or_collection_initializer : init_open_brace opt_member_initializer_list init_close_brace_or_complete_completion",
//t    "object_or_collection_initializer : init_open_brace member_initializer_list COMMA init_close_brace",
//t    "init_open_brace : OPEN_BRACE_INIT",
//t    "init_close_brace : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : CLOSE_BRACE",
//t    "init_close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER COLON initializer_value",
//t    "member_initializer : AWAIT ASSIGN initializer_value",
//t    "member_initializer : LITERAL COLON initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "initializer_value : expression",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : builtin_types OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : SUPER OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : SUPER OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "new_expression : NEW namespace_or_type_expr",
//t    "new_expression : NEW builtin_types",
//t    "new_expression : NEW OPEN_PARENS expression CLOSE_PARENS",
//t    "new_expression : NEW OP_LT type_expression OP_GT array_initializer",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "array_initializer : init_open_bracket init_close_bracket",
//t    "array_initializer : init_open_bracket_expr variable_initializer_list opt_comma init_close_bracket",
//t    "init_open_bracket : OPEN_BRACKET",
//t    "init_open_bracket_expr : OPEN_BRACKET_EXPR",
//t    "init_close_bracket : CLOSE_BRACKET",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "sizeof_expression : SIZEOF open_parens_any type error",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "checked_expression : CHECKED error",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED error",
//t    "$$72 :",
//t    "$$73 :",
//t    "anonymous_method_expression : FUNCTION OPEN_PARENS $$72 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$73 block",
//t    "$$74 :",
//t    "$$75 :",
//t    "anonymous_method_expression : ASYNC FUNCTION OPEN_PARENS $$74 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$75 block",
//t    "$$76 :",
//t    "$$77 :",
//t    "local_function_statement : FUNCTION IDENTIFIER OPEN_PARENS $$76 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$77 block",
//t    "$$78 :",
//t    "$$79 :",
//t    "local_function_statement : ASYNC FUNCTION IDENTIFIER OPEN_PARENS $$78 opt_formal_parameter_list CLOSE_PARENS COLON member_type $$79 block",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "unary_expression : OP_AT prefixed_unary_expression",
//t    "unary_expression : TYPEOF prefixed_unary_expression",
//t    "unary_expression : DELETE prefixed_unary_expression",
//t    "unary_expression : BANG error",
//t    "unary_expression : TILDE error",
//t    "unary_expression : AWAIT error",
//t    "unary_expression : OP_AT error",
//t    "unary_expression : TYPEOF error",
//t    "unary_expression : DELETE error",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "prefixed_unary_expression : PLUS error",
//t    "prefixed_unary_expression : MINUS error",
//t    "prefixed_unary_expression : OP_INC error",
//t    "prefixed_unary_expression : OP_DEC error",
//t    "prefixed_unary_expression : BITWISE_AND error",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR error",
//t    "multiplicative_expression : multiplicative_expression DIV error",
//t    "multiplicative_expression : multiplicative_expression PERCENT error",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression OP_IN multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "additive_expression : additive_expression PLUS error",
//t    "additive_expression : additive_expression MINUS error",
//t    "additive_expression : additive_expression OP_IN error",
//t    "additive_expression : additive_expression AS error",
//t    "additive_expression : additive_expression IS error",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT error",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT error",
//t    "shift_expression : shift_expression OP_USHIFT_RIGHT error",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "relational_expression : relational_expression OP_LT error",
//t    "relational_expression : relational_expression OP_GT error",
//t    "relational_expression : relational_expression OP_LE error",
//t    "relational_expression : relational_expression OP_GE error",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "equality_expression : equality_expression OP_REF_EQ relational_expression",
//t    "equality_expression : equality_expression OP_REF_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "and_expression : and_expression BITWISE_AND error",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET error",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR error",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND error",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR error",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_USHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression LOGICAL_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "lambda_parameter : AWAIT",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$80 :",
//t    "lambda_expression_body : $$80 expression",
//t    "lambda_expression_body : block",
//t    "lambda_expression_body : error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$81 :",
//t    "lambda_expression : IDENTIFIER ARROW $$81 lambda_expression_body",
//t    "$$82 :",
//t    "lambda_expression : AWAIT ARROW $$82 lambda_expression_body",
//t    "$$83 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$83 lambda_expression_body",
//t    "$$84 :",
//t    "$$85 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$84 opt_lambda_parameter_list CLOSE_PARENS ARROW $$85 lambda_expression_body",
//t    "$$86 :",
//t    "$$87 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$86 opt_lambda_parameter_list CLOSE_PARENS ARROW $$87 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$88 :",
//t    "$$89 :",
//t    "$$90 :",
//t    "$$91 :",
//t    "$$92 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$88 type_declaration_name $$89 opt_class_extends opt_class_implements opt_type_parameter_constraints_clauses $$90 OPEN_BRACE $$91 opt_class_member_declarations CLOSE_BRACE $$92 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : FINAL",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : NATIVE",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "modifier : DYNAMIC",
//t    "modifier : IDENTIFIER_MODIFIER",
//t    "opt_class_extends :",
//t    "opt_class_extends : EXTENDS base_type_name",
//t    "opt_class_extends : EXTENDS base_type_name error",
//t    "opt_class_implements :",
//t    "opt_class_implements : IMPLEMENTS type_list",
//t    "opt_class_implements : IMPLEMENTS type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$93 :",
//t    "block : OPEN_BRACE $$93 opt_statement_list block_end",
//t    "$$94 :",
//t    "config_block : opt_block_config OPEN_BRACE $$94 opt_statement_list block_end",
//t    "opt_block_config :",
//t    "opt_block_config : IDENTIFIER DOUBLE_COLON IDENTIFIER",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$95 :",
//t    "block_prepared : OPEN_BRACE $$95 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : config_block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "valid_declaration_statement : local_function_statement",
//t    "interactive_valid_declaration_statement : config_block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : local_function_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$96 :",
//t    "labeled_statement : identifier_inside_body COLON $$96 statement",
//t    "use_namespace_statement : USE NAMESPACE IDENTIFIER stmnt_end_semicolon",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : VOID",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "stmnt_end_semicolon : SEMICOLON",
//t    "$$97 :",
//t    "block_variable_declaration : VAR identifier_inside_body COLON type $$97 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$98 :",
//t    "block_variable_declaration : VAR identifier_inside_body $$98 opt_local_variable_initializer opt_variable_declarators stmnt_end_semicolon",
//t    "$$99 :",
//t    "block_variable_declaration : CONST identifier_inside_body COLON type $$99 const_variable_initializer opt_const_declarators stmnt_end_semicolon",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "variable_declarator : COMMA identifier_inside_body COLON type",
//t    "variable_declarator : COMMA identifier_inside_body COLON type ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "expression_statement : statement_expression stmnt_end_semicolon",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "stmnt_close_parens : CLOSE_PARENS",
//t    "stmnt_else : ELSE",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression stmnt_close_parens embedded_statement stmnt_else embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$100 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$100 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_labels",
//t    "opt_switch_sections : switch_sections opt_switch_labels",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "switch_section : switch_labels statement_list",
//t    "opt_switch_labels :",
//t    "opt_switch_labels : switch_labels",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression stmnt_close_parens embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "stmnt_do : DO",
//t    "do_while_stmnt_close_parens : CLOSE_PARENS",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression do_while_stmnt_close_parens stmnt_end_semicolon",
//t    "do_statement : stmnt_do embedded_statement error",
//t    "do_statement : stmnt_do embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$101 :",
//t    "for_statement : FOR open_parens_any $$101 for_statement_cont",
//t    "$$102 :",
//t    "for_statement_cont : for_initializer IN $$102 expression stmnt_close_parens embedded_statement",
//t    "$$103 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$103 for_condition_and_iterator_part embedded_statement",
//t    "for_statement_cont : error",
//t    "$$104 :",
//t    "for_condition_and_iterator_part : opt_for_condition SEMICOLON $$104 for_iterator_part",
//t    "for_condition_and_iterator_part : opt_for_condition close_parens_close_brace",
//t    "for_iterator_part : opt_for_iterator stmnt_close_parens",
//t    "for_iterator_part : opt_for_iterator CLOSE_BRACE",
//t    "close_parens_close_brace : CLOSE_PARENS",
//t    "close_parens_close_brace : CLOSE_BRACE",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$105 :",
//t    "for_initializer : VAR identifier_inside_body COLON type $$105 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "$$106 :",
//t    "$$107 :",
//t    "$$108 :",
//t    "foreach_statement : FOR_EACH $$106 open_parens_any for_initializer IN $$107 expression stmnt_close_parens $$108 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "jump_statement : use_namespace_statement",
//t    "break_statement : BREAK stmnt_end_semicolon",
//t    "continue_statement : CONTINUE stmnt_end_semicolon",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body stmnt_end_semicolon",
//t    "goto_statement : GOTO CASE constant_expression stmnt_end_semicolon",
//t    "goto_statement : GOTO DEFAULT stmnt_end_semicolon",
//t    "return_statement : RETURN opt_expression stmnt_end_semicolon",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression stmnt_end_semicolon",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression stmnt_end_semicolon",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK stmnt_end_semicolon",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$109 :",
//t    "catch_clause : CATCH open_parens_any IDENTIFIER COLON type CLOSE_PARENS $$109 block_prepared",
//t    "catch_clause : CATCH open_parens_any error",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$110 :",
//t    "unsafe_statement : UNSAFE $$110 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$111 :",
//t    "$$112 :",
//t    "fixed_statement : FIXED open_parens_any type identifier_inside_body $$111 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$112 embedded_statement",
//t    "$$113 :",
//t    "$$114 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$113 using_initialization CLOSE_PARENS $$114 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$115 :",
//t    "from_clause : FROM identifier_inside_body IN $$115 expression_or_error",
//t    "$$116 :",
//t    "from_clause : FROM type identifier_inside_body IN $$116 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$117 :",
//t    "select_or_group_clause : SELECT $$117 expression_or_error",
//t    "$$118 :",
//t    "$$119 :",
//t    "select_or_group_clause : GROUP $$118 expression_or_error $$119 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$120 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$120 expression_or_error",
//t    "$$121 :",
//t    "where_clause : WHERE $$121 expression_or_error",
//t    "$$122 :",
//t    "$$123 :",
//t    "$$124 :",
//t    "join_clause : JOIN identifier_inside_body IN $$122 expression_or_error ON $$123 expression_or_error EQUALS $$124 expression_or_error opt_join_into",
//t    "$$125 :",
//t    "$$126 :",
//t    "$$127 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$125 expression_or_error ON $$126 expression_or_error EQUALS $$127 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$128 :",
//t    "orderby_clause : ORDERBY $$128 orderings",
//t    "orderings : order_by",
//t    "$$129 :",
//t    "orderings : order_by COMMA $$129 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$130 :",
//t    "orderings_then_by : orderings_then_by COMMA $$130 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$131 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$131 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER package_directives opt_COMPLETE_COMPLETION",
//t    "$$132 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$132 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_package_directives package_declaration",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$133 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$133 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$134 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$134 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","SUPER","BOOL","BOOLEAN",
    "BREAK","BYTE","CASE","CATCH","CHAR","CHECKED","CLASS","CONST",
    "CONTINUE","DECIMAL","DEFAULT","DELEGATE","DELETE","DO","DOUBLE",
    "DOUBLE2","DOUBLE3","DOUBLE4","DYNAMIC","EACH","ELSE","ENUM","EVENT",
    "EXPLICIT","EXTENDS","FALSE","FINAL","FINALLY","FIXED","FLOAT",
    "FLOAT2","FLOAT3","FLOAT4","FOR","FOR_EACH","FUNCTION","FUNCTION_GET",
    "FUNCTION_SET","GOTO","IF","IMPLICIT","IMPLEMENTS","IMPORT","IN",
    "INDEXER","INSTANCEOF","INT","INTERFACE","INTERNAL","IS","LOCK",
    "LONG","NAMESPACE","NATIVE","NEW","NULL","OBJECT","OPERATOR","OUT",
    "OVERRIDE","OVERLOAD","PACKAGE","PARAMS","PRIVATE","PROPERTY",
    "PROTECTED","PUBLIC","READONLY","REF","RETURN","REMOVE","SBYTE",
    "SHORT","SIZEOF","STACKALLOC","STATIC","STRING","STRUCT","SWITCH",
    "THIS","THROW","TRUE","TRY","TYPEOF","UINT","ULONG","UNCHECKED",
    "UNDEFINED","UNSAFE","USE","USHORT","USING","VAR","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","PARTIAL","ARROW","FROM","FROM_FIRST",
    "JOIN","ON","EQUALS","SELECT","GROUP","BY","LET","ORDERBY",
    "ASCENDING","DESCENDING","INTO","INTERR_NULLABLE","EXTERN","ASYNC",
    "AWAIT","GET","SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE",
    "OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT",
    "DOT_AT","DOT_STAR","DOTDOT","DOTDOT_AT","DOTDOT_STAR","DOTDOTDOT",
    "DOT_OPEN_PARENS","CLOSE_PARENS_DOT","COMMA","COLON","SEMICOLON",
    "TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND",
    "BITWISE_OR","LOGICAL_AND_ASSIGN","LOGICAL_OR_ASSIGN","STAR",
    "PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC","OP_DEC",
    "OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_USHIFT_RIGHT","OP_LE","OP_GE",
    "OP_EQ","OP_REF_EQ","OP_NE","OP_REF_NE","OP_AND","OP_OR",
    "OP_MULT_ASSIGN","OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN",
    "OP_SUB_ASSIGN","OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN",
    "OP_USHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN","OP_XOR_ASSIGN",
    "OP_OR_ASSIGN","OP_PTR","OP_COALESCING","OP_IN","OP_AT",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","IDENTIFIER_MODIFIER","IDENTIFIER_CONFIG",
    "OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST","GENERIC_DIMENSION",
    "DEFAULT_COLON","OPEN_BRACKET_EXPR","OPEN_BRACE_INIT",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
//#line 436 "ps-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
//#line 437 "ps-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
//#line 456 "ps-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
//#line 501 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 25:
  case_25();
  break;
case 27:
  case_27();
  break;
case 28:
//#line 566 "ps-parser.jay"
  {
	    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, true);
	  }
  break;
case 29:
  case_29();
  break;
case 30:
  case_30();
  break;
case 31:
  case_31();
  break;
case 32:
  case_32();
  break;
case 33:
//#line 618 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = false;
	  }
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 36:
  case_36();
  break;
case 37:
  case_37();
  break;
case 40:
  case_40();
  break;
case 41:
  case_41();
  break;
case 42:
  case_42();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 63:
  case_63();
  break;
case 64:
  case_64();
  break;
case 65:
  case_65();
  break;
case 66:
  case_66();
  break;
case 75:
  case_75();
  break;
case 76:
  case_76();
  break;
case 77:
//#line 879 "ps-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 78:
  case_78();
  break;
case 79:
  case_79();
  break;
case 80:
  case_80();
  break;
case 81:
  case_81();
  break;
case 82:
  case_82();
  break;
case 83:
//#line 920 "ps-parser.jay"
  { yyVal = "event"; }
  break;
case 84:
//#line 921 "ps-parser.jay"
  { yyVal = "return"; }
  break;
case 85:
  case_85();
  break;
case 86:
//#line 938 "ps-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 87:
  case_87();
  break;
case 88:
//#line 952 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 89:
  case_89();
  break;
case 91:
//#line 971 "ps-parser.jay"
  { yyVal = null; }
  break;
case 92:
  case_92();
  break;
case 93:
//#line 981 "ps-parser.jay"
  { yyVal = null; }
  break;
case 94:
  case_94();
  break;
case 95:
  case_95();
  break;
case 96:
  case_96();
  break;
case 97:
  case_97();
  break;
case 98:
//#line 1023 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 100:
//#line 1031 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
//#line 1057 "ps-parser.jay"
  { yyVal = null; }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 108:
//#line 1079 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 109:
//#line 1083 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 124:
  case_124();
  break;
case 125:
  case_125();
  break;
case 126:
  case_126();
  break;
case 127:
  case_127();
  break;
case 128:
  case_128();
  break;
case 129:
  case_129();
  break;
case 130:
  case_130();
  break;
case 131:
  case_131();
  break;
case 132:
  case_132();
  break;
case 133:
  case_133();
  break;
case 134:
  case_134();
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 137:
//#line 1212 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 138:
  case_138();
  break;
case 139:
  case_139();
  break;
case 142:
//#line 1253 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 143:
//#line 1257 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 144:
  case_144();
  break;
case 145:
//#line 1270 "ps-parser.jay"
  { yyVal = null; }
  break;
case 147:
//#line 1278 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 148:
  case_148();
  break;
case 149:
  case_149();
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 154:
  case_154();
  break;
case 155:
//#line 1361 "ps-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[0+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 157:
  case_157();
  break;
case 158:
  case_158();
  break;
case 161:
//#line 1390 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 162:
//#line 1394 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 163:
  case_163();
  break;
case 164:
//#line 1407 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 165:
  case_165();
  break;
case 168:
//#line 1426 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 169:
//#line 1430 "ps-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 170:
  case_170();
  break;
case 171:
//#line 1446 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
  case_177();
  break;
case 178:
  case_178();
  break;
case 179:
//#line 1589 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 180:
  case_180();
  break;
case 181:
//#line 1658 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 182:
  case_182();
  break;
case 183:
//#line 1719 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 184:
  case_184();
  break;
case 185:
//#line 1787 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 186:
  case_186();
  break;
case 187:
//#line 1797 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 192:
//#line 1868 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 193:
  case_193();
  break;
case 195:
  case_195();
  break;
case 196:
//#line 1889 "ps-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
//#line 1947 "ps-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
//#line 2024 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 210:
  case_210();
  break;
case 211:
//#line 2065 "ps-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 213:
//#line 2073 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
  case_216();
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
  case_222();
  break;
case 223:
  case_223();
  break;
case 224:
  case_224();
  break;
case 225:
//#line 2213 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 226:
  case_226();
  break;
case 227:
//#line 2254 "ps-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 228:
  case_228();
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 235:
  case_235();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 239:
  case_239();
  break;
case 240:
  case_240();
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
  case_243();
  break;
case 244:
//#line 2428 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = true;
	  }
  break;
case 245:
  case_245();
  break;
case 246:
  case_246();
  break;
case 247:
//#line 2443 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 250:
//#line 2455 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 251:
//#line 2459 "ps-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 252:
//#line 2466 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 253:
//#line 2470 "ps-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 258:
//#line 2478 "ps-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 259:
//#line 2486 "ps-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 260:
//#line 2492 "ps-parser.jay"
  {
	  }
  break;
case 261:
  case_261();
  break;
case 263:
//#line 2538 "ps-parser.jay"
  { yyVal = null; }
  break;
case 265:
  case_265();
  break;
case 266:
//#line 2554 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 267:
  case_267();
  break;
case 269:
//#line 2602 "ps-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 270:
//#line 2603 "ps-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 271:
//#line 2604 "ps-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 272:
//#line 2605 "ps-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 273:
//#line 2606 "ps-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 274:
//#line 2607 "ps-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 275:
//#line 2609 "ps-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 276:
//#line 2610 "ps-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 277:
//#line 2612 "ps-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 278:
//#line 2613 "ps-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 279:
//#line 2614 "ps-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 280:
//#line 2615 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 281:
//#line 2616 "ps-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 282:
//#line 2617 "ps-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 283:
//#line 2618 "ps-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 284:
//#line 2619 "ps-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 285:
//#line 2620 "ps-parser.jay"
  { yyVal = Operator.OpType.AsURightShift; }
  break;
case 286:
//#line 2621 "ps-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 287:
//#line 2622 "ps-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 288:
//#line 2623 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 289:
//#line 2624 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 290:
//#line 2625 "ps-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 291:
//#line 2626 "ps-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 292:
//#line 2627 "ps-parser.jay"
  { yyVal = Operator.OpType.AsIn; }
  break;
case 293:
//#line 2634 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 294:
  case_294();
  break;
case 295:
//#line 2653 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
  case_299();
  break;
case 300:
  case_300();
  break;
case 301:
  case_301();
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 307:
//#line 2917 "ps-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 308:
  case_308();
  break;
case 311:
//#line 2934 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 312:
//#line 2938 "ps-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 313:
  case_313();
  break;
case 314:
//#line 2951 "ps-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 315:
  case_315();
  break;
case 316:
  case_316();
  break;
case 317:
//#line 2976 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 320:
  case_320();
  break;
case 321:
  case_321();
  break;
case 322:
  case_322();
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 335:
  case_335();
  break;
case 336:
  case_336();
  break;
case 339:
//#line 3140 "ps-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
  case_345();
  break;
case 347:
//#line 3214 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 348:
  case_348();
  break;
case 349:
//#line 3233 "ps-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 354:
  case_354();
  break;
case 356:
  case_356();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 362:
  case_362();
  break;
case 363:
  case_363();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
//#line 3369 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 367:
  case_367();
  break;
case 368:
  case_368();
  break;
case 370:
  case_370();
  break;
case 371:
  case_371();
  break;
case 372:
  case_372();
  break;
case 373:
  case_373();
  break;
case 374:
  case_374();
  break;
case 376:
  case_376();
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 382:
//#line 3487 "ps-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 383:
//#line 3494 "ps-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 385:
  case_385();
  break;
case 387:
  case_387();
  break;
case 389:
  case_389();
  break;
case 391:
  case_391();
  break;
case 392:
  case_392();
  break;
case 393:
//#line 3552 "ps-parser.jay"
  {
	  	yyVal = new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 394:
  case_394();
  break;
case 395:
  case_395();
  break;
case 396:
  case_396();
  break;
case 397:
  case_397();
  break;
case 398:
//#line 3605 "ps-parser.jay"
  { CheckIsPlayScript("decimal", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 399:
//#line 3606 "ps-parser.jay"
  { CheckIsPlayScript("float", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 400:
//#line 3610 "ps-parser.jay"
  { CheckIsPlayScript("double", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 402:
//#line 3618 "ps-parser.jay"
  { CheckIsPlayScript("sbyte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
//#line 3619 "ps-parser.jay"
  { CheckIsPlayScript("byte", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
//#line 3620 "ps-parser.jay"
  { CheckIsPlayScript("short", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
//#line 3621 "ps-parser.jay"
  { CheckIsPlayScript("ushort", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
//#line 3622 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
//#line 3623 "ps-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 408:
//#line 3624 "ps-parser.jay"
  { CheckIsPlayScript("long", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
//#line 3625 "ps-parser.jay"
  { CheckIsPlayScript("ulong", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
//#line 3626 "ps-parser.jay"
  { CheckIsPlayScript("char", GetLocation(yyVals[0+yyTop])); yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 428:
  case_428();
  break;
case 429:
  case_429();
  break;
case 433:
//#line 3677 "ps-parser.jay"
  { yyVal = new AsUndefinedLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 434:
//#line 3678 "ps-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 435:
//#line 3682 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 436:
//#line 3683 "ps-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 441:
  case_441();
  break;
case 442:
//#line 3716 "ps-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 443:
  case_443();
  break;
case 444:
  case_444();
  break;
case 445:
  case_445();
  break;
case 446:
  case_446();
  break;
case 447:
  case_447();
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
  case_450();
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 454:
//#line 3809 "ps-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 455:
  case_455();
  break;
case 456:
//#line 3817 "ps-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 457:
  case_457();
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
  case_463();
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
  case_466();
  break;
case 468:
//#line 3916 "ps-parser.jay"
  { yyVal = null; }
  break;
case 469:
//#line 3920 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
//#line 3976 "ps-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 478:
//#line 4003 "ps-parser.jay"
  { yyVal = null; }
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
//#line 4054 "ps-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
  case_494();
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
//#line 4172 "ps-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 505:
//#line 4180 "ps-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 506:
  case_506();
  break;
case 507:
  case_507();
  break;
case 508:
//#line 4200 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 509:
//#line 4207 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 510:
//#line 4271 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 511:
//#line 4275 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 512:
//#line 4279 "ps-parser.jay"
  {
		yyVal = new AsNew ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 513:
  case_513();
  break;
case 515:
  case_515();
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 518:
//#line 4383 "ps-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 519:
//#line 4387 "ps-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 520:
  case_520();
  break;
case 521:
  case_521();
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
//#line 4446 "ps-parser.jay"
  {
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
 	  }
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
  case_537();
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
//#line 4605 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 542:
  case_542();
  break;
case 543:
//#line 4614 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 544:
//#line 4618 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 545:
  case_545();
  break;
case 546:
//#line 4627 "ps-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 547:
//#line 4634 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 550:
//#line 4655 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 555:
//#line 4705 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
//#line 4709 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
  case_557();
  break;
case 558:
//#line 4739 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AsE4xAttribute, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
//#line 4743 "ps-parser.jay"
  {
	  	yyVal = new AsTypeOf ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 562:
  case_562();
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 566:
  case_566();
  break;
case 568:
//#line 4807 "ps-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 569:
//#line 4811 "ps-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 570:
//#line 4815 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
//#line 4819 "ps-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 572:
//#line 4827 "ps-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 575:
  case_575();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 579:
  case_579();
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 583:
  case_583();
  break;
case 584:
  case_584();
  break;
case 586:
  case_586();
  break;
case 587:
  case_587();
  break;
case 588:
//#line 4921 "ps-parser.jay"
  {
		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 589:
//#line 4925 "ps-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 590:
//#line 4929 "ps-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
  case_609();
  break;
case 610:
  case_610();
  break;
case 611:
  case_611();
  break;
case 613:
  case_613();
  break;
case 614:
  case_614();
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 630:
  case_630();
  break;
case 631:
  case_631();
  break;
case 633:
  case_633();
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
  case_643();
  break;
case 644:
  case_644();
  break;
case 645:
  case_645();
  break;
case 646:
  case_646();
  break;
case 647:
  case_647();
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
//#line 5327 "ps-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 659:
  case_659();
  break;
case 660:
//#line 5337 "ps-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 661:
  case_661();
  break;
case 663:
  case_663();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
//#line 5407 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
//#line 5422 "ps-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 684:
//#line 5477 "ps-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 685:
  case_685();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
//#line 5523 "ps-parser.jay"
  {
		lexer.AutoSemiInsertion = true;		
	  }
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
//#line 5540 "ps-parser.jay"
  { yyVal = null; }
  break;
case 692:
//#line 5542 "ps-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 693:
  case_693();
  break;
case 694:
//#line 5555 "ps-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 696:
  case_696();
  break;
case 697:
  case_697();
  break;
case 698:
  case_698();
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 701:
  case_701();
  break;
case 702:
  case_702();
  break;
case 703:
  case_703();
  break;
case 704:
  case_704();
  break;
case 705:
  case_705();
  break;
case 706:
  case_706();
  break;
case 707:
  case_707();
  break;
case 708:
  case_708();
  break;
case 709:
  case_709();
  break;
case 710:
  case_710();
  break;
case 711:
  case_711();
  break;
case 712:
  case_712();
  break;
case 713:
  case_713();
  break;
case 715:
//#line 5676 "ps-parser.jay"
  {
		current_type.AddBaseForPart ((FullNamedExpression) yyVals[0+yyTop]);
	 }
  break;
case 716:
  case_716();
  break;
case 718:
//#line 5690 "ps-parser.jay"
  {
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 719:
  case_719();
  break;
case 721:
//#line 5704 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 722:
  case_722();
  break;
case 723:
  case_723();
  break;
case 724:
  case_724();
  break;
case 725:
  case_725();
  break;
case 726:
  case_726();
  break;
case 727:
  case_727();
  break;
case 728:
  case_728();
  break;
case 729:
  case_729();
  break;
case 730:
//#line 5796 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 731:
//#line 5800 "ps-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 732:
//#line 5807 "ps-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 733:
  case_733();
  break;
case 734:
//#line 5821 "ps-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 735:
//#line 5825 "ps-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 736:
  case_736();
  break;
case 737:
//#line 5851 "ps-parser.jay"
  {
  		yyVal = yyVals[0+yyTop];
	  }
  break;
case 738:
  case_738();
  break;
case 739:
  case_739();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 750:
//#line 5931 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 751:
//#line 5935 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 753:
  case_753();
  break;
case 756:
//#line 5959 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 757:
//#line 5963 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 794:
  case_794();
  break;
case 796:
  case_796();
  break;
case 797:
  case_797();
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 801:
  case_801();
  break;
case 802:
//#line 6169 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertion = true;
	  }
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
  case_807();
  break;
case 808:
  case_808();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 815:
  case_815();
  break;
case 818:
  case_818();
  break;
case 819:
  case_819();
  break;
case 820:
  case_820();
  break;
case 821:
  case_821();
  break;
case 822:
//#line 6295 "ps-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 823:
//#line 6299 "ps-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 828:
  case_828();
  break;
case 830:
  case_830();
  break;
case 831:
//#line 6344 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 832:
  case_832();
  break;
case 833:
//#line 6354 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 834:
//#line 6355 "ps-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 835:
//#line 6366 "ps-parser.jay"
  {
		yyVal = ConvertExpressionToStatement((Expression)yyVals[0+yyTop]);
	  }
  break;
case 836:
  case_836();
  break;
case 837:
  case_837();
  break;
case 840:
//#line 6394 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 841:
//#line 6401 "ps-parser.jay"
  {
	  	Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
//#line 6459 "ps-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 849:
//#line 6463 "ps-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
	  }
  break;
case 853:
//#line 6473 "ps-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 857:
  case_857();
  break;
case 858:
//#line 6495 "ps-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
//#line 6546 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertionAfter = 1;
	  }
  break;
case 869:
//#line 6553 "ps-parser.jay"
  {
	    Lexer.AutoSemiInsertion = true;
	  }
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 873:
  case_873();
  break;
case 874:
  case_874();
  break;
case 875:
//#line 6602 "ps-parser.jay"
  {
	    lexer.ForInParsing = false;
	  }
  break;
case 876:
  case_876();
  break;
case 877:
  case_877();
  break;
case 878:
  case_878();
  break;
case 879:
  case_879();
  break;
case 880:
  case_880();
  break;
case 881:
//#line 6689 "ps-parser.jay"
  {
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[-2+yyTop]), (Location) yyVals[0+yyTop]);
	  }
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
  case_884();
  break;
case 886:
//#line 6719 "ps-parser.jay"
  { lexer.putback ('}'); }
  break;
case 887:
//#line 6723 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
//#line 6743 "ps-parser.jay"
  {
		
	  }
  break;
case 892:
//#line 6747 "ps-parser.jay"
  { yyVal = null; }
  break;
case 894:
//#line 6752 "ps-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 898:
  case_898();
  break;
case 899:
//#line 6781 "ps-parser.jay"
  {
		lexer.ForInParsing = true;
	  }
  break;
case 900:
//#line 6785 "ps-parser.jay"
  {
	  	lexer.ForInParsing = false;
	  }
  break;
case 901:
  case_901();
  break;
case 902:
  case_902();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
  case_915();
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 920:
  case_920();
  break;
case 921:
  case_921();
  break;
case 922:
  case_922();
  break;
case 923:
  case_923();
  break;
case 926:
//#line 6971 "ps-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 927:
  case_927();
  break;
case 928:
  case_928();
  break;
case 929:
  case_929();
  break;
case 930:
  case_930();
  break;
case 931:
  case_931();
  break;
case 934:
//#line 7020 "ps-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 935:
  case_935();
  break;
case 936:
//#line 7038 "ps-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 939:
//#line 7074 "ps-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 940:
//#line 7081 "ps-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 941:
  case_941();
  break;
case 942:
//#line 7091 "ps-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 943:
  case_943();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 946:
  case_946();
  break;
case 947:
  case_947();
  break;
case 948:
  case_948();
  break;
case 949:
  case_949();
  break;
case 950:
  case_950();
  break;
case 951:
  case_951();
  break;
case 952:
  case_952();
  break;
case 954:
  case_954();
  break;
case 955:
//#line 7200 "ps-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 958:
  case_958();
  break;
case 959:
  case_959();
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 962:
  case_962();
  break;
case 963:
  case_963();
  break;
case 964:
  case_964();
  break;
case 965:
//#line 7312 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 966:
  case_966();
  break;
case 967:
//#line 7327 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 968:
  case_968();
  break;
case 969:
  case_969();
  break;
case 970:
  case_970();
  break;
case 972:
  case_972();
  break;
case 973:
  case_973();
  break;
case 974:
//#line 7389 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 980:
  case_980();
  break;
case 986:
//#line 7443 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 987:
  case_987();
  break;
case 988:
//#line 7462 "ps-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 989:
  case_989();
  break;
case 990:
  case_990();
  break;
case 991:
  case_991();
  break;
case 992:
  case_992();
  break;
case 993:
  case_993();
  break;
case 994:
  case_994();
  break;
case 995:
  case_995();
  break;
case 996:
  case_996();
  break;
case 997:
  case_997();
  break;
case 999:
//#line 7606 "ps-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 1000:
//#line 7613 "ps-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 1001:
  case_1001();
  break;
case 1003:
  case_1003();
  break;
case 1004:
  case_1004();
  break;
case 1006:
  case_1006();
  break;
case 1007:
  case_1007();
  break;
case 1008:
//#line 7659 "ps-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1009:
  case_1009();
  break;
case 1010:
  case_1010();
  break;
case 1011:
//#line 7676 "ps-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 1012:
  case_1012();
  break;
case 1013:
  case_1013();
  break;
case 1015:
  case_1015();
  break;
case 1016:
  case_1016();
  break;
case 1019:
  case_1019();
  break;
case 1020:
  case_1020();
  break;
case 1026:
//#line 7801 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 1027:
//#line 7808 "ps-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 1028:
  case_1028();
  break;
case 1029:
  case_1029();
  break;
case 1030:
//#line 7825 "ps-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 1031:
//#line 7829 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1032:
  case_1032();
  break;
case 1033:
  case_1033();
  break;
case 1034:
  case_1034();
  break;
case 1035:
  case_1035();
  break;
case 1037:
//#line 7865 "ps-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 1039:
//#line 7873 "ps-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 1040:
//#line 7877 "ps-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 1041:
//#line 7884 "ps-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 1043:
  case_1043();
  break;
case 1044:
  case_1044();
  break;
case 1045:
  case_1045();
  break;
//#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
//#line 444 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
//#line 458 "ps-parser.jay"
{
		if (yyToken == Token.EXTERN)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
//#line 478 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_19()
//#line 516 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_20()
//#line 521 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[0+yyTop];
	  }

void case_21()
//#line 526 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_22()
//#line 531 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_25()
//#line 544 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_27()
//#line 556 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_29()
//#line 568 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var un = new UsingNamespace ((ATypeNameExpression) yyVals[-3+yyTop], GetLocation (yyVals[-4+yyTop]));
		  	current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
			
		    Lexer.AllowAutoSemiAfterToken(Token.DOT_STAR, false);
		}
	  }

void case_30()
//#line 579 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var ut = new UsingType ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			current_namespace.AddUsing (ut);
		
			lbag.AddLocation (ut, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_31()
//#line 588 "ps-parser.jay"
{
	    if (is_config_enabled) {
			var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
			if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
				report.Warning (440, 2, lt.Location,
				 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
			}

			var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
			current_namespace.AddUsing (un);
		
			lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_32()
//#line 603 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_34()
//#line 620 "ps-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-3+yyTop];
		var name = yyVals[0+yyTop] as MemberName;
		if (name == null) {
			name = new MemberName(RootNs);
		}
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
		var un = new UsingNamespace (new SimpleName (RootNs, GetLocation (yyVals[-3+yyTop])), GetLocation (yyVals[-3+yyTop]));
		current_namespace.AddUsing(un, true);
	  }

void case_35()
//#line 665 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
			
		Lexer.AutoSemiInsertion = true;
	  }

void case_36()
//#line 672 "ps-parser.jay"
{
	  	lbag.AddLocation (current_container, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
	  	if (current_namespace.Parent != null && current_namespace.Parent.Parent == null) { /* Is this the top level package?*/
			var ns = new NamespaceContainer (new MemberName("__" + file.FileName.Replace(".","_")), current_namespace);
			prev_namespace = current_namespace;
			current_container = private_namespace = current_namespace = ns;
	    } else {
			current_container = current_namespace = current_namespace.Parent;
		}
		
		lexer.parsing_modifiers = false;
	  }

void case_37()
//#line 686 "ps-parser.jay"
{
	    /* Close the private package namespace (if it's active)*/
	  	if (current_namespace == private_namespace) {
	  		if (private_namespace.Containers.Count > 0) {
		  		prev_namespace.AddTypeContainer(private_namespace);
				var priv_un = new UsingNamespace (
					private_namespace.NS.MakeTypeNameExpression(GetLocation(yyVals[-10+yyTop])), GetLocation (yyVals[-10+yyTop]));
				prev_namespace.AddUsing(priv_un, true);
			}
			current_container = current_namespace = prev_namespace.Parent;
			prev_namespace = private_namespace = null; 
	  	}
	  
/*	  	lbag.AddLocation (current_container, GetLocation ($2), GetLocation ($6), GetLocation ($11));*/
	  }

void case_40()
//#line 710 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_41()
//#line 715 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_42()
//#line 720 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_59()
//#line 764 "ps-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
		is_config_enabled = true;		
	  }

void case_60()
//#line 774 "ps-parser.jay"
{
	    if (is_config_enabled) {
			if (yyVals[0+yyTop] != null) {
				TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

				if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
					report.Error (1527, ds.Location, 
					"Namespace elements cannot be explicitly declared as private, protected or protected internal");
				}

				/* Here is a trick, for explicit attributes we don't know where they belong to until*/
				/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
				/* when we know whether they are global (assembly:, module:) or local (type:).*/
				if (ds.OptAttributes != null) {
					ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
				}
			}
			current_namespace.DeclarationFound = true;
		}
	  }

void case_61()
//#line 795 "ps-parser.jay"
{
	  	if (is_config_enabled) {
			current_namespace.DeclarationFound = true;
		}
	  }

void case_63()
//#line 805 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	 	  
	  }

void case_64()
//#line 810 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_65()
//#line 815 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_66()
//#line 820 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_75()
//#line 855 "ps-parser.jay"
{
		var sect = yyVals[0+yyTop] as List<Attribute>;
		if (sect != null) {
			yyVal = new Attributes (sect);
		}
	  }

void case_76()
//#line 862 "ps-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = yyVals[0+yyTop] as List<Attribute>;
		if (sect != null) {
			if (attrs == null)
				attrs = new Attributes (sect);
			else
				attrs.AddAttributes (sect);
		}
		yyVal = attrs;
	  }

void case_78()
//#line 881 "ps-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_79()
//#line 889 "ps-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_80()
//#line 896 "ps-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		lexer.AutoSemiInsertionAfter = 1;
 	  }

void case_81()
//#line 908 "ps-parser.jay"
{
		lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-2+yyTop];
	  }

void case_82()
//#line 916 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_85()
//#line 923 "ps-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_87()
//#line 940 "ps-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_89()
//#line 954 "ps-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
	  }

void case_92()
//#line 973 "ps-parser.jay"
{
	    lexer.AutoSemiInsertionAfter = 1;
		yyVal = yyVals[-1+yyTop];
	  }

void case_94()
//#line 983 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_95()
//#line 989 "ps-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_96()
//#line 995 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }

void case_97()
//#line 1009 "ps-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }

void case_101()
//#line 1033 "ps-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_102()
//#line 1043 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_104()
//#line 1059 "ps-parser.jay"
{ 
	  	CheckIsPlayScript("ref parameters", GetLocation(yyVals[0+yyTop]));
		yyVal = Argument.AType.Ref;
	  }

void case_105()
//#line 1064 "ps-parser.jay"
{ 
	  	CheckIsPlayScript("out parameters", GetLocation(yyVals[0+yyTop]));
		yyVal = Argument.AType.Out;
	  }

void case_124()
//#line 1103 "ps-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_125()
//#line 1115 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_126()
//#line 1126 "ps-parser.jay"
{
	  	if (yyVals[-2+yyTop] != null || (Modifiers) yyVals[-1+yyTop] != 0) {
			report.Error (7058, GetLocation(yyVals[-2+yyTop] ?? yyVals[-1+yyTop]), "Modifiers and attributes not allowed");
	  	}
	  }

void case_127()
//#line 1135 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_128()
//#line 1140 "ps-parser.jay"
{
	    is_config_enabled = true;
	    yyVal = yyVals[0+yyTop];
	  }

void case_129()
//#line 1149 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	    is_config_enabled = file.IsConditionalDefined (lt.Value.Replace("::","_"));	  
	  }

void case_130()
//#line 1154 "ps-parser.jay"
{
	  	is_config_enabled = true;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_131()
//#line 1165 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
		lexer.AutoSemiInsertion = false;
	  }

void case_132()
//#line 1170 "ps-parser.jay"
{
	  	bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
	  }

void case_133()
//#line 1177 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));
		
		lexer.parsing_modifiers = true;
		lexer.AutoSemiInsertion = true;
	  }

void case_134()
//#line 1192 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
		lexer.DynamicParsing = false;
	  }

void case_135()
//#line 1198 "ps-parser.jay"
{
		lexer.DynamicParsing = true;
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_136()
//#line 1205 "ps-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_138()
//#line 1219 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var mod = (Modifiers) yyVals[-4+yyTop];
		mod &= ~Modifiers.STATIC;
		current_field = new Const (current_type, (FullNamedExpression) yyVals[0+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_field);
		}
		is_config_enabled = true;
				
		yyVal = current_field;
	  }

void case_139()
//#line 1232 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_144()
//#line 1262 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop], (FullNamedExpression) yyVals[-1+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]));
	  }

void case_148()
//#line 1280 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_149()
//#line 1285 "ps-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_151()
//#line 1299 "ps-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[0+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[0+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-4+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
		yyVal = current_field;
	  }

void case_152()
//#line 1317 "ps-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_153()
//#line 1330 "ps-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-5+yyTop]);
			
		if (is_config_enabled) {
			current_type.AddField (current_field);
		}
		is_config_enabled = true;
	  }

void case_154()
//#line 1344 "ps-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_157()
//#line 1367 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_158()
//#line 1373 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_163()
//#line 1399 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_165()
//#line 1409 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_170()
//#line 1435 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[-2+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]));
	  }

void case_172()
//#line 1448 "ps-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_173()
//#line 1454 "ps-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_175()
//#line 1463 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_176()
//#line 1472 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = yyVals[0+yyTop] as Method;
		if (m != null) {
			async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
			if (is_config_enabled) {
				current_type.AddMember (m);
			}
			is_config_enabled = true;
		}
		
		Constructor c = yyVals[0+yyTop] as Constructor;
		if (c != null) {
			if (is_config_enabled) {
				current_type.AddConstructor (c);
			}
			is_config_enabled = true;
			current_constructor = c;
		}
		
		if (is_package_function)
			lexer.DynamicParsing = false;
			
	  }

void case_177()
//#line 1500 "ps-parser.jay"
{
		if (is_package_function)
			lexer.DynamicParsing = true;
	  
	 	async_block = false;

		if (yyVals[-2+yyTop] is Method) {
		
			Method method = yyVals[-2+yyTop] as Method;
			
			if (yyVals[0+yyTop] == null) {
				method.ParameterInfo.CheckParameters (method);
	
				if ((method.ModFlags & Modifiers.ASYNC) != 0) {
					report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
						method.GetSignatureForError ());
				}
			} else {
				method.Block = (ToplevelBlock) yyVals[0+yyTop];
				
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
						method.GetSignatureForError ());
				}
			}
			
		} else if (yyVals[-2+yyTop] is Constructor) {
		
			Constructor c = yyVals[-2+yyTop] as Constructor;
			
			if (yyVals[0+yyTop] != null) {		
				c.Block = (ToplevelBlock) yyVals[0+yyTop];
			}
			
			if (doc_support)
				c.DocComment = ConsumeStoredComment ();
		
		} else {
		
			Property.PropertyMethod propMethod = yyVals[-2+yyTop] as Property.PropertyMethod;
			
			if (yyVals[0+yyTop] != null) {
		  		propMethod.Block = (ToplevelBlock) yyVals[0+yyTop];			
		  	
				if (current_container.Kind == MemberKind.Interface) {
					report.Error (531, propMethod.Block.StartLocation,
						"`{0}': interface members cannot have a definition", propMethod.GetSignatureForError ());
				}
			}
			
		}

		current_local_parameters = null;
		current_property = null;
		current_constructor = null;
		
		/* If this was a package function, pop the container xxxxx_fn class.*/
		if (is_package_function) {
			pop_current_class();
			is_package_function = false;
		}
	
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_178()
//#line 1572 "ps-parser.jay"
{
		valid_param_mod = ParameterModifierType.All;
		
		/* If package level function, create a new package function class with */
		/* the name of the function plus "_fn".*/
		if (current_container is NamespaceContainer) {
			MemberName methodName = (MemberName) yyVals[-1+yyTop];
			MemberName className = new MemberName(methodName.Name + "_fn", GetLocation(yyVals[-1+yyTop]));
			var fnClassModifiers = (Modifiers) yyVals[-3+yyTop] | Modifiers.PARTIAL | Modifiers.STATIC; /* Allows overloads..*/
			push_current_container(new Class (current_container, className, fnClassModifiers, (Attributes) yyVals[-4+yyTop]), GetLocation(yyVals[-2+yyTop]));
			is_package_function = true;
		}
		
	  }

void case_180()
//#line 1591 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-7+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-4+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		if (is_package_function) {
			modifiers |= Modifiers.STATIC;
		}
		
		if (current_type != null && name.Name == current_type.MemberName.Name) {

			var c = new Constructor (current_type, name.Name, modifiers, (Attributes) yyVals[-10+yyTop], current_local_parameters, name.Location);

			if (yyVals[0+yyTop] != null) {
					report.Error (7011, c.Location,
						"`{0}': constructor can not have type constraints.",
						c.GetSignatureForError ());
			}

			if ((modifiers & Modifiers.STATIC) != 0) {
				if ((modifiers & Modifiers.AccessibilityMask) != 0){
					report.Error (515, c.Location,
						"`{0}': static constructor cannot have an access modifier",
						c.GetSignatureForError ());
				}
			}

			if (doc_support)
				c.DocComment = Lexer.consume_doc_comment ();
				
			lbag.AddMember (c, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = c;
		
		} else {

			if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
					modifiers |= Modifiers.VIRTUAL;

			var ret_type = yyVals[-2+yyTop] as FullNamedExpression;
			
			if (ret_type == null) {
				report.Error (7012, GetLocation(yyVals[-3+yyTop]), "Method must specify a return type.");
				ret_type = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-3+yyTop]));
			}

			var method = Method.Create (current_type, ret_type, modifiers,
					     name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

			if (yyVals[0+yyTop] != null)
				method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
					     
			if (doc_support)
				method.DocComment = Lexer.consume_doc_comment ();

			lbag.AddMember (method, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
			yyVal = method;
			
		}
	  }

void case_182()
//#line 1660 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];		
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;

		if (parameters != null && parameters.Count > 0)
			report.Error (7016, GetLocation (yyVals[0+yyTop]), "Property getter functions may not have parameters");

		current_property = null;		
						
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		}
		
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			is_config_enabled = true;
			modifiers = (Modifiers) 0;
		} else {
/*			if (!type.Equals(current_property.TypeExpression)) {*/
/*				report.Error (7002, GetLocation ($10), "Type of property getter and setter must match", current_property.GetSignatureForError ());*/
/*			}*/
			if (current_property.Set != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Set.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[0+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Get = new Property.GetMethod (current_property,
			modifiers & Modifiers.AccessibilityMask, (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_property.Get.ParameterInfo;
		yyVal = current_property.Get;
	  }

void case_184()
//#line 1721 "ps-parser.jay"
{
		var void_type = (FullNamedExpression) yyVals[0+yyTop];
		var name = (MemberName) yyVals[-6+yyTop];
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		var parameters = (ParametersCompiled) yyVals[-3+yyTop];
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null &&
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		if (void_type.Type != null && void_type.Type.Kind != MemberKind.Void)
			report.Error (7003, GetLocation (yyVals[0+yyTop]), "Property setter function must not be of type void");					

		current_property = null;
						
		MemberCore member;
		if (current_type.DefinedNames.TryGetValue(name.Name, out member)) {
			current_property = member as Property;
		}

		FullNamedExpression type; 
		
		if (parameters == null || parameters.Count != 1 || parameters.FixedParameters.Length != parameters.Count) {
			report.Error (7001, GetLocation (yyVals[-3+yyTop]), "Property setter must have a single parameter");
			type = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[-3+yyTop]));
		} else {
			type = ((Parameter)parameters.FixedParameters[0]).TypeExpression;	
		}
				
		if (current_property == null) {
			current_property = new Property (current_type, type, modifiers, name, (Attributes) yyVals[-9+yyTop]);
			if (is_config_enabled) {
				current_type.AddMember (current_property);
			}
			is_config_enabled = true;
			modifiers = (Modifiers) 0;			
		} else {
/*			if (!type.Equals(current_property.TypeExpression)) {*/
/*				report.Error (7002, GetLocation ($10), "Type of property getter and setter must match", current_property.GetSignatureForError ());*/
/*			}*/
			if (current_property.Get != null && ModifiersExtensions.IsRestrictedModifier (current_property.ModFlags & Modifiers.AccessibilityMask, modifiers & Modifiers.AccessibilityMask)) {
				current_property.Get.ModFlags |= current_property.ModFlags & Modifiers.AccessibilityMask;
				current_property.ModFlags = (current_property.ModFlags & ~Modifiers.AccessibilityMask) | (modifiers & Modifiers.AccessibilityMask);
				modifiers = (Modifiers) 0;
			} else if ((modifiers & Modifiers.AccessibilityMask) == (current_property.ModFlags & Modifiers.AccessibilityMask)) {
				modifiers = (Modifiers) 0;
			}
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[-7+yyTop]), "Property accessor already defined");
		}
		
		current_property.Set = new Property.SetMethod (current_property, 
			modifiers & Modifiers.AccessibilityMask, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop], GetLocation (yyVals[-7+yyTop]));
	  
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		current_local_parameters = parameters;
		yyVal = current_property.Set;
	  }

void case_186()
//#line 1790 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_188()
//#line 1799 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-8+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-5+yyTop];

		var modifiers = (Modifiers) yyVals[-12+yyTop];
		modifiers |= Modifiers.PARTIAL;

		if (name.ExplicitInterface == null && (modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
			modifiers |= Modifiers.VIRTUAL;
			
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-2+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-13+yyTop]);

		if (yyVals[0+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-11+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		yyVal = method;
	  }

void case_189()
//#line 1829 "ps-parser.jay"
{
		MemberName name = (MemberName) yyVals[-5+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-6+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-9+yyTop],
					    0, name, (ParametersCompiled) yyVals[-3+yyTop], (Attributes) yyVals[-9+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_190()
//#line 1848 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_193()
//#line 1873 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) 
			Lexer.AutoSemiInsertion = true;	  
	  }

void case_195()
//#line 1882 "ps-parser.jay"
{ 
	  	/* method body.*/
	   	yyVal = null; 
	  }

void case_198()
//#line 1895 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_199()
//#line 1900 "ps-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }

void case_200()
//#line 1913 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_201()
//#line 1920 "ps-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }

void case_203()
//#line 1953 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_204()
//#line 1961 "ps-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_205()
//#line 1970 "ps-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_206()
//#line 1995 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], lt.Location);
	  }

void case_207()
//#line 2000 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_208()
//#line 2010 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])), lt.Value, (Parameter.Modifier) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], l);
	  }

void case_210()
//#line 2026 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-6+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-6+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, mod, (Attributes) yyVals[-7+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_214()
//#line 2075 "ps-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_215()
//#line 2099 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_216()
//#line 2106 "ps-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_217()
//#line 2113 "ps-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_218()
//#line 2126 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[0+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[0+yyTop])));
		yyVal = new ParamsParameter (type, lt.Value, (Attributes) yyVals[-2+yyTop], lt.Location);
	  }

void case_219()
//#line 2134 "ps-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-3+yyTop]), "Cannot specify a default value for a variable argument array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var type = new ComposedCast (
			new TypeExpression(compiler.BuiltinTypes.Object, GetLocation(yyVals[-2+yyTop])),  
			ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-2+yyTop])));
		yyVal = new ParamsParameter (type, lt.Value, (Attributes) yyVals[-4+yyTop], lt.Location);		
	  }

void case_220()
//#line 2144 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_221()
//#line 2162 "ps-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_222()
//#line 2167 "ps-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-2+yyTop];
	
		var modifiers = (Modifiers) yyVals[-6+yyTop];
	
		var name = (MemberName) yyVals[-4+yyTop];
		
		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		current_property = new Property (current_type, type, modifiers,
			name, (Attributes) yyVals[-7+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-5+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		if (is_config_enabled) {
			current_type.AddMember (current_property);
		}
		is_config_enabled = true;
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_223()
//#line 2193 "ps-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_224()
//#line 2200 "ps-parser.jay"
{
  		CheckIsPlayScript("property", GetLocation(yyVals[-9+yyTop])); 	
  		  
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_226()
//#line 2215 "ps-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-1+yyTop];

		var modifiers = (Modifiers) yyVals[-9+yyTop];
		
		var name = (MemberName) yyVals[-7+yyTop];

		if (current_container.Kind == MemberKind.Class && name.ExplicitInterface == null && 
			(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)
				modifiers |= Modifiers.VIRTUAL;
		
		Indexer indexer = new Indexer (current_type, type, name, modifiers, (ParametersCompiled) yyVals[-4+yyTop], (Attributes) yyVals[-10+yyTop]);
			
		current_property = indexer;

		if (is_config_enabled) {
	  		current_type.AddIndexer (indexer);
	  	}
	  	is_config_enabled = true;
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-8+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-6+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_228()
//#line 2256 "ps-parser.jay"
{
  		CheckIsPlayScript("indexer", GetLocation(yyVals[-12+yyTop])); 	
	  
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]));
		current_property = null;		
	  }

void case_233()
//#line 2277 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_234()
//#line 2291 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_235()
//#line 2313 "ps-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_236()
//#line 2334 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_237()
//#line 2361 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_239()
//#line 2383 "ps-parser.jay"
{
		/* TODO: lbag*/
	  	yyVal = null;
	  }

void case_240()
//#line 2388 "ps-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_241()
//#line 2399 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
	    Lexer.AutoSemiInsertion = false;
	  }

void case_242()
//#line 2404 "ps-parser.jay"
{
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), is_partial);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_243()
//#line 2412 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_245()
//#line 2430 "ps-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_246()
//#line 2436 "ps-parser.jay"
{
	    lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_261()
//#line 2494 "ps-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			var modifiers = (Modifiers) yyVals[-3+yyTop];
			
/*			if (current_container.Kind == MemberKind.Class && */
/*				(modifiers & (Modifiers.NEW | Modifiers.SEALED | Modifiers.STATIC | Modifiers.PRIVATE | Modifiers.VIRTUAL | Modifiers.OVERRIDE)) == 0)*/
/*					modifiers |= Modifiers.VIRTUAL;			*/
		
			if (current_local_parameters.Count < 1) {
			
				report.Error (7037, GetLocation (yyVals[-4+yyTop]), "Invalid number of parameters for operator.");			
			
			} else {
			
				Operator op = new Operator (
					current_type, decl.optype, decl.ret_type, modifiers, 
					current_local_parameters,
					(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
				if (op.Block == null)
					op.ParameterInfo.CheckParameters (op);

				if (doc_support) {
					op.DocComment = tmpComment;
					Lexer.doc_state = XmlCommentState.Allowed;
				}

				/* Note again, checking is done in semantic analysis*/
				if (is_config_enabled) {
					current_type.AddOperator (op);
				}
				is_config_enabled = true;

				lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
			}
		}
		
		current_local_parameters = null;
	  }

void case_265()
//#line 2544 "ps-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_267()
//#line 2556 "ps-parser.jay"
{
		CheckIsPlayScript("operator", GetLocation(yyVals[-7+yyTop])); 	  
	  
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-7+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[0+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-3+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[0+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_294()
//#line 2636 "ps-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_296()
//#line 2655 "ps-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_297()
//#line 2670 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_298()
//#line 2676 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_299()
//#line 2815 "ps-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_300()
//#line 2824 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-7+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-8+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		if (is_config_enabled) {
			current_type.AddMember (d);
		}
		is_config_enabled = true;
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_301()
//#line 2852 "ps-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event_field);
		}
		is_config_enabled = true;
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_302()
//#line 2869 "ps-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_303()
//#line 2882 "ps-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-5+yyTop], (MemberName) yyVals[-3+yyTop], (Attributes) yyVals[-6+yyTop]);
		if (is_config_enabled) {
			current_type.AddMember (current_event);
		}
		is_config_enabled = true;
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_304()
//#line 2893 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_305()
//#line 2900 "ps-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_308()
//#line 2919 "ps-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_313()
//#line 2943 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null, (FullNamedExpression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
	  }

void case_315()
//#line 2953 "ps-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-5+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-3+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_316()
//#line 2962 "ps-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_320()
//#line 2983 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_321()
//#line 2988 "ps-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_322()
//#line 2993 "ps-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_323()
//#line 3001 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_324()
//#line 3013 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_325()
//#line 3029 "ps-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_326()
//#line 3041 "ps-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_327()
//#line 3057 "ps-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_329()
//#line 3066 "ps-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_330()
//#line 3078 "ps-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_331()
//#line 3083 "ps-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_332()
//#line 3095 "ps-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_333()
//#line 3101 "ps-parser.jay"
{
	  	CheckIsPlayScript("enum", GetLocation(yyVals[-9+yyTop]));
	  
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_335()
//#line 3120 "ps-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
		}
		yyVal = yyVals[0+yyTop];
	 }

void case_336()
//#line 3128 "ps-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_341()
//#line 3146 "ps-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_342()
//#line 3154 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_343()
//#line 3167 "ps-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_344()
//#line 3175 "ps-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_345()
//#line 3189 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_348()
//#line 3216 "ps-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-3+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[0+yyTop], (Modifiers) yyVals[-8+yyTop], (MemberName) yyVals[-6+yyTop], p, (Attributes) yyVals[-9+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_350()
//#line 3235 "ps-parser.jay"
{
	  	CheckIsPlayScript("delegate", GetLocation(yyVals[-11+yyTop]));
	  	
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-11+yyTop]), GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_351()
//#line 3258 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		MemberName className = new MemberName(lt.Value + "_ns", GetLocation(yyVals[-2+yyTop]));
		push_current_container(new Class (current_container, className, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), GetLocation(yyVals[-3+yyTop]));	  
		pop_current_class();
			  
	  	if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_354()
//#line 3278 "ps-parser.jay"
{
	  	if (!(yyVals[0+yyTop] is StringLiteral))
	  		syntax_error (GetLocation(yyVals[0+yyTop]), "string literal expected");
	  	yyVal = yyVals[0+yyTop];
	  }

void case_356()
//#line 3288 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
//#line 3311 "ps-parser.jay"
{
	    /* member_name*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_360()
//#line 3321 "ps-parser.jay"
{
	    /* simple_name_expr*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_362()
//#line 3334 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_363()
//#line 3341 "ps-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_364()
//#line 3349 "ps-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_365()
//#line 3355 "ps-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_367()
//#line 3371 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_368()
//#line 3380 "ps-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_370()
//#line 3391 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_371()
//#line 3400 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_372()
//#line 3405 "ps-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_373()
//#line 3413 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_374()
//#line 3427 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_376()
//#line 3437 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_377()
//#line 3448 "ps-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
	  }

void case_378()
//#line 3454 "ps-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
//#line 3464 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop]);
  	  }

void case_380()
//#line 3469 "ps-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_385()
//#line 3503 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_387()
//#line 3512 "ps-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_389()
//#line 3521 "ps-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_391()
//#line 3530 "ps-parser.jay"
{
	  	CheckIsPlayScript("arrays", GetLocation(yyVals[0+yyTop]));
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_392()
//#line 3538 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_394()
//#line 3558 "ps-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_395()
//#line 3574 "ps-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_396()
//#line 3580 "ps-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_397()
//#line 3589 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_428()
//#line 3662 "ps-parser.jay"
{
	    /* primary_expression_or_type*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_429()
//#line 3667 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_441()
//#line 3709 "ps-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_443()
//#line 3721 "ps-parser.jay"
{
	    /* member_access*/
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_444()
//#line 3729 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAttribute;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_445()
//#line 3737 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xChildAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_446()
//#line 3744 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendant;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_447()
//#line 3752 "ps-parser.jay"
{
		var ma = new MemberAccess ((Expression) yyVals[-1+yyTop], "any", null, GetLocation(yyVals[0+yyTop]));
		ma.AccessorType = MemberAccess.Accessor.AsE4xDescendantAll;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		yyVal = ma;
	  }

void case_448()
//#line 3759 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var ma = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, null, lt.Location);
		ma.AccessorType = MemberAccess.Accessor.AsE4xNamespace;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		yyVal = ma;
	  }

void case_449()
//#line 3767 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xNamespaceAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_450()
//#line 3774 "ps-parser.jay"
{
		var ea = new ElementAccess ((Expression) yyVals[-4+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ea.AccessorType = ElementAccess.Accessor.AsE4xAttributeAccess;
		lbag.AddLocation (GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = ea;
	  }

void case_451()
//#line 3781 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var ma = new AsXmlQueryExpression ((Expression) yyVals[-4+yyTop], (Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		yyVal = ma;
	  }

void case_452()
//#line 3788 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_453()
//#line 3794 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_455()
//#line 3810 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_457()
//#line 3818 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_458()
//#line 3826 "ps-parser.jay"
{
		if (current_constructor == null)
 			report.Error (7014, GetLocation (yyVals[-3+yyTop]), "Base constructor initializer may only be called in constructor");
 		var initializer = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
 		initializer.IsAsExplicitSuperCall = true;
 		current_constructor.Initializer = initializer;
 		yyVal = initializer;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_459()
//#line 3836 "ps-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_460()
//#line 3841 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert Invocation(AsNew()) into AsNew(Invocation())*/
			var invExpr = new Invocation(newExpr.Expr, (Arguments) yyVals[-1+yyTop]);
			newExpr.Expr = invExpr;
			yyVal = newExpr;
	    } else {
	    	/* Just a normal invocation*/
			yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
	    }
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_461()
//#line 3855 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_462()
//#line 3865 "ps-parser.jay"
{
	    var expList = yyVals[-1+yyTop] as List<Expression>;
	    if (expList == null) {
	    	expList = new List<Expression>();
	    }
  		var oi = new AsObjectInitializer (expList, GetLocation (yyVals[-2+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
  		yyVal = oi;
	  }

void case_463()
//#line 3878 "ps-parser.jay"
{
	  	var oi = new AsObjectInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			oi.VariableDeclaration = current_variable;
		}
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	yyVal = oi;
	  }

void case_464()
//#line 3890 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_465()
//#line 3898 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_466()
//#line 3907 "ps-parser.jay"
{
      	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
      	if (Lexer.AutoSemiInsertion)
	 	  	Lexer.AllowAutoSemiAfterToken(Token.CLOSE_BRACE, true);
 	  }

void case_470()
//#line 3925 "ps-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_471()
//#line 3931 "ps-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_472()
//#line 3936 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_473()
//#line 3944 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_474()
//#line 3950 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[-2+yyTop]);
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_475()
//#line 3956 "ps-parser.jay"
{
	  	ILiteralConstant lit = yyVals[-2+yyTop] as ILiteralConstant;
		string nm;	  	
	  	if (lit is StringLiteral) {
			nm = ((StringLiteral)lit).Value;
		} else {
	  		if (parsing_playscript || !(lit is IntLiteral || lit is DoubleLiteral || lit is BoolLiteral)) {
			  	report.Error (7019, GetLocation (yyVals[-2+yyTop]), "Must be identifier or string literal");
			  	nm = "err";
			 } else {
				nm = ((Constant)yyVals[-2+yyTop]).GetValueAsLiteral();			 
			 }
		}
	  
	  	yyVal = new ElementInitializer (nm, (Expression)yyVals[0+yyTop], GetLocation(yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_480()
//#line 4009 "ps-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_481()
//#line 4015 "ps-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_482()
//#line 4024 "ps-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }

void case_483()
//#line 4038 "ps-parser.jay"
{
	  	lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_484()
//#line 4044 "ps-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_489()
//#line 4065 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_490()
//#line 4070 "ps-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_492()
//#line 4092 "ps-parser.jay"
{
	    var newExpr = yyVals[-3+yyTop] as AsNew;
	    if (newExpr != null) {
		    /* Convert ElementAccess(AsNew()) into AsNew(ElementAccess())*/
			var elemAccessExpr = new ElementAccess(newExpr.Expr, (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			newExpr.Expr = elemAccessExpr;
			yyVal = newExpr;
	    } else {
			yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		}
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_493()
//#line 4105 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_494()
//#line 4110 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_495()
//#line 4115 "ps-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
//#line 4120 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_497()
//#line 4125 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_498()
//#line 4133 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_499()
//#line 4139 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_500()
//#line 4144 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_501()
//#line 4152 "ps-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_502()
//#line 4158 "ps-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }

void case_506()
//#line 4185 "ps-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_507()
//#line 4190 "ps-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_513()
//#line 4281 "ps-parser.jay"
{
	    var arrayInit = (AsArrayInitializer) yyVals[0+yyTop];
	    arrayInit.VectorType = (FullNamedExpression) yyVals[-2+yyTop];
	    yyVal = arrayInit;
	  }

void case_515()
//#line 4360 "ps-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_516()
//#line 4368 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_517()
//#line 4373 "ps-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_520()
//#line 4403 "ps-parser.jay"
{
		var ai = new AsArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_521()
//#line 4412 "ps-parser.jay"
{
		var ai = new AsArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (current_variable != null) {
			ai.VariableDeclaration = current_variable;
		}
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_522()
//#line 4428 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_523()
//#line 4436 "ps-parser.jay"
{
      	oob_stack.Push (Lexer.AutoSemiInsertion);
        Lexer.AutoSemiInsertion = false;
	  }

void case_525()
//#line 4451 "ps-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_526()
//#line 4457 "ps-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_529()
//#line 4482 "ps-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_530()
//#line 4490 "ps-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_531()
//#line 4504 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_532()
//#line 4510 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_533()
//#line 4516 "ps-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_534()
//#line 4528 "ps-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_535()
//#line 4549 "ps-parser.jay"
{ 
		CheckIsPlayScript("sizeof", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_536()
//#line 4555 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_537()
//#line 4565 "ps-parser.jay"
{
		CheckIsPlayScript("checked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_538()
//#line 4571 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new CheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_539()
//#line 4580 "ps-parser.jay"
{
		CheckIsPlayScript("unchecked", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
//#line 4586 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnCheckedExpr (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_542()
//#line 4607 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (TypeExpr) yyVals[0+yyTop], false, GetLocation (yyVals[-6+yyTop]));
	  }

void case_545()
//#line 4620 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-7+yyTop]));
	  }

void case_548()
//#line 4636 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], false, GetLocation (yyVals[-7+yyTop]));
	  }

void case_549()
//#line 4641 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock.TopBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-9+yyTop]));
		var decl = new BlockVariableDeclaration(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.TopBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-9+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_551()
//#line 4657 "ps-parser.jay"
{
		valid_param_mod = 0;
		start_anonymous (false, (ParametersCompiled) yyVals[-3+yyTop], (FullNamedExpression) yyVals[0+yyTop], true, GetLocation (yyVals[-8+yyTop]));
	  }

void case_552()
//#line 4662 "ps-parser.jay"
{
	    var lt = (Tokenizer.LocatedToken) yyVals[-8+yyTop];
		var anonMethod = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		var li = new LocalVariable (current_block.ParametersBlock.TopBlock, lt.Value, lt.Location);
		var type = Delegate.CreateDelegateTypeExpression(compiler.BuiltinTypes, anonMethod.AsParameters, anonMethod.AsReturnType, GetLocation(yyVals[-10+yyTop]));
		var decl = new BlockVariableDeclaration(type, li);
		decl.Initializer = anonMethod;
		current_block.AddLocalName (li);
		current_block.ParametersBlock.TopBlock.AddScopeStatement (decl);	
		yyVal = new AsLocalFunction(GetLocation(yyVals[-10+yyTop]), lt.Value, anonMethod, decl);
	  }

void case_553()
//#line 4689 "ps-parser.jay"
{
	  	CheckIsPlayScript("default values", GetLocation(yyVals[-3+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_557()
//#line 4716 "ps-parser.jay"
{
	  	CheckIsPlayScript("await", GetLocation(yyVals[-1+yyTop]));
	  	
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
//#line 4745 "ps-parser.jay"
{
	  	var expr = yyVals[0+yyTop] as Expression;
	  	if (!(expr is ElementAccess || expr is MemberAccess)) {
			report.Error (7022, GetLocation (yyVals[-1+yyTop]),
				"delete operator may only be used with element access or member access expressions");
	  	}
		yyVal = new AsDelete ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
//#line 4754 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.LogicalNot, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_562()
//#line 4760 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.OnesComplement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
//#line 4773 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Await (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
//#line 4779 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AsE4xAttribute, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_565()
//#line 4785 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsTypeOf (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_566()
//#line 4791 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new AsDelete (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
//#line 4829 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

	  	yyVal = new Unary (Unary.Operator.UnaryPlus, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
//#line 4835 "ps-parser.jay"
{ 
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.UnaryNegation, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_575()
//#line 4841 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
//#line 4847 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
//#line 4859 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Unary (Unary.Operator.AddressOf, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
//#line 4869 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
//#line 4874 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
//#line 4879 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
//#line 4884 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
//#line 4891 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
//#line 4898 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
//#line 4909 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
//#line 4914 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
  	  }

void case_591()
//#line 4931 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
//#line 4938 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
//#line 4945 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new AsIn ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
//#line 4951 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new As ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
//#line 4957 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Is ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
//#line 4967 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
//#line 4972 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
//#line 4977 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
//#line 4982 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
//#line 4989 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
//#line 4996 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
//#line 5007 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
//#line 5012 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_606()
//#line 5017 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
//#line 5022 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_608()
//#line 5027 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
//#line 5034 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_610()
//#line 5041 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
//#line 5048 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_613()
//#line 5059 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_614()
//#line 5064 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
//#line 5069 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsRefEquality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_616()
//#line 5074 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.AsRefInequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
//#line 5083 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_619()
//#line 5088 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_621()
//#line 5099 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
//#line 5104 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
//#line 5115 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
//#line 5120 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_627()
//#line 5131 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_628()
//#line 5136 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_630()
//#line 5147 "ps-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_631()
//#line 5152 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], null);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_633()
//#line 5163 "ps-parser.jay"
{
	  	CheckIsPlayScript("?? operator", GetLocation(yyVals[-1+yyTop]));
	  
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_635()
//#line 5177 "ps-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_636()
//#line 5182 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_637()
//#line 5188 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_638()
//#line 5198 "ps-parser.jay"
{
	  	Expression target = (Expression) yyVals[-2+yyTop];
	  	Expression source = (Expression) yyVals[0+yyTop];

		var assign = new SimpleAssign (target, source);
		lbag.AddLocation (assign, GetLocation (yyVals[-1+yyTop]));
	  	
	  	if (source is AsArrayInitializer) {
	  		(source as AsArrayInitializer).Assign = assign;
	  	} else if (source is AsObjectInitializer) {
	  		(source as AsObjectInitializer).Assign = assign;
	  	}
	  	
	  	yyVal = assign;
	  }

void case_639()
//#line 5214 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_640()
//#line 5219 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_641()
//#line 5224 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_642()
//#line 5229 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_643()
//#line 5234 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_644()
//#line 5239 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_645()
//#line 5244 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_646()
//#line 5249 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.AsURightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_647()
//#line 5254 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_648()
//#line 5259 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_649()
//#line 5264 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_650()
//#line 5269 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_651()
//#line 5274 "ps-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_652()
//#line 5282 "ps-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_653()
//#line 5289 "ps-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_654()
//#line 5303 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_655()
//#line 5309 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_656()
//#line 5315 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_657()
//#line 5320 "ps-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[0+yyTop]);
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_659()
//#line 5328 "ps-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }

void case_661()
//#line 5339 "ps-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_663()
//#line 5347 "ps-parser.jay"
{
	  	/* Handles only cases like foo = x.FirstOrDefault (l => );*/
	  	/* where we must restore current_variable*/
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_665()
//#line 5361 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_666()
//#line 5369 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, false, lt.Location);
	  }

void case_667()
//#line 5375 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_668()
//#line 5381 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) Error_AwaitAsIdentifier (yyVals[-1+yyTop]);
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, false, lt.Location);
	  }

void case_669()
//#line 5387 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-3+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_670()
//#line 5393 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), null, true, lt.Location);
	  }

void case_671()
//#line 5399 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-4+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_673()
//#line 5409 "ps-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], null, false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_674()
//#line 5414 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-6+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_676()
//#line 5424 "ps-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], null, true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_677()
//#line 5429 "ps-parser.jay"
{
		CheckIsPlayScript("lambda", GetLocation(yyVals[-7+yyTop])); 	  
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_685()
//#line 5488 "ps-parser.jay"
{
		lexer.ConstraintsParsing = true;
		lexer.AutoSemiInsertion = false;
	  }

void case_686()
//#line 5493 "ps-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
	    bool is_partial = IsPartial(yyVals[-5+yyTop]) || yyVals[-3+yyTop] != null;
		push_current_container (c, is_partial);
	  }

void case_687()
//#line 5505 "ps-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_container, mod_locations, GetLocation (yyVals[-6+yyTop]));

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
		lexer.DynamicParsing = false;
	  }

void case_689()
//#line 5525 "ps-parser.jay"
{
		lexer.DynamicParsing = true;	  
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_690()
//#line 5532 "ps-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_693()
//#line 5547 "ps-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_696()
//#line 5561 "ps-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_697()
//#line 5580 "ps-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_698()
//#line 5588 "ps-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_699()
//#line 5593 "ps-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_700()
//#line 5598 "ps-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_701()
//#line 5603 "ps-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_702()
//#line 5608 "ps-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_703()
//#line 5613 "ps-parser.jay"
{
		yyVal = (Modifiers)0; /* Modifiers.SEALED;  // The semantics for SEALED and FINAL don't quite match.  Ignore FINAL for right now. (BEN)*/
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_704()
//#line 5618 "ps-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_705()
//#line 5623 "ps-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_706()
//#line 5628 "ps-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_707()
//#line 5633 "ps-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_708()
//#line 5638 "ps-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_709()
//#line 5643 "ps-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_710()
//#line 5648 "ps-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_711()
//#line 5655 "ps-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_712()
//#line 5660 "ps-parser.jay"
{
	    yyVal = Modifiers.AS_DYNAMIC;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_713()
//#line 5665 "ps-parser.jay"
{
	    yyVal = Modifiers.INTERNAL;
	    StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_716()
//#line 5678 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBaseForPart ((FullNamedExpression) yyVals[-1+yyTop]);
	  }

void case_719()
//#line 5692 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_722()
//#line 5709 "ps-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_723()
//#line 5715 "ps-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_724()
//#line 5734 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_725()
//#line 5740 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_726()
//#line 5750 "ps-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_727()
//#line 5756 "ps-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_728()
//#line 5782 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_729()
//#line 5789 "ps-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_733()
//#line 5809 "ps-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_736()
//#line 5843 "ps-parser.jay"
{
		++lexer.parsing_block;
		lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_738()
//#line 5860 "ps-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_739()
//#line 5865 "ps-parser.jay"
{
	    if (is_config_enabled) {
	      /* This block should be included*/
  		  yyVal = yyVals[0+yyTop];
  		} else {
  		  /* This block should not be included.. create an empty block*/
  		  start_block (GetLocation (yyVals[-3+yyTop]));
  		  yyVal = end_block (GetLocation (yyVals[0+yyTop]));
  		}
	  }

void case_741()
//#line 5880 "ps-parser.jay"
{
	    var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	    var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
        is_config_enabled = file.IsConditionalDefined (lt1.Value + "_" + lt2.Value);
	  }

void case_742()
//#line 5889 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_743()
//#line 5895 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_744()
//#line 5905 "ps-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_745()
//#line 5910 "ps-parser.jay"
{
	  	Lexer.AutoSemiInsertion = true;
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_753()
//#line 5938 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_788()
//#line 6006 "ps-parser.jay"
{
	  	  if (parsing_playscript) {
			  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
			  yyVal = null;
		  } else {
		  	  /* NOTE: This is actually allowed in PlayScript.  We'll turn it off in ASX though as it's error prone.*/
		  	  yyVal = yyVals[0+yyTop];
		  }
	  }

void case_789()
//#line 6016 "ps-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_790()
//#line 6021 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_791()
//#line 6029 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_792()
//#line 6038 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_794()
//#line 6050 "ps-parser.jay"
{
		Lexer.NamespaceParsing = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];		
		yyVal = new AsUseNamespaceStatement (lt.Value, GetLocation (yyVals[-3+yyTop]));		
	  }

void case_796()
//#line 6060 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_797()
//#line 6076 "ps-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null)
				yyVal = ConvertAsType(sn, yyVals[-1+yyTop]);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_798()
//#line 6117 "ps-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_799()
//#line 6132 "ps-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_801()
//#line 6157 "ps-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = new Tokenizer.LocatedToken ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_803()
//#line 6174 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_804()
//#line 6180 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_805()
//#line 6186 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, null, lt.Location);
		current_variable = new BlockVariableDeclaration (new VarExpr (GetLocation(yyVals[-1+yyTop])), li);
	  }

void case_806()
//#line 6192 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_807()
//#line 6198 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, null, lt.Location);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[0+yyTop], li);
	  }

void case_808()
//#line 6204 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_810()
//#line 6214 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }

void case_811()
//#line 6219 "ps-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_815()
//#line 6237 "ps-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_818()
//#line 6252 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_819()
//#line 6261 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_820()
//#line 6270 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[0+yyTop], lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null, (FullNamedExpression) yyVals[0+yyTop]);
		d.Location = GetLocation(yyVals[-2+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]));
	  }

void case_821()
//#line 6280 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-4+yyTop];	  
		var li = GetOrCreateLocalVariable (current_variable.Variable.Block, lt.Value, 
			current_variable.Variable.DeclFlags, (FullNamedExpression) yyVals[-2+yyTop], lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop], (FullNamedExpression) yyVals[-2+yyTop]);
		d.Location = GetLocation(yyVals[-4+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_828()
//#line 6314 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 
			LocalVariable.Flags.Constant, current_variable.TypeExpression, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_830()
//#line 6340 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_832()
//#line 6346 "ps-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_836()
//#line 6371 "ps-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_837()
//#line 6379 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_842()
//#line 6407 "ps-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_843()
//#line 6416 "ps-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
//#line 6426 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_845()
//#line 6436 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_846()
//#line 6441 "ps-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }

void case_847()
//#line 6447 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_857()
//#line 6487 "ps-parser.jay"
{
	  	var label = (SwitchLabel) yyVals[0+yyTop];
	  	label.SectionStart = true;
		current_block.AddStatement (label);
	  }

void case_859()
//#line 6500 "ps-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;	 	
	 }

void case_860()
//#line 6506 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_861()
//#line 6511 "ps-parser.jay"
{
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  	Lexer.AutoSemiInsertionAfter = 1;		
	  }

void case_866()
//#line 6526 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_867()
//#line 6534 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_870()
//#line 6558 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_871()
//#line 6565 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	    
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_872()
//#line 6572 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;

		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_873()
//#line 6584 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		lexer.ForInParsing = true;
		yyVal = new Tuple<Location,Location>(GetLocation(yyVals[-2+yyTop]), GetLocation(yyVals[-1+yyTop]));
	  }

void case_874()
//#line 6591 "ps-parser.jay"
{
		lexer.ForInParsing = false;	  
		yyVal = yyVals[0+yyTop];
	  }

void case_876()
//#line 6604 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-5+yyTop] as BlockVariableDeclaration;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-2+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-5+yyTop] as List<Expression>;
			var varRef = (yyVals[-5+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-5+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				var locations = (Tuple<Location,Location>) yyVals[-6+yyTop];
				
				Foreach f = new Foreach (varRef, (Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachKey, locations.Item1);
				lbag.AddStatement (f, locations.Item2, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));
				
				end_block (GetLocation (yyVals[-1+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_877()
//#line 6640 "ps-parser.jay"
{
	    lexer.ForInParsing = false;
	  
		var locations = (Tuple<Location,Location>) yyVals[-2+yyTop];

		For f = new For (locations.Item1);
		current_block.AddStatement (f);
		
		var expList = yyVals[-1+yyTop] as List<Expression>;
		if (expList != null) 
			f.Initializer = ExpressionListToStatementList (expList);
		else
			f.Initializer = (Statement) yyVals[-1+yyTop];

		/* Pass the "For" object to the iterator_part4*/
		oob_stack.Push (f);
		
		yyVal = f;
	  }

void case_878()
//#line 6661 "ps-parser.jay"
{
		var locations = (Tuple<Location,Location>) yyVals[-1+yyTop];
		oob_stack.Pop ();
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = ((For) yyVals[-2+yyTop]);
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (locations.Item1), GetLocation (locations.Item2));

		yyVal = end_block (GetLocation (yyVals[-3+yyTop]));
	  }

void case_879()
//#line 6674 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_880()
//#line 6683 "ps-parser.jay"
{
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
	  }

void case_882()
//#line 6693 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `}'");
		For f = (For) oob_stack.Peek ();
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		yyVal = new Tuple<Location,Location> (GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_883()
//#line 6703 "ps-parser.jay"
{
	  	For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_884()
//#line 6708 "ps-parser.jay"
{
		Lexer.AutoSemiInsertion = true;
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol expected ')'");
		For f = (For) oob_stack.Peek ();
		f.Iterator = (Statement) yyVals[-1+yyTop];
		yyVal = GetLocation (yyVals[0+yyTop]);
	  }

void case_889()
//#line 6729 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var type = (FullNamedExpression) yyVals[0+yyTop];
		var li = GetOrCreateLocalVariable (current_block, lt.Value, 0, type, lt.Location);
		current_variable = new BlockVariableDeclaration (type, li);
	  }

void case_890()
//#line 6736 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_898()
//#line 6763 "ps-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }

void case_901()
//#line 6787 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }

void case_902()
//#line 6792 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));

		var blockVar = yyVals[-6+yyTop] as BlockVariableDeclaration;
		if (blockVar != null) {
			if (blockVar == null || blockVar.Initializer != null || blockVar.Declarators != null) {
				report.Error (7036, GetLocation (yyVals[-6+yyTop]), "Invalid for each initializer");	
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (blockVar.TypeExpression, blockVar.Variable, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		} else {
			var expList = yyVals[-6+yyTop] as List<Expression>;
			var varRef = (yyVals[-6+yyTop] as FullNamedExpression) ?? ((expList != null && expList.Count == 1) ? (expList[0] as FullNamedExpression) : null);
			if (varRef == null) {
				report.Error (7041, GetLocation (yyVals[-6+yyTop]), "Invalid iterator initializer");		
				yyVal = end_block (current_block.StartLocation);
			} else {
				Foreach f = new Foreach (varRef, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, AsForEachType.ForEachValue, GetLocation (yyVals[-9+yyTop]));
				lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				
				end_block (GetLocation (yyVals[-5+yyTop]));
				yyVal = f;
			}
		}
	  }

void case_910()
//#line 6837 "ps-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_911()
//#line 6845 "ps-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_912()
//#line 6850 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_913()
//#line 6858 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_914()
//#line 6864 "ps-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_915()
//#line 6869 "ps-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_916()
//#line 6877 "ps-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_917()
//#line 6882 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_918()
//#line 6888 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_919()
//#line 6897 "ps-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_920()
//#line 6902 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_921()
//#line 6911 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_922()
//#line 6927 "ps-parser.jay"
{
	    Lexer.AutoSemiInsertion = true;
	  
		Error_SyntaxError (yyToken);

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_923()
//#line 6947 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_927()
//#line 6973 "ps-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_928()
//#line 6978 "ps-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_929()
//#line 6983 "ps-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_930()
//#line 6991 "ps-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_931()
//#line 6998 "ps-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_935()
//#line 7022 "ps-parser.jay"
{
		start_block (GetLocation (yyVals[-4+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-1+yyTop];

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		c.Variable.TypeExpr = c.TypeExpression;
		current_block.AddLocalName (c.Variable);
		
		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_937()
//#line 7040 "ps-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_938()
//#line 7051 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		/* Required otherwise missing block could not be detected because*/
		/* start_block is run early*/
		var c = new Catch (null, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-3+yyTop];

		if (yyVals[-2+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = c;
	  }

void case_941()
//#line 7086 "ps-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_943()
//#line 7096 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_944()
//#line 7104 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_945()
//#line 7114 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_946()
//#line 7124 "ps-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_947()
//#line 7129 "ps-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_948()
//#line 7141 "ps-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_949()
//#line 7151 "ps-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_950()
//#line 7156 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-7+yyTop]));
	  	
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_951()
//#line 7167 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-3+yyTop]));

		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_952()
//#line 7177 "ps-parser.jay"
{
	  	CheckIsPlayScript("using", GetLocation(yyVals[-2+yyTop]));
	  
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_954()
//#line 7190 "ps-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_956()
//#line 7202 "ps-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }

void case_957()
//#line 7225 "ps-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_958()
//#line 7237 "ps-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_959()
//#line 7248 "ps-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_960()
//#line 7255 "ps-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_961()
//#line 7264 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_962()
//#line 7272 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_963()
//#line 7287 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }

void case_964()
//#line 7295 "ps-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_966()
//#line 7314 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_968()
//#line 7329 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_969()
//#line 7346 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_970()
//#line 7361 "ps-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_972()
//#line 7374 "ps-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_973()
//#line 7379 "ps-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_975()
//#line 7391 "ps-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_976()
//#line 7398 "ps-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_977()
//#line 7406 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_978()
//#line 7413 "ps-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_980()
//#line 7425 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_987()
//#line 7445 "ps-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_989()
//#line 7464 "ps-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_990()
//#line 7474 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_991()
//#line 7482 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_992()
//#line 7490 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_993()
//#line 7498 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_994()
//#line 7536 "ps-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_995()
//#line 7544 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_996()
//#line 7552 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_997()
//#line 7560 "ps-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_1001()
//#line 7615 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_1003()
//#line 7626 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_1004()
//#line 7633 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_1006()
//#line 7642 "ps-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_1007()
//#line 7649 "ps-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_1009()
//#line 7661 "ps-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1010()
//#line 7666 "ps-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1012()
//#line 7678 "ps-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1013()
//#line 7683 "ps-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_1015()
//#line 7693 "ps-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_1016()
//#line 7709 "ps-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_1019()
//#line 7736 "ps-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);

		/* Always set to true when in ineractive mode*/
		is_config_enabled = true; 
		
		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_1020()
//#line 7767 "ps-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_1028()
//#line 7810 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_1029()
//#line 7816 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_1032()
//#line 7831 "ps-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_1033()
//#line 7836 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_1034()
//#line 7844 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_1035()
//#line 7852 "ps-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_1043()
//#line 7890 "ps-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1044()
//#line 7896 "ps-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_1045()
//#line 7905 "ps-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

//#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   16,   16,   18,   17,
   19,   17,   20,   20,   15,   21,   14,   24,   22,   22,
   22,   22,   27,   28,   30,   31,    8,   26,   26,   32,
   32,   32,   33,   33,   34,   34,   29,   29,    7,    7,
    6,    6,   35,   35,   36,   36,   37,   37,   37,   38,
   38,   38,   42,   39,   43,   39,   40,   40,   40,   40,
   40,   40,    9,    9,   10,   10,   52,   50,   55,   51,
   51,   53,   53,   53,   53,   54,   54,   59,   56,   57,
   58,   58,   60,   60,   60,   60,   60,   61,   61,   65,
   62,   64,   67,   67,   67,   68,   68,   69,   69,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   81,   82,   84,   79,   85,   78,
   88,   90,   93,   94,   95,   45,   45,   98,   71,   99,
   99,  100,  100,  101,   97,   97,  105,  103,  103,  104,
  108,   72,  112,   72,   72,  107,  115,  107,  109,  109,
  116,  116,  117,  118,  117,  113,  113,  119,  119,  120,
  121,  111,  111,  114,  114,  124,   41,  127,  129,  122,
  130,  122,  132,  122,  133,  134,  135,  122,  122,  122,
  128,  128,  131,  123,  123,  126,  126,  138,  138,  138,
  138,  138,  138,  139,  139,  141,  141,  141,  144,  141,
  142,  142,  145,  145,  146,  146,  146,  140,  140,  140,
  148,  150,  151,   73,  153,  154,  155,   75,  149,  149,
  149,  149,  149,  159,  156,  160,  157,  158,  158,  158,
  161,  162,  163,  165,  166,   46,   46,  164,  164,  167,
  167,  168,  168,  168,  168,  168,  168,  168,  168,  171,
   76,  170,  170,  172,  172,  175,  169,  169,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  177,  176,  178,  176,  176,  176,  179,   77,
  181,   74,  184,  185,   74,  180,  187,  180,  182,  182,
  188,  188,  189,  190,  189,  191,  186,  183,  183,  183,
  183,  183,  195,  192,  196,  193,  194,  194,   80,  198,
  200,  201,   47,  197,  197,  197,  199,  199,  199,  202,
  202,  203,  204,  203,  203,  203,  205,  206,  207,   48,
   49,  208,  208,  209,  210,  210,   23,  211,  211,  212,
  213,  213,  213,  214,  214,  216,   87,  147,  125,  125,
  152,  152,  217,  217,  215,  215,  218,  218,  219,  219,
  221,  221,  102,   96,   96,  110,  110,  143,  143,  173,
  173,  222,  222,  222,  225,  225,  226,  224,  224,  224,
  224,  227,  227,  227,  227,  227,  227,  227,  227,  227,
  228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
  228,  228,  228,  228,  228,  228,  228,  229,  229,  229,
  230,  230,  230,  230,  247,  247,  248,  248,  249,  249,
  231,  231,  246,  246,  246,  246,  246,  246,  246,  246,
  246,  246,  246,  246,  246,  246,  246,  233,  233,  233,
  233,  245,  245,  253,  257,  255,  255,  254,  254,  256,
  256,  256,  258,  258,  258,  258,  259,  251,  251,  252,
  252,  252,  252,  252,  261,  261,  260,  260,  262,  262,
  263,  234,  234,  234,  234,  234,  234,  264,  264,  264,
  250,  250,  265,  265,  235,  236,  236,  237,  238,  242,
  242,  242,  242,  223,  223,  266,  266,  267,  267,  244,
  244,  268,  270,  269,  271,  271,   25,   25,   25,  272,
  272,  272,  272,  273,  239,  239,  240,  240,  241,  241,
  274,  275,  243,  276,  277,  243,  279,  280,  278,  281,
  282,  278,  232,  283,  283,  283,  283,  283,  283,  283,
  283,  283,  283,  283,  283,  283,  284,  284,  284,  284,
  284,  284,  284,  284,  284,  284,  284,  285,  285,  285,
  285,  285,  285,  285,  286,  286,  286,  286,  286,  286,
  286,  286,  286,  286,  286,  287,  287,  287,  287,  287,
  287,  287,  288,  288,  288,  288,  288,  288,  288,  288,
  288,  289,  289,  289,  289,  289,  290,  290,  290,  291,
  291,  291,  292,  292,  292,  293,  293,  293,  294,  294,
  294,  295,  295,  296,  296,  296,  296,  297,  297,  297,
  297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
  297,  298,  298,  299,  299,  299,  299,  300,  300,  302,
  301,  301,  301,  303,  303,  305,  304,  306,  304,  307,
  304,  308,  309,  304,  310,  311,  304,   63,   63,  312,
  312,  312,  106,  314,  315,  316,  317,  318,  319,   44,
   86,   86,   83,   83,  136,  136,  320,  320,  320,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
  320,  320,  320,   89,   89,   89,   91,   91,   91,   92,
   92,  321,  321,  322,  322,  323,  323,  324,  324,  324,
  324,  220,  220,  325,  325,  327,  137,  331,  329,  330,
  330,  328,  328,  333,  332,  326,  326,  334,  334,  335,
  335,  335,  335,  339,  339,  340,  340,  340,  337,  337,
  337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
  337,  337,  341,  341,  341,  341,  341,  341,  341,  341,
  341,  341,  341,  341,  341,  341,  355,  355,  355,  355,
  342,  356,  338,  357,  359,  359,  360,  360,  360,   66,
   66,  358,  362,  336,  364,  336,  366,  336,  361,  361,
  361,  363,  363,  370,  370,  369,  369,  371,  371,  371,
  371,  365,  365,  367,  367,  372,  372,  373,  368,  343,
  343,  343,  354,  354,  374,  375,  375,  344,  344,  378,
  379,  376,  376,  376,  381,  377,  377,  380,  380,  380,
  383,  383,  383,  385,  384,  384,  382,  382,  386,  386,
  386,  345,  345,  345,  345,  387,  387,  391,  392,  388,
  388,  388,  394,  389,  396,  393,  399,  393,  393,  402,
  398,  398,  401,  401,  403,  403,  397,  397,  405,  395,
  395,  400,  400,  404,  404,  406,  407,  407,  408,  409,
  410,  390,  346,  346,  346,  346,  346,  346,  346,  411,
  412,  412,  413,  413,  413,  414,  414,  414,  415,  415,
  416,  416,  416,  417,  417,  347,  347,  347,  347,  418,
  418,  420,  420,  419,  421,  419,  419,  419,  348,  349,
  422,  352,  350,  350,  424,  425,  353,  427,  428,  351,
  351,  351,  426,  426,  423,  423,  313,  313,  313,  313,
  429,  429,  431,  431,  433,  432,  434,  432,  430,  430,
  430,  430,  430,  438,  436,  439,  440,  436,  435,  435,
  441,  441,  441,  441,  441,  446,  442,  447,  443,  448,
  449,  450,  444,  452,  453,  454,  444,  451,  451,  456,
  445,  455,  459,  455,  458,  461,  458,  457,  457,  457,
  460,  460,  460,  437,  462,  437,    3,    3,  464,    3,
    3,  465,  465,  463,  463,    5,  466,  466,  466,  466,
  470,  466,  466,  466,  466,  467,  467,  468,  471,  468,
  469,  469,  472,  472,  473,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    1,    1,    1,    0,    3,
    0,    5,    1,    2,    1,    4,    1,    0,    5,    3,
    5,    2,    0,    0,    0,    0,   11,    0,    1,    1,
    3,    1,    0,    1,    0,    1,    2,    3,    0,    1,
    0,    1,    0,    1,    1,    2,    1,    1,    2,    1,
    1,    1,    0,    3,    0,    5,    1,    1,    1,    1,
    1,    1,    0,    1,    1,    2,    0,    3,    0,    6,
    3,    1,    1,    1,    1,    1,    3,    0,    3,    1,
    0,    3,    0,    1,    1,    3,    3,    1,    1,    0,
    4,    4,    0,    1,    1,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    3,    0,    3,    0,    5,
    0,    0,    0,    0,    0,   17,    5,    0,   10,    0,
    1,    1,    2,    5,    0,    1,    0,    3,    1,    1,
    0,   10,    0,   10,    8,    0,    0,    3,    0,    1,
    1,    2,    4,    0,    7,    0,    1,    1,    2,    5,
    0,    4,    2,    1,    1,    0,    3,    0,    0,   11,
    0,   10,    0,   10,    0,    0,    0,   14,   10,    5,
    0,    2,    1,    1,    1,    0,    1,    1,    3,    3,
    5,    1,    1,    1,    3,    5,    2,    5,    0,    8,
    0,    1,    1,    2,    1,    1,    1,    3,    5,    3,
    0,    0,    0,   12,    0,    0,    0,   15,    1,    2,
    1,    2,    1,    0,    5,    0,    5,    1,    1,    1,
    0,    0,    0,    0,    0,   17,    5,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    5,    1,    1,    1,    1,    0,    8,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    7,    0,    7,    2,    2,    0,    9,
    0,   10,    0,    0,   11,    0,    0,    3,    0,    1,
    1,    2,    4,    0,    7,    0,    2,    2,    2,    1,
    1,    1,    0,    5,    0,    5,    1,    1,    2,    0,
    0,    0,   12,    0,    2,    2,    0,    1,    2,    1,
    3,    2,    0,    5,    3,    1,    0,    0,    0,   14,
    6,    0,    1,    2,    0,    1,    1,    1,    4,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    0,    3,    1,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    2,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    3,    2,    3,    2,    3,    5,    5,
    5,    4,    4,    3,    4,    3,    4,    4,    4,    4,
    4,    3,    4,    1,    1,    1,    1,    0,    1,    1,
    3,    2,    3,    3,    3,    1,    1,    0,    1,    1,
    3,    3,    3,    2,    1,    1,    1,    1,    2,    2,
    1,    4,    4,    3,    4,    4,    3,    1,    3,    2,
    1,    3,    1,    1,    1,    4,    3,    2,    2,    2,
    2,    4,    5,    1,    2,    2,    3,    1,    2,    2,
    4,    1,    1,    1,    1,    3,    1,    1,    1,    2,
    3,    4,    4,    1,    4,    4,    4,    2,    4,    2,
    0,    0,    9,    0,    0,   10,    0,    0,   10,    0,
    0,   11,    4,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    1,    5,    4,    5,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    2,    1,    1,    0,    1,    0,
    2,    1,    1,    1,    1,    0,    4,    0,    4,    0,
    5,    0,    0,    7,    0,    0,    8,    1,    1,    1,
    1,    1,    1,    1,    0,    0,    0,    0,    0,   17,
    0,    1,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    2,    3,    0,    2,    3,    0,
    1,    1,    2,    4,    3,    1,    3,    1,    3,    1,
    1,    0,    1,    1,    1,    0,    4,    0,    5,    0,
    3,    1,    1,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    4,    4,    1,    2,    2,    2,    1,    1,
    1,    1,    0,    8,    0,    6,    0,    8,    0,    2,
    1,    0,    1,    0,    1,    1,    2,    2,    4,    4,
    6,    0,    2,    0,    1,    1,    2,    4,    1,    2,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    5,    7,    4,    0,    8,    4,    0,    1,    2,
    1,    2,    1,    2,    0,    1,    1,    2,    3,    3,
    1,    1,    1,    1,    1,    5,    4,    1,    1,    7,
    3,    6,    0,    4,    0,    6,    0,    5,    1,    0,
    4,    2,    2,    2,    1,    1,    0,    1,    0,    7,
    1,    0,    1,    0,    1,    1,    1,    3,    0,    0,
    0,   10,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    3,    4,    3,    3,    3,    2,    3,    2,
    4,    4,    3,    0,    1,    3,    4,    5,    3,    1,
    2,    0,    1,    2,    0,    8,    3,    6,    2,    2,
    0,    3,    5,    4,    0,    0,   10,    0,    0,    9,
    5,    4,    2,    1,    0,    2,    2,    2,    2,    2,
    4,    5,    4,    5,    0,    5,    0,    6,    3,    2,
    2,    2,    1,    0,    3,    0,    0,    6,    1,    2,
    1,    1,    1,    1,    1,    0,    5,    0,    3,    0,
    0,    0,   12,    0,    0,    0,   13,    0,    2,    0,
    3,    1,    0,    4,    1,    0,    4,    1,    2,    2,
    1,    2,    2,    0,    0,    4,    2,    3,    0,    4,
    2,    2,    3,    0,    1,    2,    2,    2,    4,    3,
    0,    7,    4,    4,    3,    1,    3,    0,    0,    4,
    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0, 1017,    0,    0, 1021,    0,
    0,    0,   17,   15,   16,   23,   18,    0,   25,   27,
  403,  410,  398,  400,    0,  399,    0,  406,  408,    0,
  402,  404,  407,  409,  405,  366, 1036,    0,  401, 1026,
    0,   10,    1,    0,    0,    0,   12,    0,  837,    0,
    0,    0,    0,    0,    0,    0,  868,  436,    0,    0,
  899,    0,    0,    0,    0,    0,  434,    0,    0,    0,
  505,    0,  435,    0,    0,    0,  433,  941,    0,    0,
    0,    0,    0,    0,    0,    0,  522,    0,  791,    0,
    0,    0,    0,    0,    0,    0,    0,  432,    0,  672,
  523,  464,  836,    0,    0,    0,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  430,  431,    0,    0,    0,  786,  567,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  680,  678,  681,  679,  682,  773,    0,  756,
  758,    0,  754,  757,  774,  776,  777,  778,  779,  780,
  781,  782,  783,  784,  785,  775,  909,    0,  838,  839,
  862,  863,  864,  865,    0,  903,  904,  905,  906,  907,
  908,    0,    0,    0,    0,  382,  801,  393,    0,    0,
    0,    0,  381,  357,  358,  527,    0,    0,    0,    0,
    0,    0, 1025,   24, 1018,    0,    0,  274,  273,  270,
  275,  276,  269,  289,  288,  280,  281,  277,  279,  278,
  282,  271,  272,  283,  284,  285,  291,  290,  286,  287,
  292,    0,    0, 1039,    0, 1028,    0, 1027,    3,   77,
    0,    0,    0,   75,   13,    0,  437,    0,  438,    0,
    0,  802,  910,  538,  736,  939,    0,  800,    0,  912,
  911,    0,  566,    0,    0,    0,    0,    0,    0,  560,
    0,  873,    0,  541,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  511,  918,    0,    0,    0,    0,
    0,    0,    0,  920,  925,    0,    0,  565,  559,  540,
  940,    0,    0,    0,    0,    0,    0,  385,    0,    0,
    0,    0,  384,    0,    0,    0,  675,    0,  563,  668,
  557,    0,  562,  556,  573,  568,  574,  569,  561,  555,
  577,  572,  575,  570,  576,  571,  564,  558,  666,    0,
    0,  429,  428,    0,    0,    0,  792,    0,    0,    0,
    0,    0,  445,    0,  447,    0,  508,  509,    0,    0,
    0,    0,    0,  476,    0,    0,  470,  524,  520,  175,
  174,  525,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  738,  755, 1020,  833,  834,  790,  835,
  772,  759,  788,  787,  789,  760,  761,  762,  763,  764,
  765,  766,  767,  768,  769,  770,  771,    0,    0,  973,
  988,    0,    0,  974,  976,    0, 1000,  959,  957,  981,
    0,    0,  979,  982,  983,  984,  985,  960,  958, 1023,
    0,    0,  360,  356,    0,    0,  392,   30,  534,  530,
    0,  391,    0,  394,    0,    0,   20,    0,    0,    0,
 1035,    0,  367,    0,    0,    0, 1037,    0,    6,   33,
   76,  507,    0,    0,  503,  504,    0,    0,  501,    0,
    0,    0,  485,  488,    0,    0,  480,  487,  486,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  547,  683,
    0,  915,  913,  684,    0,    0,    0,    0,    0,  917,
  916,    0,    0,  919,  929,    0,    0,    0,  930,    0,
  942,    0,  799,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  544,    0,    0,  670,    0,
  441,  442,    0,  741,  363,  364,    0,  216,  215,  217,
  389,  657,    0,    0,    0,  388,    0,  652,    0,  923,
    0,    0,    0,    0,  456,  497,    0,    0,    0,    0,
  454,  444,    0,  446,  448,    0,  494,    0,    0,    0,
    0,    0,    0,  466,  467,  462,  472,    0,    0,    0,
  638,  648,  650,  639,  640,  641,  642,  643,  644,  645,
  646,  647,  651,  649,  582,  579,  584,  581,  583,  580,
  594,  589,  595,  590,  591,  578,    0,  592,    0,  593,
    0,  600,    0,  601,    0,  602,    0,  608,    0,  609,
    0,  610,    0,  611,    0,    0,    0,    0,    0,  619,
    0,  622,    0,  625,    0,  628,    0,  631,    0,  633,
    0,    0,  871,    0,  832,  831,  830,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  972,  971,    0,  980,
    0,  970,    0,    0,    0,    0,  516,  518,    0,  515,
    0,   26,    0, 1033, 1034,  380,    0,    0,  377,    0,
    0,  213,    0,    0, 1043, 1029, 1031,   85,   83,   84,
    0,    0,   78,    0,    0,   86,   88,    0,  453,    0,
  506,    0,  491,  490,  489,  484,  439,  440,  458,    0,
  753,    0,    0,  748,  750,  751,  752,  537,  807,  553,
  945,  879,    0,  498,    0,  874,    0,    0,    0,  203,
    0,    0,    0,  197,    0,    0,  204,    0,  914,  844,
  840,    0,  944,    0,  512,    0,    0,  536,  535,  847,
    0,  934,    0,  927,    0,  931,  539,  794,  952,    0,
  798,  797,  948,  796,  803,  811,    0,    0,  867,    0,
  963,    0,  961,    0,    0,  550,    0,    0,  663,  662,
  669,    0,  667,    0,  362,  655,    0,    0,    0,  922,
  921,  793,  457,  452,  496,  495,  459,    0,  455,  443,
    0,    0,  493,  492,  460,  461,  477,  474,  475,  473,
  465,  463,  471,  526,  521,  636,    0,    0,    0,  665,
  664,  989,  965,    0,  990,    0,  975,  977,  986,    0,
 1001,    0,  969, 1015,   31,  359,  533,   29,  517,  519,
  532,   22,  735,  734,    0,  733,    0,  376, 1045,  214,
 1040,    0,    0,   79,    0,    0,    0,   42,   40,   34,
    0,  105,  104,    0,  502,  483,  482,  481,  742,  743,
  737,  749,    0,    0,    0,  500,    0,  875,  877,  900,
    0,    0,  207,    0,    0,    0,    0,    0,  943,  513,
  845,  937,    0,    0,  928,  951,    0,    0,  829,  810,
    0,    0,    0,  816,  866,  964,  962,    0,    0,    0,
  671,  661,  365,  654,  653,  673,  451,  450,  449,  637,
  635,  739,    0,    0,  967,    0,  994,    0,    0, 1009,
 1010, 1003,    0,  379,  378, 1044,    0,    0,   87,   81,
    0,   89,    0,    0,  102,    0,    0,    0,    0,    0,
  499,    0,    0,    0,  220,    0,    0,    0,    0,  205,
  200,    0,  841,    0,    0,    0,  933,    0,  954,    0,
    0,    0,    0,  806,  817,    0,    0,  676,    0,  872,
  869,    0,  966,    0,    0,    0,    0,  987,    0, 1016,
 1032,    0,    0,    0,   94,   95,   98,   99,   35,   41,
  823,  150,    0,    0,    0,  826,  956,    0,    0,  889,
    0,  893,    0,    0,    0,    0,    0,  542,  383,    0,
    0,  843,  853,    0,  861,    0,    0,    0,  851,  857,
    0,    0,  953,  949,    0,    0,    0,    0,    0,    0,
  674,  870,  968,  991,    0,  978,    0,    0, 1005,    0,
  100,   92,    0,    0,    0,  808,  827,  946,    0,    0,
  878,  886,  885,  880,  882,  901,  219,  208,    0,    0,
  201,  548,    0,  846,    0,  858,    0,  850,  852,  935,
  938,    0,  804,    0,  819,  545,    0,  677,    0,  995,
 1012, 1013, 1006,   80,    0,   96,   97,    0,    0,    0,
    0,    0,    0,  876,    0,    0,  209,  543,    0,  860,
  859,    0,  950,    0,    0,  551,    0,    0,    0,  101,
    0,    0,    0,    0,   62,   47,    0,   55,   57,   58,
   60,   61,   67,   68,   69,   70,   71,   72,  176,   36,
  828,  947,  890,  897,  881,    0,  895,    0,  902,    0,
  549,  744,  936,  821,  546,    0,  992,    0, 1007,   48,
    0,    0,  702,  712,  703,  700,  708,  697,  707,  701,
  699,  698,  705,  704,  710,  706,  709,  711,  713,    0,
    0,  695,   59,   56,    0,    0,  884,  883,    0,  210,
    0,  552,    0,  996,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  696,  195,  177,  194,   37,  898,
    0,    0,    0,    0,    0,    0,    0,  369,    0,    0,
    0,    0,    0,    0,  185,  685,    0,    0,  745,    0,
  993,    0,   66,  347,    0,  330,    0,  190,  178,    0,
    0,  181,  183,    0,    0,  353,    0,    0,  247,    0,
  137,    0,  999,  997,    0,  336,  335,    0,  373,    0,
    0,    0,    0,  370,    0,    0,  354,  351,    0,  686,
  242,  132,    0,  331,    0,    0,    0,  374,    0,    0,
  186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  346,  332,
    0,  340,  193,  179,    0,    0,    0,    0,    0,  397,
    0,    0,    0,    0,    0,  348,    0,  329,    0,    0,
    0,  192,  189,  182,  184,    0,  716,    0,  395,    0,
  687,    0,  722,  243,  133,    0,  345,    0,    0,  341,
  180,    0,  719,    0,    0,    0,  723,    0,    0,  349,
    0,   44,  333,  187,  396,  725,    0,  688,  244,  134,
    0,  344,    0,  730,    0,  731,  728,    0,  726,    0,
    0,    0,  350,  188,    0,    0,  124,    0,    0,  118,
  112,    0,    0,  108,  110,  111,  113,  114,  115,  116,
  117,  119,  120,  121,  122,  123,    0,  259,  254,  252,
  253,  255,  256,  257,  258,    0,    0,  250,    0,  729,
  727,    0,    0,    0,  689,  109,    0,  245,  251,  135,
  128,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,  125,  260,  268,    0,    0,    0,    0,
    0,  368,    0,  298,    0,    0,  299,  297,    0,  371,
    0,    0,    0,    0,    0,    0,    0,  690,  246,  136,
  130,    0,    0,    0,    0,    0,    0,  225,  372,    0,
  266,    0,    0,  263,  262,  261,  138,    0,  295,  387,
    0,  386,    0,  293,    0,    0,  221,  151,    0,  303,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  149,  147,    0,  146,    0,  307,    0,    0,  155,    0,
    0,    0,    0,    0,    0,  222,  157,    0,    0,    0,
    0,    0,  142,  322,    0,  304,    0,    0,  316,    0,
    0,    0,  311,  296,  173,    0,    0,    0,    0,  168,
  300,  294,    0,    0,    0,    0,    0,    0,    0,  161,
  148,    0,  139,  143,    0,    0,    0,  318,    0,  319,
  308,    0,    0,  302,  312,    0,    0,  154,  169,    0,
  265,  267,  264,  233,    0,  223,    0,    0,  158,    0,
  152,  162,    0,  323,  325,  305,    0,    0,  317,    0,
  172,    0,  226,    0,    0,  230,  232,    0,    0,    0,
    0,    0,    0,    0,  234,  236,  224,    0,  144,  327,
  328,  324,  326,  314,  170,  227,    0,    0,  164,  316,
    0,  240,  239,  238,  235,  237,    0,  315,  228,  165,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   53,    9,   54,   10, 1139,   55,  251,  771,  471,
   12,   13,   23,   24,   25,   26,   27,  211,  212,   56,
   29,   30,  320,  476,  201,  900,  738,  983, 1140, 1094,
 1226,  901, 1650,  620, 1166, 1167, 1168, 1169, 1170, 1420,
 1421, 1201, 1202, 1173, 1174, 1175, 1176, 1177, 1178,  254,
  733,  498,  734,  735,  978,  736,  737,  982,  897, 1034,
 1035, 1036,  430,  506, 1135,  114,  904, 1422, 1423, 1424,
 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
 1435, 1436, 1220, 1452, 1453, 1244, 1258, 1292, 1333, 1324,
 1353, 1371, 1389, 1412, 1479, 1350, 1543, 1529, 1561, 1562,
 1563, 1058, 1544, 1041, 1559, 1042, 1558, 1540, 1588, 1521,
 1551, 1534, 1578,  939, 1586, 1589, 1590, 1667, 1579, 1580,
 1576, 1179, 1247, 1225, 1259,  773, 1300, 1344, 1361, 1305,
 1345, 1306, 1287, 1331, 1403, 1221,  820,  774,  775,  776,
  777,  720,  584, 1190,  721,  722, 1483, 1539, 1616, 1585,
 1635, 1492, 1525, 1644, 1661, 1617, 1618, 1665, 1657, 1658,
 1290, 1323, 1388, 1446, 1411, 1478, 1447, 1448, 1475, 1516,
 1497, 1612,  323,  242, 1526, 1476, 1536, 1532, 1506, 1547,
 1531, 1571, 1566, 1545, 1596, 1601, 1569, 1572, 1573, 1660,
 1602, 1567, 1568, 1652, 1640, 1641, 1276, 1298, 1340, 1326,
 1359, 1341, 1342, 1378, 1295, 1376, 1401, 1285, 1286,  477,
  204,  205,  473,  577,  493,  243, 1261,  718,  719,  885,
 1059,  207,  482,  115, 1368, 1351,   49,  116,  117,  118,
  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  267,  749,  508,
  515,  516,  136,  375,  616,  376,  852,  377,  848,  517,
  518,  519,  744,  765,  509,  483,  709,  137,  379,  138,
  383,  209,  480,  528, 1110,  815, 1155,  431,  778, 1149,
  949, 1196,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,  152,  153,  154,  587,  588,  589,
  821,  822,  862,  155,  573,  570,  818,  354, 1019,  568,
 1080,  156,  157,  535, 1288, 1322, 1386, 1410, 1477, 1222,
 1372, 1373, 1408, 1409,  886,  752,  520,  911,  432,  159,
  682, 1193, 1231,  753,  754,  433,  434,  435,  162,  163,
  164,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  445,  446,  447,  176,  448,  593,  177,  263,  557,  558,
  808,  938,  942,  560,  987,  913, 1044,  940,  943, 1049,
  944, 1045, 1046,  449,  178,  179,  180,  782, 1004, 1066,
 1005, 1067, 1068, 1118, 1069, 1070,  181,  182,  183,  184,
  185, 1022,  766,  526,  767,  992,  768, 1053,  993, 1054,
 1185, 1145, 1105, 1186, 1099, 1187, 1188,  283,  994, 1146,
  186,  187,  188,  189,  190,  191,  301,  548,  549, 1008,
 1152,  313,  989,  914, 1142, 1011,  937, 1122,  192,  459,
  193,  460,  964, 1024,  461,  462,  702,  693,  694,  968,
  463,  464,  465,  466,  467,  969,  688,  966, 1129, 1233,
 1271, 1026, 1158, 1253,  871,  696,  872, 1088, 1029, 1089,
 1159,  973,  215,   17,   19,   50,   51,  246,  723,  893,
  494,  724,  725,
  };
  protected static readonly short [] yySindex = {         -129,
    0, -215, -124, -228, -163, 1010,    0,  226,    0,    0,
 -163, -228,    0,    0,  267,    0, 6678, -163,    0,  727,
  139,    0,    0,    0,    0,    0,    0, -236,    0,    0,
    0,    0,    0,    0,  420,    0,  560,    0,    0, 3088,
    0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
  462,    0,    0,  226,  112, -163,    0,  529,    0,  593,
  555, -213, -304, -166,  212, 8927,    0,    0,  212,  212,
    0,  337, -200,  212,  212, 7320,    0, 7623,  212,  212,
    0, 7786,    0,  633, 9090, -210,    0,    0,  745,  212,
 -304,  212,16893,16893, -249, 8764,    0,14412,    0, 9253,
 9416, 9579, 9742, 9905,10068,10231,10394,    0,  320,    0,
    0,    0,    0,  161,  483,  708,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -315,  637, 7949,    0,    0,
 1348,  812, -101,  819,  614,  803,  657,  642,  678,  650,
  547,  685,    0,    0,    0,    0,    0,    0,  734,    0,
    0, 3636,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  193,    0,    0,
    0,    0,    0,    0, 6841,    0,    0,    0,    0,    0,
    0,  284,  328,  112,    0,    0,    0,    0,  330,  701,
  752,  700,    0,    0,    0,    0,  782,  794,  844,  815,
  151,  800,    0,    0,    0,  950,  950,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  892,  837,    0,  862,    0, -270,    0,    0,    0,
  112,  962,  112,    0,    0, 1073,    0,  897,    0,14568,
13944,    0,    0,    0,    0,    0,14412,    0,  954,    0,
    0,  950,    0, -190,  973, -178, 1043,10557,  160,    0,
  950,    0,  212,    0,  978,14412,  555,  555,14412,14412,
14412, 2306,  923,  977,    0,    0, -247, 8764,  205, 1119,
  555,  950,14412,    0,    0,  555,  577,    0,    0,    0,
    0,14412,  633,  924,14100,  974,14412,    0,  923,  705,
 1070, -304,    0, 1075, -304,  355,    0, 1020,    0,    0,
    0,  -35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  934,
 5856,    0,    0,16863,  555,14412,    0,  646, 8112,13944,
  419,  286,    0,  935,    0,  312,    0,    0, 8275,13944,
  981,  988,  990,    0, -259, -143,    0,    0,    0,    0,
    0,    0,  992,14412,14412,14412,14412,14412,14412,14412,
14412,14412,14412,14412,14412,14412,14412,10720,10883,11046,
 6176, 8793,11209,11372,11535,11698,11861,12024,12187,12350,
12513,12676,15348,15348,15348,15348,12839,13002,13165,13328,
13491,15348,14412,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  142,  290,    0,
    0,16893,16893,    0,    0, -304,    0,    0,    0,    0,
  402, 1017,    0,    0,    0,    0,    0,    0,    0,    0,
  112,  943,    0,    0, -260, 1003,    0,    0,    0,    0,
  628,    0,  782,    0, -304,  995,    0, -163,  892,  892,
    0,   46,    0,  680,  892, 1012,    0, -170,    0,    0,
    0,    0,  923,  205,    0,    0,  999,  736,    0,14412,
14412, 1147,    0,    0,  201, 1006,    0,    0,    0, 7004,
 1021,  950, 1022, 1018, -304, 7460,14256,   95,    0,    0,
  555,    0,    0,    0,  -34,   67, 1024, 1001,  963,    0,
    0,  163,  164,    0,    0,  450,  633,  336,    0, 1026,
    0,  555,    0,  174,  492,  794, -304,  782,  950, -184,
  176,14412, 1109,14412, 1110,    0, 1031,16863,    0,  104,
    0,    0,  104,    0,    0,    0, -303,    0,    0,    0,
    0,    0,  923, -304, 9608,    0, 1036,    0, 1032,    0,
 1167,  555, 7004,  579,    0,    0, -205,  201,14412,  581,
    0,    0,14568,    0,    0,14568,    0,  -89,  201,  -80,
14412,14412,14412,    0,    0,    0,    0,  478, 7949,  637,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  812,    0,  812,    0,
  812,    0, -101,    0, -101,    0, -101,    0,  819,    0,
  819,    0,  819,    0,  819,  614,  614,  614,  614,    0,
  803,    0,  657,    0,  642,    0,  678,    0,  650,    0,
 -100, 7004,    0,  212,    0,    0,    0, 8438, 1129, -304,
 1131, -304, 8438, 8438, 1033,14412,    0,    0, 1017,    0,
 -304,    0,  715,  923,  700, 1039,    0,    0,  737,    0,
  700,    0, 1056,    0,    0,    0,  733, -272,    0, 9608,
  680,    0, 1053, 1045,    0,    0,    0,    0,    0,    0,
  923,  977,    0, 1046, 1049,    0,    0, -208,    0,  829,
    0,14568,    0,    0,    0,    0,    0,    0,    0, 7297,
    0,   17, 7004,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -304,    0,  -69,    0, 1142, 1050, 1143,    0,
  566,  125, 1064,    0, 1055, 1057,    0,   95,    0,    0,
    0, 6841,    0, 6841,    0,   82,  923,    0,    0,    0,
 1071,    0, 8956,    0,  633,    0,    0,    0,    0, 6841,
    0,    0,    0,    0,    0,    0, 7949, 1061,    0, 6841,
    0,14412,    0,14412,   95,    0, 1074,  104,    0,    0,
    0,14412,    0,  950,    0,    0, -304,16863, 1099,    0,
    0,    0,    0,    0,    0,    0,    0, 1076,    0,    0,
  744,  750,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8601,   17,14412,    0,
    0,    0,    0, 1157,    0, 1159,    0,    0,    0, -186,
    0, 1068,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1019,    0,   46,    0,    0,    0,
    0,  680,  680,    0,  943, 1082, 1083,    0,    0,    0,
 1084,    0,    0,14412,    0,    0,    0,    0,    0,    0,
    0,    0, 1066, 1067, 1078,    0,14412,    0,    0,    0,
 -207, 1028,    0, 1080,  112, 1230, 1095, 1201,    0,    0,
    0,    0,  329, -304,    0,    0, -151, -184,    0,    0,
 -304,  555, 1061,    0,    0,    0,    0, 1098,   95, 1125,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  187, 8438,    0, 8438,    0, 1120, 8438,    0,
    0,    0,  351,    0,    0,    0, 1106,  943,    0,    0,
14724,    0, 1114, 1051,    0,14412, 1102, 7949, 1061,  950,
    0,14412,14412,14412,    0, 1097, 1107, 9771, 1112,    0,
    0, 1108,    0, 6841, -211,  950,    0, 1117,    0, 1061,
 1126, 1061,   47,    0,    0, 1116, 1128,    0,  104,    0,
    0,  555,    0, 8438, 1151, 8438, 8438,    0,14412,    0,
    0, 1049,  239,  765,    0,    0,    0,    0,    0,    0,
    0,    0, -304,  555, 1102,    0,    0, 1061, 1130,    0,
 1132,    0, 6841,  570, 1132,14412, 9119,    0,    0, 1261,
 9771,    0,    0,14412,    0, 1135, 6352, -219,    0,    0,
 1133, 1271,    0,    0,  555,  950, 7949, 9771, 1127,  104,
    0,    0,    0,    0, 1158,    0,  847, 1136,    0, 1139,
    0,    0,14724,  532, 1123,    0,    0,    0, -184, 6841,
    0,    0,    0,    0,    0,    0,    0,    0, 1138,  633,
    0,    0,  -96,    0, 7004,    0, 6352,    0,    0,    0,
    0, 6841,    0, 1141,    0,    0, 9771,    0, 8438,    0,
    0,    0,    0,    0,14412,    0,    0,  532,  114, 1146,
14412, 6841, 1061,    0,14412, 6841,    0,    0,  633,    0,
    0, 1148,    0, 7949,  633,    0, 1166, 8438,14412,    0,
 1152,    0,16796,  805,    0,    0,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -257,    0, 1150,    0,14412,
    0,    0,    0,    0,    0,  633,    0, 1170,    0,    0,
  220, 1168,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  479,
16796,    0,    0,    0,  645,  532,    0,    0,14412,    0,
 7004,    0, 8438,    0,    0,  114, 1090, 1090,16758, 1091,
 1091, 1100, 1251,  415,    0,    0,    0,    0,    0,    0,
 1169, 1179, 8438, 1172, 1171, 1160,  923,    0, -160,16758,
 1118, 1177, 1182, 1161,    0,    0, 1305, 1318,    0, -304,
    0, 1179,    0,    0, 9282,    0, 1183,    0,    0, 1184,
 1134,    0,    0, 1124, 1178,    0, 1091, 1090,    0, 1090,
    0, 1090,    0,    0,   95,    0,    0, 1196,    0,   95,
   95, 1275, 1193,    0,   95,   95,    0,    0, 1198,    0,
    0,    0, 1195,    0, 1199, 1202,    0,    0, 1203, 1204,
    0, 1308, 1308, 1308, 1197,  112, 1200, 1200, 1200, 1200,
   95,  950, 1296, 1296, 1296, 9771, 1153,  863,    0,    0,
 1206,    0,    0,    0, 9771, 9771, 9771, 9771, 1213,    0,
 1350,  950, 1246, 1246, 1246,    0, 1354,    0, 1227,  112,
 1246,    0,    0,    0,    0, 1214,    0,  -54,    0, 1162,
    0, 1246,    0,    0,    0, 1246,    0, 1212, 1218,    0,
    0, 1262,    0,  950,  -94, 1237,    0, 1241, 1243,    0,
14412,    0,    0,    0,    0,    0, 2969,    0,    0,    0,
 1225,    0, 1246,    0, 1240,    0,    0, 1232,    0, -216,
  112, -216,    0,    0, 1245, 2969,    0,    0,16796,    0,
    0, 1247, -216,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,16796,    0,    0,    0,
    0,    0,    0,    0,    0, 1252,  112,    0, 1253,    0,
    0, -216, 1255,14519,    0,    0, 1812,    0,    0,    0,
    0, -216, 1185, 1091,  264, 1189,16578,  424,   88, 3088,
 1091, 1191,    0,    0,    0,    0, 1218, 1218, 1218, 1258,
 1244,    0, 1248,    0,  950, 1249,    0,    0,  950,    0,
  923, 1257,   90, 1263, 1250, 1254,  649,    0,    0,    0,
    0,  950,  950, 1264, 9934, 1207, 1265,    0,    0,  923,
    0, 9771, 9771,    0,    0,    0,    0, 1273,    0,    0,
 1393,    0, 1267,    0,   95,   95,    0,    0, -148,    0,
 1256,   95, 1259, 1278, 1270,   95, 1276, 1277, 1283, 1266,
    0,    0, 1269,    0,  146,    0, 1274, 1280,    0, 1421,
 1279,  645, 1286, 1281, 1282,    0,    0, 1284,14412, 1226,
 1285, 1269,    0,    0,16796,    0,  112,  112,    0, 1228,
 1288, 1274,    0,    0,    0,14412, 1229, 1289, 1279,    0,
    0,    0, 9771,10097,  188, 7949, 1233, 1295, 1284,    0,
    0, 1287,    0,    0,  138, 1300,16796,    0,16796,    0,
    0, 7949, 1297,    0,    0, 1324, 1278,    0,    0, 1328,
    0,    0,    0,    0,16796,    0,  188,  188,    0, 1313,
    0,    0, 9771,    0,    0,    0, 1381, 1456,    0, 9771,
    0, 1317,    0,  876, 1333,    0,    0, 9771, -148,  668,
  668, 1314, 9771,  188,    0,    0,    0, 1316,    0,    0,
    0,    0,    0,    0,    0,    0, -169, -169,    0,    0,
 1340,    0,    0,    0,    0,    0, 7949,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {           57,
    0,    0, 6515,   57,    0,    0,    0, 1730,    0,    0,
   60, 2660,    0,    0,    0,    0, 1344,   60,    0,    0,
    0,  311,    0,    0,    0,    0,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1732,    0,    0,
 1732,    0,    0, 1730,   35,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1329,    0,    0,
    0, 1329,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  172,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7102,    0,
    0,    0,    0,    0,    0, 3704,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  177,    0,    0,    0,    0,
 3911, 3994, 4372, 4692, 5091, 5492, 5652, 5812, 5972, 1334,
  262, 6211,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   22,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1344,    0,    0,    0,    0,    0,
    0,    0,    0,   59, 2447,    0,    0,    0,  422,  673,
    0,    0,    0,    0,    0,    0, 2104, 1998, 1330,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1732,   74,    0,    0,    0,    0,    0,    0,    0,
   42,    0,   64,    0,    0,    0,    0,    0,    0,    0,
  219,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3298,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1440, 3441,    0,    0,    0,    0, 3155, 1331,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -119,    0,    0,  144, 1998,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1347,    0, 1329,    0,    0,    0,  219,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  219,
    0,    0,    0,    0,    0,  240,    0,    0,    0,    0,
    0,    0, 1351,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1058,    0,    0,    0,    0,    0,    0,    0,    0,
 2899,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2263,    0,    0,    0,    0, 1352, 1732, 1732,
    0,   97,    0, 9445, 1732, 1742,    0,    0,    0,    0,
    0,    0, 3155, 3768,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  224,    0,    0,    0,   85,
    0,    0,    0,    0,    0, 1339,    0,  350,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1673,    0,    0,
    0,    0,    0,    0,  411,13565,    0,  259,    0,  836,
    0,    0,    0,    0,    0,    0,    0, 1347,    0,14880,
    0,    0,14880,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  568,    0,    0,    0, 1353,    0,    0,    0,
 1331,    0, 1344, 3155,    0,    0,    0,    0,    0, 3155,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  224,
    0,    0,    0,    0,    0,    0,    0,    0, 1356,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4100,    0, 4183,    0,
 4289,    0, 4451,    0, 4532,    0, 4611,    0, 4771,    0,
 4852,    0, 4931,    0, 5012, 5172, 5251, 5332, 5411,    0,
 5571,    0, 5731,    0, 5891,    0, 6051,    0, 6132,    0,
    0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1058,    0,
    0,    0,    0,  422,    0,    0,    0,    0,    0,    0,
  754,    0,    0,    0,    0,    0, 1290,    0,    0,    0,
10260,    0,    0,  857,    0,    0,    0,    0,    0,    0,
  742,  726,    0,    0, 1351,    0,    0, 1360,    0,15036,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   92,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   94,    0, 1345,    0,    0,    0,
 1298,  227,    0,    0, 1359, 1361,    0,  350,    0,    0,
    0, 1344,    0, 1344,    0,    0, 1440,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1344,
    0,    0,    0,    0,    0,    0,    0, 1355,    0, 1344,
    0,    0,    0,    0,  350,    0,    0,14880,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -204,
    0,  449,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
    0,10423,16909,    0, 1356,    0,  758,    0,    0,    0,
 1368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  878,  770,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  338,    0,    0, 1889,    0,    0,
    0,    0,  545, 1366,    0,    0,  770,  836,    0,    0,
    0,    0,  132,    0,    0,    0,    0,    0,  350,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  776,    0,    0,    0,    0,    0, 1357,    0, 1372,    0,
    0,    0,  629,    0,    0,  778,    0,    0, 1373,    0,
    0,    0,    0, 1344, 1378,    0,    0,    0,    0, 1372,
    0, 1355,  358,    0,    0,    0,    0,    0,14880,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1351,13756,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1365,    0,    0, 1379,    0,    0,
    0,    0, 1344,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  911, 1382,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,14880,
    0,    0,    0,    0,    0,    0, -139,  487,    0,    0,
    0,    0,    0,15431,    0,    0,    0,    0,  213, 1344,
    0,    0,    0,    0,    0,    0,    0,    0,  783,    0,
    0,    0,    0,    0, -171,    0,  916,    0,    0,    0,
    0, 1344,    0,  397,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,15431, 3013,    0,
    0, 1344,  154,    0,  763, 1344,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,16119,  602,16283,    0,    0, 3101,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  791,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
16368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  499,
14207,    0,    0,    0,    0, 2793,    0,    0,    0,    0,
  922,    0,    0,    0,    0,16207,    0,    0,    0,    0,
    0,    0,  595,    0,    0,    0,    0,    0,    0,    0,
    0,  551,    0,    0,    0, 1385,  -53,    0,    0,    0,
    0,    0,    0, 1369,    0,    0, 1306, 1320,    0,    0,
    0,  551,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  350,    0,    0,    0,    0,  350,
  350,  757,    0,    0,  350,  350,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  362,    0,    0,    0,
    0,  443,  443,  443,    0,  331,  465,    0,    0,    0,
  350,    0,  464,  464,  464,    0,    0,15533,    0,    0,
 1387,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  445,    0, 1389, 1389, 1389,    0,  626,    0,    0,  366,
  670,    0,    0,    0,    0,    0,    0,  610,    0,    0,
    0,  676,    0,    0,    0, 1374,    0,    0, 2554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  670,    0,    0,    0,    0,  600,    0,15635,
15941,15635,    0,    0,    0,    0,    0,13755,14363,    0,
    0,    0,15737,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 7574,    0,    0,    0,
    0,    0,    0,    0,    0,    0,16043,    0,    0,    0,
    0,15839,    0,  499,    0,    0,  499,    0,    0,    0,
    0,15635,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2554, 2554, 2554,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1384,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1384,
    0,    0,    0,    0,    0,    0,    0,  818,    0,    0,
 1390,    0,    0,    0,  350,  350,    0,    0,  891,    0,
  920,  350,    0,    0,    0,  350,    0,    0,    0,  928,
    0,    0, 1376,    0, 7122,    0, 1391,    0,    0,15192,
 1392,    0,    0,    0,    0,    0,    0, 1394,    0,    0,
    0, 1396,    0,    0,  253,    0,16616,16654,    0,    0,
    0, 1397,    0,    0,    0,    0,    0,    0, 1400,    0,
    0,    0,    0,    0,16720,    0,    0,    0, 1401,    0,
    0,    0,    0,    0,    0,    0, 1445,    0, 1531,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  941,    0,16414,16452,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  891,16496,
16534,  942,    0,16720,    0,    0,    0,  948,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1743,    0,    0,    0, 1215,   11, 1612,  -52,  -47,
    0, 1796, -199,  367,  368,  276,    0,    0,    0, 1819,
    0,    0,   -6,    0,    0,    0,    0,    0,-1071,    0,
    0,    0, -767, -704,  589,    0,  672,  636,    0,-1092,
-1085,    0,    0,    0,    0,    0,    0,    0,    0, -242,
    0,    0,    0,  908,    0,  945,    0,    0,    0,    0,
  748,  797,  -17, -245,    0, 1242,    0, -763,    0, -689,
 -580, -565, -504, -481, -469, -455,    0,    0,    0, -372,
    0,    0,-1016,    0,    0,    0,    4,    0,   15,    0,
   19, -365,    0,    0,    0,   10,  252,    0,    0,    0,
  333, -921,    0,-1121,    0, -280,    0,    0,    0,    0,
  289,    0,    0, -131,    0,    0,  304,    0,    0,  318,
    0,    0,  347,    0,-1146, -687,    0,    0,    0,    0,
  -73,    0,    0,    0,    0,-1201,  -60,    0,    0,  975,
  979, 1140, -562,    0,    0, -326,  431,    0, -638,    0,
    0,    0,    0,    0,    0,    0,    0,  245,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  458,    0,    0,
    0,    0,   36,  436,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  247,    0,    0,  340,    0,
    0,  341,  343,  272,    0,    0,    0,    0,    0,    0,
    0,    0,  554,    0,    0,    0,    0,    0,    0, -172,
    0,    0, -104,    0,  634,    0,  447,    0, 1030,    0,
 1898, -288,   -1,   -5,    0, -449,    0,    0, 1604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1137,    0,    0,    0,   32,  552, -325,
  816, 1550,    0,    0,    0,    0,    0, 1303,  743,    0,
 1174,    0, 1411,    0, 1186,    0,    0,    0, 1307,    0,
    0,    0,  477,    0,    0,    0,    0,   93,    0,    0,
    0,    0,    0,  792,  868,  869,  855,  905, 1508, 1513,
 1507, 1515, 1512,    0, 1514,    0,    0,    0, 1111, 1370,
 -541,    0, -610,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -300,    0,    0,    0,    0,    0,-1128,
    0,  574,    0,  535,    0, -664,    0, 1101,  109,    0,
    0,    0,    0, -281, -574,   -8, -493,    8,    0, 1793,
    0,  126,    0,  165,  179,  183,  202,  248,  314,  327,
  369,  372,  376,    0, -596,    0,    0,  -31,    0,    0,
 -876,    0, -618,    0,    0,    0,    0, -632,  -74,  946,
 -858,    0,  912,-1065,    0,    0,    0, -540,    0,    0,
    0,  890,    0,    0,  893, -238,    0,    0,    0,    0,
    0,    0,    0,    0, 1435,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -45,    0, 1415,    0,
    0,    0, 1027,    0,    0,    0,    0,    0,    0, -180,
    0,    0,    0,    0,    0, 1505, 1268,    0,    0,    0,
 1509,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  699,    0,    0,    0,    0,    0,    0,    0,    0,  813,
    0,    0, 1814,    0,    0,    0,    0,  -21, 1087,    0,
    0,    0, 1085,
  };
  protected static readonly short [] yyTable = {           113,
   48,  266,  252,  538,  353,  531,  382,  253,  160,   47,
  501,  487,  469,  200,  208,  514,  561,  858,  832, 1181,
  810, 1024,  827,  307,  161,  311,  756,  585,  194,  248,
  896,  823,  271,  597,    5,  484,  306, 1260, 1024, 1417,
   14,   73,  264,  608, 1063,  310, 1171,  898,  995, 1064,
  835, 1008,  326, 1172,  524,  203,   51, 1064, 1022,   49,
  300, 1012,   50,    7,  305,  264, 1161,  371,  286,  294,
  295,  806,   20,  375, 1171,  496,  287,  310,  197, 1184,
  332, 1172,  867,  868, 1015,  728, 1662,  208,  208,  270,
  927,  261, 1245, 1262, 1263, 1278,  272,  854,  824,  756,
  281,  282,  322,  325, 1009,  289,  290, 1541, 1171,  139,
  302,  303,  617, 1280,  514, 1172, 1011,  312,  729,   21,
  381,  315,  197,  317,  514,  158,    1,  948,  614,  887,
 1227, 1245,   16,  197,  781,  197,  805,  372,  373, 1112,
 1309,  252,  165, 1171,  113,   20,  360,  370,  825,  268,
 1172,  374,    2,  160, 1249,  856, 1126,  889, 1008, 1150,
  401, 1396, 1008, 1250, 1008,  730,  843, 1008, 1008,  161,
 1008, 1008,  250,  265,  353,  846,  265,  257,  912,  888,
  257,  166,  197,   46,  836,  928,  916,  929,  756, 1015,
  970,  971,   21,  704,  353,  167,  742, 1008,  499,  168,
  257, 1383,  366,  936,  268, 1156,  268,  327,  615,  327,
  208,  208,  257,  945,  402,  740,  854,  265,  169,   22,
  491,  780, 1143, 1011,  807,  489,  490, 1011,  501, 1011,
 1279,  213, 1011, 1011, 1663, 1011, 1011,  262,   15, 1418,
 1065,  585,  505,  513,  259,  899,  996,  259, 1065,  521,
  497,    2,  551,  268,  139,  532,  533,  988,  618,  756,
 1542, 1017, 1011, 1008,  170, 1260,  208,  259,  530,  541,
  158,  534,  536,  537,  544,  208,  951,  841, 1024,  259,
  842,  523,  805,  731,  805,  543,  208,  165,  854,  805,
  525,    5,   22,  375,  550, 1024,  208,  554,   73,  534,
  844,  716,  857,  214,  403,  404, 1151,  312, 1397,  555,
  592,  542,  742,   51,  527, 1022,   49, 1482, 1438,   50,
    7,  750,  783,  590, 1482, 1439,  166, 1090, 1011,  375,
  171,  214,  917,    3,    4,    5,    6,  366,  591,  361,
  167,  505,  513,  172,  168,  208,  405, 1384,  208,  366,
  770,  505,  513, 1023, 1438, 1025,  571,  781, 1028,  819,
  576, 1439,   73,  169,  375,   51,  621,  622,  623,  624,
  625,  626,  627,  628,  629,  630,  631,  632,  633,  634,
  923,  375,  801,  802,   51,  173,   73,   49,  174,  586,
   50,   74,  175, 1075,  890,  208,  208,  683,  739,  353,
 1624, 1564, 1454,  891,  909,  681,   73, 1062,  740,  170,
  642,  644,   51, 1083, 1356, 1085, 1086,  687,  788,  790,
 1457,   73,   20, 1362, 1363, 1364, 1365,  355,  375,  799,
  361,  809,  572, 1490,  250, 1509,  375, 1591,  801,  717,
  375,  813, 1020, 1614, 1125,   51,  208,  208,   49, 1076,
   50,   50,  244,  800,  245, 1077, 1101,  210,  784,   20,
  375,  690,  692,  812,  375,  703,  375,  714,  715,   21,
   97,  740,  746,  726, 1625,  171,  375, 1081,  740,  747,
  772,  710,   52,  250,  910,  792,  794,  854,  172,  834,
  265,  732,  743,  743, 1109,  840,  356,  891,  713,  779,
  250,  585,  250, 1144,  907,  684,   21,  801,  764,  764,
 1100,  755,   51,  250, 1106,  693,  208,  632, 1157, 1484,
  798, 1194,  809,  361, 1183, 1153,  361,  757,   20,  501,
  173,  759,  361,  174,  250,  813,  361,  175, 1128,  450,
  912, 1491,  111, 1510,  811, 1182,  813, 1198, 1595, 1189,
   73,   74,  746,  208,  789,  791,  804,  812,  963,  747,
  831,   74,  208,  357,  468,  800, 1251,  781,  805, 1162,
  349,  632,   74,  756,  801,   21,  250,  793, 1021,  208,
 1627,  838, 1628,  450,  755,  505,  360, 1485,  505,  693,
 1527, 1528,  747,  847,  847,  847,  427,  361, 1634,  876,
  757,  381,  257,  586,  349,  546,  450, 1313,  250,  351,
  478, 1393, 1315, 1316,  809,  479,  809, 1319, 1320,   19,
  586,  756, 1252,  756,  632,   74,  352,  469,  632,  795,
  632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
  632,  795, 1272, 1349,  468, 1228,  451, 1091, 1449,  632,
  452,  632,  453,  632,  351,  454,  455,  697,  456,  457,
  428, 1610,   73,  632,  632,  632,   19,  818,  748,  259,
  861,  352,   73,  755,   73,  861,  861,  685,  870, 1488,
   74,  632,  876,   73,   73,  349,  478, 1266,  351,  757,
  451,  479, 1052,  262,  452,   73,  453,   21, 1480,  454,
  455, 1639,  456,  457, 1002,  352,  820,  469, 1642, 1498,
 1499, 1500,  795,  451,  208,  859, 1648,  452,  337,  453,
   58, 1655,  454,  455,  505,  456,  457,  284, 1267,  632,
  772, 1006,  513, 1456,  935, 1038,   73,  756,  472,  602,
  350,  196, 1004,  216,  755,  566,  603, 1489,   73,  818,
  714,  458,  715,  339,  363,  586, 1237,  686, 1268,  818,
  757,  818, 1461,  380,  451,  605, 1238,  772,  452,  351,
  453,  691,  606,  454,  455, 1107,  456,  457,  351,  351,
 1239, 1240, 1241, 1113,   73, 1115,  352,  208,  820,  381,
  285,   73, 1030,  355,  946,  468,  947, 1242,  820,  355,
  820,  361,  934,   73,  952,  714,  998,  715,  567,  599,
  361, 1002,  691,  380,  361, 1002,  361, 1002,  208,   73,
 1002, 1002,  208, 1002, 1002,  361,  717,  191, 1116,  714,
 1440,  715,  545,  953,  717, 1115,  265, 1537, 1538,  961,
  257,  534,  691, 1243, 1548, 1441,  546, 1038, 1553, 1004,
  717,  191,  244, 1004,  247, 1004, 1047,  280, 1004, 1004,
  371, 1004, 1004,  586,  355,  851, 1440,  692,  191,  698,
  547,  474,  600,  257,  693,  358,  309,  772, 1116,  693,
  800, 1441,  257,  217,  358,  601,  985,  331,  732,  693,
  578,  334,  336,  338,  340,  342,  344,  346,  348,  991,
  579,  772, 1369,  693,  693,  693, 1442,  259,  692, 1230,
 1014,  580,    2,  998, 1048,  693, 1002,  998, 1138,  998,
  693,  501,  998,  998,  361,  998,  998,  361,  353, 1443,
  372,  373,  255,  361, 1395, 1048,  361,  361,  692, 1165,
  259, 1444, 1442,  359,  374,  693,  861,  361,  861,  259,
  361,  861,  359, 1339, 1004, 1445,  361, 1102,  262,  656,
  361, 1103,  724, 1037,  921, 1443,  693, 1165,  530,  656,
  381,  732,  718, 1104, 1051,  534, 1055, 1444, 1636, 1637,
  421,  256,  195,  257,  208,  258,  724, 1339, 1374, 1375,
 1082, 1445,  208,  422,   31, 1381,  718,   32,  361, 1050,
  208, 1165,   33,  724,  578, 1656,  861,   34,  861,  861,
 1390, 1087, 1096,  342,  579, 1071,  892,  707,  998,  265,
  892,  361,   36,  409,  410,  580,  378,  342,  351,  708,
  351,  265,  892,  203,  343,  265, 1165, 1414,  530,   38,
  411,  412,  883, 1123,   39,  833,  530,  839, 1246, 1148,
  259,  208, 1514,  260,  265,  208,  720,  884,  755,  381,
  418,  355,  721,  314,   41,   42,   73,   28,  417,  331,
  208, 1392,  208,  720,  757, 1037,  355,   43,   44,  721,
  474,   73,  420,   45,  474, 1124, 1163,  196, 1191,  331,
  419, 1164,  586,  475, 1195,  501,  203,  539,  257,  594,
  361,  362,  363,  364,  423,  365,  755,  539,  755,  197,
 1402,  861,  595,  203, 1163,   90,   90, 1160,  875, 1164,
  424,  208,  757,  530,  757,  741,  879,   90,  366,  367,
  368,  361,  361,  958,  361, 1232,  381,  742,  880,  959,
  861, 1087,  198,  361,   82,  742,  531,   91, 1163,  837,
  894,  742, 1277,  902,  894,  478, 1092,  531,  479,   91,
  845,  955,  203,  903, 1248,  259, 1093,   93,  369,  218,
  481,  955,  530,  474,  206,  598, 1303,   93,  896,  218,
  199,  877,  896, 1163,  206,  609,  488,  881, 1164,  636,
  638,  640, 1223,  250,  646,  646,  646,  646,  646,  646,
  646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
  646,  646,  646,  646,   11,  861, 1522,   31,   18,  301,
   32,  301,  755, 1131, 1132,   33,  301,  398,  399,  400,
   34,  413,  414,  415,  416,  861,  485,  809,  757,  809,
 1255, 1256,  406,  407,  408,   36, 1042,  772, 1042,  717,
 1358,  250,  772,  772, 1346, 1347, 1348,  772,  772, 1645,
 1646,  202,   38,  659,  661,  663,  665,   39,  486,  208,
  647,  649,  651, 1337,  653,  655,  657,   31, 1338,  822,
   32,  822,  244,  772, 1297,   33,  492,   41,   42,  500,
   34, 1310,  145, 1311,  145, 1312,  208,  740,  849,   35,
   43,   44,  740,  856,  269,   36,   45, 1337,  740,  746,
  318,  576, 1338, 1014,  288,  495,   37,  666,  667,  668,
  669,  306,   38,  306,  693,  693,  208,   39,  502,  156,
  208,  156,  316,   40,  321,  324,  328, 1334, 1335,  208,
  208,  208,  208,  313,  524,  313,  208,   41,   42,  163,
  503,  163, 1354, 1355,  849,  850,  522, 1419, 1437, 1419,
   43,   44, 1338,  284, 1338,  198,   45, 1014,  529,  539,
 1419,  203,  351,  530,  540, 1338,  559,  552,  208,  562,
  203,  203,  203,  203,  564,  569, 1277,  574,  604,  611,
  612,  208,  613,  619, 1437,  701,  293,  706,  712, 1419,
  727,  740,  746,  293, 1338, 1303, 1407,  750,  566, 1419,
  208,  786,  758,  760, 1338,  785,  787,  797,  812,  814,
 1014,  816,  830,  829, 1014, 1407, 1014, 1014, 1014, 1014,
 1014, 1014, 1014, 1014, 1014, 1014, 1515,  828,  863,  361,
  865,  869,  878,  882,  891, 1014,  892, 1014,  894, 1014,
  895,  918,  920,  919, 1619,  924,  925,  931,  926, 1014,
 1014, 1014,  941,   46,  956,  950,  965,  957,  967,  972,
 1629,  980,  974,  981,  986,  988,  984,  772,  772,  208,
  990,  997,  998,  208,  772, 1001, 1002, 1003,  772, 1016,
 1018, 1248, 1565, 1027, 1504, 1031,  208,  208, 1507,  208,
 1039,  507,  507, 1043, 1040, 1056,  208,  208, 1072, 1057,
 1061, 1517, 1518, 1060, 1597, 1599, 1111, 1074, 1078, 1079,
 1084, 1098, 1114,  781, 1120, 1014, 1121, 1130, 1134, 1127,
 1317, 1141, 1615, 1180, 1192, 1670, 1197, 1133,  328, 1200,
 1234,  530,   31,   46, 1257,   32, 1147,  203,  203, 1154,
   33, 1229, 1265, 1264, 1236,   34, 1269, 1270, 1606, 1273,
 1289, 1274, 1275,  563, 1615, 1615,  565, 1282,  381, 1284,
   36, 1281, 1283, 1291, 1301, 1299, 1307,  208,  208, 1651,
 1651, 1308, 1314, 1302,  381, 1318, 1325,   38, 1321,  629,
 1327, 1615,   39, 1328, 1329, 1330, 1664, 1664, 1332, 1336,
  507,  507, 1343, 1352, 1366, 1367, 1357, 1360, 1370, 1377,
  507,  507,   41,   42, 1379, 1385, 1382,  208,  203, 1613,
 1391, 1392, 1394, 1398,  208,   43,   44, 1399, 1413, 1400,
 1415,   45,  208, 1416, 1455,  318, 1450,  208, 1481, 1458,
 1460, 1462, 1486,  629, 1496, 1501, 1502, 1508, 1533,  381,
 1503, 1505, 1512, 1511, 1519, 1524, 1513, 1535,  203, 1530,
 1523, 1552, 1549,  250, 1546,  203, 1550, 1554, 1555, 1556,
 1560, 1574,  926,  203, 1557, 1570, 1575, 1582,  203, 1592,
 1577, 1603, 1607, 1583, 1584, 1587, 1620, 1626, 1593, 1623,
  198, 1604, 1608,  689,  691,  361,  629,  695, 1621, 1630,
  629,  361,  629,  629,  629,  629,  629,  629,  629,  629,
  629,  629,  629, 1631, 1633, 1638,  705, 1625, 1624, 1643,
 1647,  629, 1654,  629, 1659,  629,  711, 1669,  293,    9,
  740, 1038,  924,  528,  925,  629,  629,  629,  658,   49,
   45, 1030,  887,  732,  659,   46,   38,  361,  888,  361,
  198,  211,  202,  629,   39,  361,  384,  932,  812,  241,
  824,  385,  386,  814,  199,  848,  761,  629,  825,  855,
  815,  334,  352,  131,  338,  720,  361,  720,  153,  140,
  629,  693,  387,  388,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  693,  309,  166,  249,  159,  803,  141,
  310,  629,  361,  167,  160,  470,  361,   57,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 1473, 1474,  361,   28, 1254,  826,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361, 1235,  361, 1224,  979,
 1136,  361,  361,  361,  507,  361,  361,  507,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361, 1032,  361,  361,  842, 1137,
 1649,  361, 1622,  361, 1594, 1632, 1609,  361, 1581,  999,
  361, 1495, 1666, 1000, 1459, 1494, 1668,  361, 1600, 1598,
  922, 1605, 1653, 1380, 1304, 1493,  975,  206,  556,  610,
  853,  745,  930,  908,  671,  675,  855,  905,  926,  926,
  673,  864,  679,  866,  677,  680,  926,  817,  955,  926,
  926,  926,  874,  926,  926, 1387,  926,  926,  926,  926,
 1451,  926,  926,  926,  425, 1073, 1097, 1117,  962,  926,
 1119,  769,  796, 1010,  926,  699,  873,  926,  926,  700,
 1294, 1199,  926,  926,  926,  426,  976,  926,  926,  977,
    0,    0,    0,  507,    0,  926,    0,    0,    0,  926,
  926,  507,    0,  926,  926,    0,    0,  355,    0,    0,
    0,    0,    0,    0,  915,    0,    0,    0,  926,    0,
  926,  926,  926,    0,    0,    0,    0,  926,  926,  926,
  926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
  926,  926,    0,    0,    0,    0,  926,    0,    0,  926,
  926,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  926,  926,    0,    0,    0,  926,
  926,  926,    0,  926,    0,    0,    0,    0,  954,    0,
    0,    0,    0,    0,    0,    0,  926,  926,  926,  926,
  926,    0,    0,    0,  926, 1463,    0,    0,    0, 1237,
    0,    0,    0,    0,  926,  926,    0,    0,    0, 1238,
 1464, 1465,    0,  390,    0,    0, 1466,    0,    0,    0,
    0,    0,    0, 1239, 1240, 1241,    0,    0, 1468,    0,
    0,  926, 1469,    0,    0,  926,  926,    0,    0,  926,
 1242,    0,  926,  926,  926, 1470,    0,    0,    0,    0,
  926,    0, 1471,    0,  842,  842,    0,    0,    0,    0,
    0,    0,  842,    0,    0,  842,  842,  842,    0,  842,
  842,    0,  842,  842,  842,  842,    0,  842,  842,  842,
 1472,    0,    0,    0,    0, 1007, 1243,    0,    0,    0,
  842,    0, 1013,  842,  842,    0,    0,    0,  842,  842,
  842,    0,    0,  842,  842,    0,    0,    0,    0,    0,
    0,  842,    0,    0,    0,  842,  842,    0,    0,  842,
  842,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  507,    0,  842,    0,  842,  842,  842,    0,
    0,    0,    0,  842,  842,  842,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,    0,    0,
    0,    0,  842,  355,    0,  842,  842,    0,    0,  355,
    0,    0,  514,    0,    0,    0,    0,    0,    0,    0,
  842,  842,    0,    0,    0,  842,  842,  842,    0,  842,
    0,    0,    0,    0, 1095,    0,    0,    0,    0,    0,
    0,    0,  842,  842,  842,  842,  842,    0,    0,    0,
  842,    0,    0,    0,    0,  355,    0,  355,    0,    0,
  842,  842,    0,  355,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  507,    0,    0,  842,    0,    0,
    0,  842,  842,    0,    0,  842,    0,    0,  842,  842,
  842,    0,    0,    0,    0,    0,  842,    0,    0,  390,
  355,    0,    0,    0,  355,  390,  355,  355,  355,  355,
  355,  355,  355,  355,  355,  355,  355,    0,    0,    0,
  355,    0,    0,    0,  355,  355,  355,  355,  355,  355,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  355,
  355,  355,    0,  355,  355,    0,  355,  355,  355,  355,
  355,  390,    0,  390,    0,    0,  355,  355,    0,  390,
    0,  355,  355,  355,  355,  355,  355,  355,  355,  355,
  355,  355,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  355,  355,   32,    0,    0,  355,
    0,  355,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  355,  390,    0,    0,    0,
  390,    0,  390,  390,  390,  390,  390,  390,  390,  390,
  390,  390,  390,    0,    0,    0,  390,    0,    0,    0,
  390,  390,    0,  390,  390,  390,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,  390,  390,    0,  390,
  390, 1293,  390,  390,  390,  390,  390,    0,  514,    0,
    0,    0,  390,  390,  514,    0,    0,  390,  390,  390,
  390,  390,  390,  390,  390,  390,  390,  390,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,  390,    0,   43,    0,  390,    0,  390,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  514,  390,  514,   31,    0,    0,   32,    0,  514,    0,
    0,   33,    0,    0,    0,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,  514,    0,    0,    0,  514,
    0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
  514,  514,    0,   41,   42,  514,    0,    0,    0,  514,
  514,    0,  514,  514,  514,    0,   43,   44,    0,   52,
    0,    0,   45,    0,  514,  514,  514,    0,  514,  514,
    0,  514,  514,  514,  514,  514,    0,    0,    0,    0,
    0,  514,  514,    0,    0,    0,  514,  514,  514,  514,
  514,  514,  514,  514,  514,  514,  514,    0,    0,    0,
    0,    0,   32,   32,    0,    0,    0,   32,    0,  514,
  514,    0,    0,    0,  514,    0,  514,    0,    0,   32,
   32,  198,    0,    0,   32,    0,    0,    0,    0,    0,
  514,   32,    0,    0,   32,   32,   32,    0,    0,   32,
    0,   32,    0,    0,    0,    0,    0,    0,   32,   32,
   32,    0,    0,   32,    0,   32,    0,   32,    0,  293,
   32,   32,    0,    0,    0,   32,   32,   32,    0,    0,
   32,    0,   32,    0,   32,    0,   32,   32,   32,   32,
   32,    0,    0,    0,    0,    0,    0,    0,   32,    0,
   32,    0,   51,    0,    0,    0,    0,    0,    0,    0,
    0,   32,   32,    0,    0,   32,   32,    0,   32,   43,
   43,   32,    0,    0,   43,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,   43,   32,    0,
    0,   43,    0,    0,   32,   32,    0,    0,   43,    0,
    0,   43,   43,   43,    0,    0,   43,    0,   43,    0,
  529,    0,    0,    0,    0,   43,   43,   43,    0,    0,
   43,    0,   43,    0,   43,    0,    0,   43,   43,    0,
    0,    0,   43,   43,   43,    0,    0,   43,    0,   43,
    0,    0,    0,   43,   43,   43,   43,   43,    0,    0,
    0,    0,    0,    0,    0,   43,    0,   43,   74,    0,
    0,   32,   32,    0,    0,    0,    0,    0,   43,   43,
    0,    0,   43,   43,   32,   43,   52,    0,   43,    0,
   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   52,    0,    0,   43,    0,   52,    0,    0,
    0,   43,   43,    0,   52,    0,    0,   52,    0,    0,
    0,    0,   52,    0,    0,    0,    0,    0,    0,    0,
    0,   52,   52,   52,    0,    0,    0,    0,   52,    0,
    0,    0,    0,   52,   52,    0,    0,    0,   52,   52,
   52,    0,    0,    0,    0,   52,    0,   52,    0,   52,
    0,   52,   52,   52,    0,    0,    0,    0,    0,    0,
    0,   52,    0,   52,    0,    0,    0,    0,   43,   43,
    0,    0,   53,    0,   52,   52,    0,    0,    0,   52,
    0,   52,    0,    0,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   52,    0,    0,    0,    0,    0,   52,   52,   51,
    0,    0,    0,   51,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   51,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,    0,   51,    0,    0,
   51,    0,    0,    0,    0,   51,    0,    0,    0,    0,
    0,    0,    0,    0,   51,   51,   51,    0,    0,    0,
   54,   51,    0,    0,    0,    0,   51,   51,    0,    0,
    0,   51,   51,   51,   52,   52,    0,    0,   51,    0,
    0,    0,   51,    0,   51,   51,   51,    0,    0,    0,
    0,    0,    0,    0,   51,    0,   51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   51,   51,    0,
    0,    0,   51,    0,   51,   74,    0,   51,    0,   74,
    0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,   74,    0,   51,    0,   74,    0,    0,    0,
    0,   51,    0,   74,    0,    0,   74,   74,   74,    0,
    0,   74,    0,   74,    0,    0,    0,    0,    0,    0,
   74,   74,   74,    0,    0,   74,    0,    0,   74,   74,
    0,    0,   74,   74,    0,    0,    0,   74,   74,   74,
    0,    0,   74,   74,   74,    0,   74,    0,   74,   74,
   74,   74,   74,    0,    0,   74,   31,    0,    0,   32,
   74, 1404,   74,    0,   33,    0,    0,   51,   51,   34,
    0,    0,    0,   74,    0,    0,    0,   74,   74,    0,
   74,    0,    0,   74,   36,    0,    0,    0,    0,   53,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
   74,   38,   74,   74,    0,   73,   39,    0,    0, 1405,
   73,    0,    0,    0,    0,    0,    0,   73,    0,    0,
   73,    0,    0,    0,    0,   73,   41,   42,    0,    0,
    0,    0, 1406,    0,   73,   73,   73,    0,    0,   43,
   44,    0,    0,    0,    0,   45,   73,   73,    0,  318,
    0,   73,   73,   73,    0,    0,    0,    0,   73,    0,
    0,    0,   73,    0,   73,   73,   73,    0,    0,    0,
    0,    0,   74,   74,   73,    0,   73,   54,    0,    0,
    0,   73,    0,    0,    0,    0,    0,   73,    0,    0,
    0,    0,   73,   73,   73,    0,    0,   73,   73,  218,
    0,    0,    0,    0,  198,   73,    0,    0,   73,    0,
    0,    0,    0,   73,   73,    0,    0,    0,    0,    0,
   53,    0,   73,   73,   73,    0,    0,    0,    0,    0,
  361,    0,    0,    0,   73,   73,  361,    0,    0,   73,
   73,   73,  293,    0,    0,    0,   73,    0,    0,    0,
   73,    0,   73,   73,   73,  219,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
   73,    0,   73,    0,  361,   73,    0,   73,    0,    0,
  361,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,   54,    0,
    0,    0,  220,  221,  222,  223,    0,  224,  225,  226,
  227,    0,    0,  228,  229,  230,  231,    0,    0,  232,
  233,  234,  235,  236,  237,  238,  239,  361,  240,    0,
    0,  361,    0,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  241,    0,  361,    0,    0,
    0,    0,  361,  361,  361,  361,  361,  361,  361,  361,
  361,    0,  361,  361,    0,   73,  361,  361,  361,  361,
  361,  361,    0,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
    0,  361,  361,    0,    0,    0,    0,  361,  361,    0,
    0,    0,  361,  361,    0,  361,    0,    0,    0,    0,
    0,    0,  361,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  361,    0,    0,    0,  361,    0,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,    0,    0,    0,
    0,    0,    0,    0,    0,  361,    0,  361,  361,  361,
  361,  361,  361,  361,    0,  361,  510,    0,    0,  361,
  361,  361,  510,  361,  361,    0,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,    0,  361,  361,    0,    0,    0,    0,
  510,    0,    0,    0,    0,  361,  510,    0,  361,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  510,    0,    0,    0,  510,    0,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
    0,    0,    0,    0,    0,    0,    0,    0,  510,    0,
  510,  510,  510,    0,  510,  510,  510,    0,  510,    0,
    0,    0,  510,  510,  510,    0,  510,  510,    0,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
  510,  510,  510,  510,  510,  510,    0,  510,  510,    0,
    0,   59,    0,    0,    0,    0,    0,    0,  510,   60,
    0,  510,   61,   31,    0,    0,   32,   62,  510,   63,
   64,   33,   65,    0,   66,   67,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   68,    0,    0,
   69,   36,    0,    0,    0,   70,   71,   72,    0,    0,
   73,   74,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,   75,   39,    0,    0,   76,   77,    0,  554,
    0,    0,    0,    0,    0,  554,    0,    0,    0,    0,
    0,   78,    0,   41,   42,   79,    0,    0,    0,    0,
   80,   81,   82,   83,   84,   85,   43,   44,   86,   87,
   88,   89,   45,   90,   91,    0,    0,    0,    0,   92,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  554,    0,    0,    0,   95,   96,  554,
    0,    0,    0,  361,   97,    0,   98,    0,    0,  361,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  105,  106,    0,
    0,    0,    0,    0,    0,    0,  554,    0,    0,    0,
  554,    0,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  361,  107,    0,    0,    0,  108,  109,
    0,  554,  110,  554,    0,  554,  111,  112,    0,    0,
    0,    0,    0,  213,    0,  554,  554,  554,    0,  554,
  554,    0,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,    0,    0,    0,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
  554,  554,  554,  554,  554,  554,  554,  554,  554,    0,
  554,  554,    0,    0,    0,    0,    0,  361,  361,  361,
  361,  361,  361,  361,    0,  361,  578,    0,    0,  361,
  800,  554,  578,  361,  361,    0,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,    0,  361,  361,    0,    0,    0,    0,
  578,    0,    0,    0,    0,  361,  578,    0,  361,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  585,
    0,    0,    0,    0,    0,  585,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  578,    0,    0,    0,  578,    0,  578,
  578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
    0,    0,    0,    0,    0,    0,    0,    0,  578,    0,
  578,    0,  578,  585,    0,    0,    0,    0,    0,  585,
    0,    0,  578,  578,  578,    0,  578,  578,    0,    0,
  578,  578,  578,  578,    0,    0,  578,  578,  578,  578,
  578,    0,    0,    0,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  586,  585,  578,  578,    0,
  585,  586,  585,  585,  585,  585,  585,  585,  585,  585,
  585,  585,  585,    0,    0,    0,    0,    0,  578,    0,
    0,  585,    0,  585,    0,  585,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  585,  585,  585,    0,  585,
  585,    0,    0,  585,  585,  585,  585,    0,    0,  586,
    0,    0,  585,  585,    0,  586,    0,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,  585,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  587,    0,
  585,  585,    0,    0,  587,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  585,  586,    0,    0,    0,  586,    0,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,  586,
    0,  586,  587,    0,    0,    0,    0,    0,  587,    0,
    0,  586,  586,  586,    0,  586,  586,    0,    0,  586,
  586,  586,  586,    0,    0,    0,    0,    0,  586,  586,
    0,    0,    0,  586,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  588,  587,  586,  586,    0,  587,
  588,  587,  587,  587,  587,  587,  587,  587,  587,  587,
  587,  587,    0,    0,    0,    0,    0,  586,    0,    0,
  587,    0,  587,    0,  587,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  587,  587,  587,    0,  587,  587,
    0,    0,  587,  587,  587,  587,    0,    0,  588,    0,
    0,  587,  587,    0,  588,    0,  587,  587,  587,  587,
  587,  587,  587,  587,  587,  587,  587,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  596,    0,  587,
  587,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  587,  588,    0,    0,    0,  588,    0,  588,  588,  588,
  588,  588,  588,  588,  588,  588,  588,  588,    0,    0,
    0,    0,    0,    0,    0,    0,  588,    0,  588,    0,
  588,  596,    0,    0,    0,    0,    0,    0,    0,    0,
  588,  588,  588,    0,  588,  588,    0,    0,  588,  588,
  588,  588,    0,    0,    0,    0,  597,  588,  588,    0,
    0,    0,  588,  588,  588,  588,  588,  588,  588,  588,
  588,  588,  588,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  596,  588,  588,    0,  596,    0,
  596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
  596,    0,    0,    0,    0,    0,  588,    0,    0,  596,
  597,  596,    0,  596,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  596,  596,  596,    0,    0,    0,    0,
    0,  596,  596,  596,  596,    0,    0,  598,    0,    0,
  596,  596,    0,    0,    0,  596,  596,  596,  596,  596,
  596,  596,  596,  596,  596,  596,    0,    0,    0,    0,
    0,    0,    0,  597,    0,    0,    0,  597,  596,  597,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
    0,    0,    0,    0,    0,    0,    0,    0,  597,  596,
  597,  598,  597,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  597,  597,  597,    0,    0,    0,    0,    0,
  597,  597,  597,  597,    0,    0,  599,    0,    0,  597,
  597,    0,    0,    0,  597,  597,  597,  597,  597,  597,
  597,  597,  597,  597,  597,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  598,    0,    0,  597,  598,    0,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
  598,    0,    0,    0,    0,    0,    0,    0,  597,  598,
  599,  598,    0,  598,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  598,  598,  598,    0,    0,    0,    0,
    0,  598,  598,  598,  598,    0,    0,  603,    0,    0,
  598,  598,    0,    0,    0,  598,  598,  598,  598,  598,
  598,  598,  598,  598,  598,  598,    0,    0,    0,    0,
    0,    0,    0,  599,    0,    0,    0,  599,  598,  599,
  599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
    0,    0,    0,    0,    0,    0,    0,    0,  599,  598,
  599,  603,  599,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  599,  599,  599,    0,    0,    0,    0,    0,
  599,  599,  599,  599,    0,    0,  604,    0,    0,  599,
  599,    0,    0,    0,  599,  599,  599,  599,  599,  599,
  599,  599,  599,  599,  599,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  603,    0,    0,  599,  603,    0,
  603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
  603,    0,    0,    0,    0,    0,    0,    0,  599,  603,
  604,  603,    0,  603,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  603,  603,  603,    0,    0,    0,    0,
    0,  603,  603,  603,  603,    0,    0,  605,    0,    0,
  603,  603,    0,    0,    0,    0,    0,    0,  603,  603,
  603,  603,  603,  603,  603,  603,    0,    0,    0,    0,
    0,    0,    0,  604,    0,    0,    0,  604,  603,  604,
  604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
    0,    0,    0,    0,    0,    0,    0,    0,  604,  603,
  604,  605,  604,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  604,  604,  604,    0,    0,    0,    0,    0,
  604,  604,  604,  604,    0,    0,  606,    0,    0,  604,
  604,    0,    0,    0,    0,    0,    0,  604,  604,  604,
  604,  604,  604,  604,  604,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  605,    0,    0,  604,  605,    0,
  605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
  605,    0,    0,    0,    0,    0,    0,    0,  604,  605,
  606,  605,    0,  605,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  605,  605,  605,    0,    0,    0,    0,
    0,  605,  605,  605,  605,    0,    0,  607,    0,    0,
  605,  605,    0,    0,    0,    0,    0,    0,  605,  605,
  605,  605,  605,  605,  605,  605,    0,    0,    0,    0,
    0,    0,    0,  606,    0,    0,    0,  606,  605,  606,
  606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
    0,    0,    0,    0,    0,    0,    0,    0,  606,  605,
  606,  607,  606,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  606,  606,  606,    0,    0,    0,    0,    0,
  606,  606,  606,  606,    0,    0,  612,    0,    0,  606,
  606,    0,    0,    0,    0,    0,    0,  606,  606,  606,
  606,  606,  606,  606,  606,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  607,    0,    0,  606,  607,    0,
  607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
  607,    0,    0,    0,    0,    0,    0,    0,  606,  607,
  612,  607,    0,  607,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  607,  607,  607,    0,    0,    0,    0,
    0,  607,  607,  607,  607,    0,    0,  613,    0,    0,
  607,  607,    0,    0,    0,    0,    0,    0,  607,  607,
  607,  607,  607,  607,  607,  607,    0,    0,    0,    0,
    0,    0,    0,  612,    0,    0,    0,  612,  607,  612,
  612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
    0,    0,    0,    0,    0,    0,    0,    0,  612,  607,
  612,  613,  612,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  612,  612,  612,    0,    0,    0,    0,    0,
    0,    0,  612,  612,    0,    0,  615,    0,    0,  612,
  612,    0,    0,    0,    0,    0,    0,    0,    0,  612,
  612,  612,  612,  612,  612,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  613,    0,    0,  612,  613,    0,
  613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
  613,    0,    0,    0,    0,    0,    0,    0,  612,  613,
  615,  613,    0,  613,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  613,  613,  613,    0,    0,    0,    0,
    0,    0,    0,  613,  613,    0,    0,  614,    0,    0,
  613,  613,    0,    0,    0,    0,    0,    0,    0,    0,
  613,  613,  613,  613,  613,  613,    0,    0,    0,    0,
    0,    0,    0,  615,    0,    0,    0,  615,  613,  615,
  615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
    0,    0,    0,    0,    0,    0,    0,    0,  615,  613,
  615,  614,  615,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  615,  615,  615,    0,    0,    0,    0,    0,
    0,    0,  615,  615,    0,    0,  616,    0,    0,  615,
  615,    0,    0,    0,    0,    0,    0,    0,    0,  615,
  615,  615,  615,  615,  615,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  614,    0,    0,  615,  614,    0,
  614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
  614,    0,    0,    0,    0,    0,    0,    0,  615,  614,
  616,  614,    0,  614,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  614,  614,  614,    0,    0,    0,    0,
    0,    0,    0,  614,  614,    0,    0,  617,    0,    0,
  614,  614,    0,    0,    0,    0,    0,    0,    0,    0,
  614,  614,  614,  614,  614,  614,    0,    0,    0,    0,
    0,    0,    0,  616,    0,    0,    0,  616,  614,  616,
  616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
    0,    0,    0,    0,    0,    0,    0,    0,  616,  614,
  616,  617,  616,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  616,  616,  616,    0,    0,    0,    0,    0,
    0,    0,  616,  616,    0,    0,  618,    0,    0,  616,
  616,    0,    0,    0,    0,    0,    0,    0,    0,  616,
  616,  616,  616,  616,  616,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  617,    0,    0,  616,  617,    0,
  617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
  617,    0,    0,    0,    0,    0,    0,    0,  616,  617,
  618,  617,    0,  617,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  617,  617,  617,    0,    0,    0,    0,
    0,    0,    0,  617,  617,    0,    0,  620,    0,    0,
  617,  617,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  617,  617,    0,    0,    0,    0,
    0,    0,    0,  618,    0,    0,    0,  618,  617,  618,
  618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
    0,    0,    0,    0,    0,    0,    0,    0,  618,  617,
  618,  620,  618,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  618,  618,  618,    0,    0,    0,    0,    0,
    0,    0,  618,  618,    0,    0,  621,    0,    0,  618,
  618,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  618,  618,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  620,    0,    0,  618,  620,    0,
  620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
  620,    0,    0,    0,    0,    0,    0,    0,  618,  620,
  621,  620,    0,  620,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  620,  620,  620,    0,    0,    0,    0,
    0,    0,    0,    0,  620,    0,    0,  623,    0,    0,
  620,  620,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  620,  620,    0,    0,    0,    0,
    0,    0,    0,  621,    0,    0,    0,  621,  620,  621,
  621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
    0,  575,    0,    0,    0,    0,    0,    0,  621,  620,
  621,  623,  621,   31,    0,    0,   32,    0,    0,    0,
    0,   33,  621,  621,  621,    0,   34,    0,    0,    0,
    0,    0,    0,  621,    0,    0,  624,    0,    0,  621,
  621,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  621,  621,    0,    0,    0,   38,    0,
    0,    0,    0,   39,  623,    0,    0,  621,  623,    0,
  623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
  623,    0,    0,   41,   42,    0,    0,    0,  621,  623,
  624,  623,    0,  623,    0,    0,   43,   44,    0,    0,
    0,    0,   45,  623,  623,  623,  318,    0,    0,    0,
    0,    0,    0,    0,  623,    0,    0,  626,    0,    0,
    0,  623,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  623,  623,    0,    0,    0,    0,
    0,    0,    0,  624,    0,    0,    0,  624,  623,  624,
  624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
    0,  198,    0,    0,    0,    0,    0,    0,  624,  623,
  624,  626,  624,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  624,  624,  624,    0,    0,    0,    0,    0,
    0,    0,    0,  624,    0,    0,  627,    0,    0,  293,
  624,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  624,  624,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  626,    0,    0,  624,  626,    0,
  626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
  626,    0,    0,    0,    0,    0,    0,    0,  624,  626,
  627,  626,    0,  626,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  626,  626,  626,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  630,    0,    0,
    0,  626,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  626,  626,    0,    0,    0,    0,
    0,    0,    0,  627,    0,    0,    0,  627,  626,  627,
  627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
    0,  641,    0,    0,    0,    0,    0,    0,  627,  626,
  627,  630,  627,   31,    0,    0,   32,    0,    0,    0,
    0,   33,  627,  627,  627,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  634,    0,    0,    0,
  627,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  627,  627,    0,    0,    0,   38,    0,
    0,    0,    0,   39,  630,    0,    0,  627,  630,    0,
  630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
  630,    0,    0,   41,   42,    0,    0,    0,  627,  630,
  634,  630,    0,  630,    0,    0,   43,   44,    0,    0,
    0,    0,   45,  630,  630,  630,  318,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  630,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  630,    0,    0,    0,    0,
    0,    0,    0,  634,    0,    0,    0,  634,  630,  634,
  634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
    0,  198,    0,    0,    0,    0,    0,    0,  634,  630,
  634,    0,  634,    0,    0,    0,    0,  751,    0,    0,
    0,    0,  634,  634,  634,   60,    0,    0,   61,   31,
 1064,    0,   32,   62,    0,   63,   64,   33,   65,  293,
   66,   67,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   68,    0,    0,   69,   36,    0,    0,
    0,   70,   71,   72,    0,    0,   73,   74,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,   75,   39,
    0,    0,   76,   77,    0,    0,    0,    0,  634,    0,
    0,    0,    0,    0,    0,    0,    0,   78,    0,   41,
   42,   79,    0,    0,    0,    0,   80,   81,   82,   83,
   84,   85,   43,   44,   86,   87,   88,   89,   45,   90,
   91,    0,    0,    0,    0,   92,    0,    0,   93,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,   96,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   99,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
 1019,    0,    0,  105,  106,    0,    0,    0, 1019,    0,
    0, 1019, 1019,    0,    0, 1019, 1019,    0, 1019, 1019,
 1019, 1019,    0, 1019, 1019, 1019,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  109, 1019,    0,  110, 1019,
 1019, 1065,  111,  112, 1019, 1019, 1019,    0,    0, 1019,
 1019,    0,    0,    0,    0,    0,    0, 1019,    0,    0,
    0, 1019, 1019,    0,    0, 1019, 1019,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1019,    0, 1019, 1019, 1019,    0,    0,    0,    0, 1019,
 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
 1019, 1019, 1019, 1019,    0,    0,    0,    0, 1019,    0,
    0, 1019, 1019,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1019, 1019,    0,    0,
    0, 1019,    0, 1019,    0, 1019,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1019, 1019,
 1019, 1019, 1019,    0,    0,    0, 1019,    0,    0,    0,
    0,    0,    0,   59,    0,    0, 1019, 1019,    0,    0,
    0,   60,    0,    0,   61,   31,    0,    0,   32,   62,
    0,   63,   64,   33,   65,    0,   66,   67,   34,    0,
    0,    0,    0, 1019,    0,    0,    0, 1019, 1019,   68,
    0, 1019,   69,   36,    0, 1019, 1019,   70,   71,   72,
    0,    0,   73,   74,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,   75,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,    0,   41,   42,   79,    0,    0,
    0,    0,   80,   81,   82,   83,   84,   85,   43,   44,
   86,   87,   88,   89,   45,   90,   91,    0,    0,    0,
    0,   92,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
   96,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   99,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  429,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,   61,   31,    0,
    0,   32,   62,    0,   63,   64,   33,   65,    0,   66,
   67,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  109,   68,    0,  110,   69,   36,    0,  111,  112,
   70,   71,   72,    0,    0,   73,   74,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,   75,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   78,    0,   41,   42,
   79,    0,    0,    0,    0,   80,   81,   82,   83,   84,
   85,   43,   44,   86,   87,   88,   89,   45,   90,   91,
    0,    0,    0,    0,   92,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   95,   96,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   99,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  751,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
   61,   31,    0,    0,   32,   62,    0,   63,   64,   33,
   65,    0,   66,   67,   34,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  109,   68,    0,  110,   69,   36,
    0,  111,  112,   70,   71,   72,    0,    0,   73,   74,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
   75,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   78,
    0,   41,   42,   79,    0,    0,    0,    0,   80,   81,
   82,   83,   84,   85,   43,   44,   86,   87,   88,   89,
   45,   90,   91,  361,    0,    0,    0,   92,  800,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,   95,   96,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,   99,  100,  101,
  102,  103,    0,    0,   73,  104,    0,  361,    0,    0,
    0,    0,    0,    0,    0,  105,  106,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,  800,    0,    0,
    0,   73,   73,    0,    0,    0,    0,   73,    0,    0,
    0,   73,  107,   73,   73,   73,  108,  109,   73,    0,
  110,    0,    0,   73,  111,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
    0,   73,    0,   73,    0,    0,    0,    0,    0,  361,
    0,    0,  361,    0,  361,  361,  361,  361,    0,  361,
    0,    0,    0,   73,  800,  361,    0,  361,  361,    0,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,    0,  361,  361,
    0,    0,  906,    0,    0,    0,    0,    0,    0,  361,
   60,    0,  361,    0,   31,    0,    0,   32,  274,  361,
    0,    0,   33,   65,    0,   66,   73,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   31,   68,    0,
   32,    0,   36,    0,    0,   33,    0,    0,  275,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,   36,    0,   76,   77,    0,
    0,  510,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  511,   38,    0,   41,   42,   79,   39,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,   41,   42,    0,
    0,    0,    0,   93,   94,    0,    0,    0,    0,    0,
   43,   44,    0,    0,    0,    0,   45,    0,  297,   96,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
  291,    0,    0,    0,    0,  762,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,  292,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  504,   68,    0,  110,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,  293,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,  763,    0,
    0,    0,    0,    0,    0,    0,   93,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  297,  298,    0,    0,    0,  693,  693,   97,    0,
   98,  693,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  693,  693,  693,  100,  101,  102,  103,  693,    0,
    0,  104,    0,    0,    0,  693,  693,  693,  296,    0,
  693,  105,  106,    0,  693,    0,   60,  693,    0,    0,
   31,    0,  693,   32,  274,    0,    0,  693,   33,   65,
    0,   66,    0,   34,  693,    0,    0,    0,  107,    0,
    0,    0,  108,  299,   68,    0,  110,  693,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,  693,    0,    0,   38,    0,    0,  693,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
   94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  297,  298,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  304,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  299,   68,    0,  110,
    0,   36,    0,  111,  112,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  297,  298,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  380,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  299,
   68,    0,  110,    0,   36,    0,  111,  112,    0,    0,
  275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   93,   94,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  297,  298,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  596,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,    0,    0,    0,    0,  107,    0,    0,
    0,  108,  299,   68,    0,  110,    0,   36,    0,  111,
  112,    0,    0,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,   39,
    0,    0,   76,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   93,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  297,   96,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  607,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  504,   68,    0,  110,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  297,   96,    0,    0,
    0,    0,    0,   97,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  860,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,  107,    0,    0,    0,  108,  504,   68,
    0,  110,    0,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
  298,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  960,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  299,   68,    0,  110,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   93,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  297,  298,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  329,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,  643,  107,
    0,    0,    0,  108,  299,   68,    0,  110,    0,   36,
   31,  111,  112,   32,    0,  275,    0,    0,   33,    0,
    0,    0,    0,   34,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,   36,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,   38,    0,    0,    0,   81,
   39,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,  330,
   41,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,   44,  277,  278,    0,    0,   45,
    0,    0,   97,  318,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  273,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,  198,    0,
    0,  932,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,   31,  111,  112,   32,    0,  275,    0,
    0,   33,    0,    0,    0,    0,   34,    0,    0,   38,
    0,    0,    0,    0,   39,    0,  293,   76,   77,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,   38,    0,
    0,    0,   81,   39,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,   44,  277,  278,
    0,    0,   45,    0,    0,   97,  318,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  308,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,  198,    0,    0, 1108,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,   31,  111,  112,   32,
    0,  275,    0,    0,   33,    0,    0,    0,    0,   34,
    0,    0,   38,    0,    0,    0,    0,   39,    0,  933,
   76,   77,    0,    0,   36,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,   38,    0,    0,    0,   81,   39,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
   44,  277,  278,    0,    0,   45,    0,    0,   97,  581,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  333,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,  198,    0,    0, 1296,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,   31,
  111,  112,   32,    0,  275,    0,    0,   33,    0,    0,
    0,    0,   34,    0,    0,   38,    0,    0,    0,    0,
   39,    0,  293,   76,   77,    0,    0,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,   38,    0,    0,    0,   81,   39,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,   44,  277,  278,    0,    0,   45,    0,
    0,   97,  318,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  335,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,  198,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,  211,  111,  112,  211,    0,  275,    0,    0,
  211,    0,    0,    0,    0,  211,    0,    0,   38,    0,
    0,    0,    0,   39,    0,  293,   76,   77,    0,    0,
  211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,  211,    0,    0,
    0,   81,  211,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211,  211,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  211,  211,  277,  278,    0,
    0,  211,    0,    0,   97,  211,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  337,    0, 1041,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
  211,    0,    0,    0,  107,    0,    0,    0,  108,  279,
   68,    0,    0,    0,   36,   31,  111,  112,   32,    0,
  275,    0,    0,   33,    0,    0,    0,    0,   34,    0,
    0,   38,    0,    0,    0,    0,   39,    0,  211,   76,
   77,    0,    0,   36,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
   38,    0,    0,    0,   81,   39,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,   44,
  277,  278,    0,    0,   45,    0,    0,   97,  581,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  339,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,  198,    0,    0,    0,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,   31,  111,
  112,   32,    0,  275,    0,    0,   33,    0,    0,    0,
    0,   34,    0,    0,   38,    0,    0,    0,    0,   39,
    0,  293,   76,   77,    0,    0,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,   38,    0,    0,    0,   81,   39,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   43,   44,  277,  278,    0,    0,   45,    0,    0,
   97,  196,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  341,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,  198,    0,    0,    0,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,   31,  111,  112,   32,    0,  275,    0,    0,   33,
    0,    0,    0,    0,   34,    0,    0,   38,    0,    0,
    0,    0,   39,    0,  293,   76,   77,    0,    0,   36,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,   38,    0,    0,    0,
   81,   39,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   44,  277,  278,    0,    0,
   45,    0,    0,   97, 1520,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  343,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,  198,
    0,    0,    0,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,   31,  111,  112,   32,    0,  275,
    0,    0,   33,    0,    0,    0,    0,   34,    0,    0,
   38,    0,    0,    0,    0,   39,    0,  293,   76,   77,
    0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,   38,
    0,    0,    0,   81,   39,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,   44,  277,
  278,    0,    0,   45,    0,    0,   97, 1611,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  345,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,  198,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,  212,  111,  112,
  212,    0,  275,    0,    0,  212,    0,    0,    0,    0,
  212,    0,    0,   38,    0,    0,    0,    0,   39,    0,
  293,   76,   77,    0,    0,  212,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,  212,    0,    0,    0,   81,  212,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  212,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  212,  212,  277,  278,    0,    0,  212,    0,    0,   97,
  212,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  347,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,  212,    0,    0,    0,  107,
    0,    0,    0,  108,  279,   68,    0,    0,    0,   36,
  211,  111,  112,  211,    0,  275,    0,    0,  211,    0,
    0,    0,    0,  211,    0,    0,   38,    0,    0,    0,
    0,   39,    0,  212,   76,   77,    0,    0,  211,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,  211,    0,    0,    0,   81,
  211,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  211,  211,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  211,  211,  277,  278,    0,    0,  211,
    0,    0,   97,  211,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  329,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,  211,    0,
    0,    0,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,    0,  111,  112,    0,    0,  275,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,    0,  211,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  278,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  635,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  278,    0,    0,    0,    0,    0,   97,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  637,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,  278,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  639,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,    0,  111,  112,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,  278,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  645,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  279,
   68,    0,    0,    0,   36,    0,  111,  112,    0,    0,
  275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  277,  278,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  648,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,    0,    0,    0,    0,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,    0,  111,
  112,    0,    0,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,   39,
    0,    0,   76,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  278,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  650,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  277,  278,    0,    0,
    0,    0,    0,   97,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  652,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  278,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  654,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  277,  278,    0,    0,    0,    0,    0,   97,
    0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,  656,
    0,    0,  105,  106,    0,    0,    0,   60,    0,    0,
    0,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  279,   68,    0,    0,    0,   36,
    0,  111,  112,    0,    0,  275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  277,  278,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,  658,    0,    0,  105,  106,    0,    0,    0,
   60,    0,    0,    0,   31,    0,    0,   32,  274,    0,
    0,    0,   33,   65,    0,   66,    0,   34,    0,    0,
    0,    0,  107,    0,    0,    0,  108,  279,   68,    0,
    0,    0,   36,    0,  111,  112,    0,    0,  275,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,   39,    0,    0,   76,   77,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   79,    0,    0,    0,
    0,    0,   81,    0,   83,    0,   85,   43,   44,  276,
   87,    0,    0,   45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  278,
    0,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  100,  101,  102,  103,    0,    0,    0,  104,    0,
    0,    0,    0,    0,    0,  660,    0,    0,  105,  106,
    0,    0,    0,   60,    0,    0,    0,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,  107,    0,    0,    0,  108,
  279,   68,    0,    0,    0,   36,    0,  111,  112,    0,
    0,  275,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  278,    0,    0,    0,    0,    0,   97,    0,
   98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  100,  101,  102,  103,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,  662,    0,
    0,  105,  106,    0,    0,    0,   60,    0,    0,    0,
   31,    0,    0,   32,  274,    0,    0,    0,   33,   65,
    0,   66,    0,   34,    0,    0,    0,    0,  107,    0,
    0,    0,  108,  279,   68,    0,    0,    0,   36,    0,
  111,  112,    0,    0,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
   39,    0,    0,   76,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,   42,   79,    0,    0,    0,    0,    0,   81,    0,
   83,    0,   85,   43,   44,  276,   87,    0,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,  278,    0,    0,    0,    0,
    0,   97,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  100,  101,  102,
  103,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,  664,    0,    0,  105,  106,    0,    0,    0,   60,
    0,    0,    0,   31,    0,    0,   32,  274,    0,    0,
    0,   33,   65,    0,   66,    0,   34,    0,    0,    0,
    0,  107,    0,    0,    0,  108,  279,   68,    0,    0,
    0,   36,    0,  111,  112,    0,    0,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  277,  278,    0,
    0,    0,    0,    0,   97,    0,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  101,  102,  103,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  670,    0,    0,  105,  106,    0,
    0,    0,   60,    0,    0,    0,   31,    0,    0,   32,
  274,    0,    0,    0,   33,   65,    0,   66,    0,   34,
    0,    0,    0,    0,  107,    0,    0,    0,  108,  279,
   68,    0,    0,    0,   36,    0,  111,  112,    0,    0,
  275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,    0,   39,    0,    0,   76,
   77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   42,   79,    0,
    0,    0,    0,    0,   81,    0,   83,    0,   85,   43,
   44,  276,   87,    0,    0,   45,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  277,  278,    0,    0,    0,    0,    0,   97,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  100,  101,  102,  103,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,  672,    0,    0,
  105,  106,    0,    0,    0,   60,    0,    0,    0,   31,
    0,    0,   32,  274,    0,    0,    0,   33,   65,    0,
   66,    0,   34,    0,    0,    0,    0,  107,    0,    0,
    0,  108,  279,   68,    0,    0,    0,   36,    0,  111,
  112,    0,    0,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,    0,   39,
    0,    0,   76,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  278,    0,    0,    0,    0,    0,
   97,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  101,  102,  103,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
  674,    0,    0,  105,  106,    0,    0,    0,   60,    0,
    0,    0,   31,    0,    0,   32,  274,    0,    0,    0,
   33,   65,    0,   66,    0,   34,    0,    0,    0,    0,
  107,    0,    0,    0,  108,  279,   68,    0,    0,    0,
   36,    0,  111,  112,    0,    0,  275,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,    0,   39,    0,    0,   76,   77,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   79,    0,    0,    0,    0,    0,
   81,    0,   83,    0,   85,   43,   44,  276,   87,    0,
    0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  277,  278,    0,    0,
    0,    0,    0,   97,    0,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
  101,  102,  103,    0,    0,    0,  104,    0,    0,    0,
    0,    0,    0,  676,    0,    0,  105,  106,    0,    0,
    0,   60,    0,    0,    0,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,  107,    0,    0,    0,  108,  279,   68,
    0,    0,    0,   36,    0,  111,  112,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  278,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  678,    0,    0,  105,
  106,    0,    0,    0,   60,    0,    0,    0,   31,    0,
    0,   32,  274,    0,    0,    0,   33,   65,    0,   66,
    0,   34,    0,    0,    0,    0,  107,    0,    0,    0,
  108,  279,   68,    0,    0,    0,   36,    0,  111,  112,
    0,    0,  275,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,    0,    0,   39,    0,
    0,   76,   77,    0,    0,    0,    0,    0,    0,    0,
  411,    0,    0,    0,    0,    0,  411,    0,   41,   42,
   79,    0,    0,    0,    0,    0,   81,    0,   83,    0,
   85,   43,   44,  276,   87,    0,    0,   45,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  277,  278,    0,    0,    0,    0,    0,   97,
  411,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  100,  101,  102,  103,    0,
    0,    0,  104,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  105,  106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
    0,    0,    0,  108,  279,    0,    0,  355,    0,    0,
    0,  111,  112,  355,    0,  411,  411,  411,  411,  411,
  411,    0,  411,    0,    0,    0,    0,    0,    0,    0,
  411,  411,    0,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
  127,  411,  411,    0,    0,  127,    0,  361,  355,    0,
    0,    0,  411,    0,    0,  411,    0,  127,  127,    0,
    0,    0,  127,    0,    0,    0,    0,    0,    0,  127,
    0,    0,  127,  127,  127,    0,    0,  127,    0,  127,
    0,    0,    0,    0,    0,    0,  127,  127,  127,    0,
    0,  127,    0,  127,    0,  127,    0,    0,  127,  127,
    0,  361,    0,  127,  127,  127,    0,    0,  127,    0,
  127,    0,    0,    0,  127,  127,  127,  127,  127,    0,
    0,    0,    0,    0,    0,    0,  127,    0,  127,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
  127,    0,    0,  127,  127,    0,  127,    0,    0,  127,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  127,    0,    0,    0,
    0,  129,    0,  127,    0,    0,  361,  361,  361,  361,
  361,  361,    0,  361,    0,    0,    0,  361,  800,    0,
    0,  361,  361,    0,    0,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,    0,  361,  361,    0,    0,    0,   60,    0,  127,
  127,   31,    0,  361,   32,  274,  361,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,    0,    0,    0,   36,
    0,    0,    0,    0,    0,  275,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,  510,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  511,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  297,   96,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  512,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,    0,   60,    0,  105,  106,   31,    0,    0,
   32,  274,    0,    0,    0,   33,   65,    0,   66,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   68,  107,    0,    0,   36,  108,  504,    0,    0,
  110,  275,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,   39,    0,    0,
   76,   77,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,   42,   79,
    0,    0,    0,    0,    0,   81,    0,   83,    0,   85,
   43,   44,  276,   87,    0,    0,   45,    0,    0,    0,
  553,    0,    0,    0,    0,    0,   93,   94,    0,  694,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  694,
  694,  297,  298,    0,  694,    0,    0,    0,   97,    0,
   98,    0,    0,    0,  694,  694,  694,    0,    0,    0,
    0,  694,    0,    0,  100,  101,  102,  103,  694,  694,
  694,  104,    0,  694,    0,  694,    0,  694,    0,   60,
  694,  105,  106,   31,    0,  694,   32,  274,    0,    0,
  694,   33,   65,    0,   66,    0,   34,  694,    0,    0,
    0,    0,    0,  694,    0,    0,    0,   68,  107,    0,
  694,   36,  108,  299,    0,    0,  110,  275,    0,    0,
  111,  112,  694,    0,    0,  694,    0,    0,   38,    0,
    0,  694,    0,   39,    0,    0,   76,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  694,  694,    0,   41,   42,   79,    0,    0,    0,    0,
    0,   81,    0,   83,    0,   85,   43,   44,  276,   87,
    0,    0,   45,    0,  763,    0,    0,    0,    0,    0,
    0,    0,   93,   94,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  693,  693,  297,  298,    0,
  693,    0,    0,    0,   97,    0,   98,    0,    0,    0,
  693,  693,  693,    0,    0,    0,    0,  693,    0,    0,
  100,  101,  102,  103,  693,  693,  693,  104,    0,  693,
    0,  693,    0,  693,    0,   60,  693,  105,  106,   31,
    0,  693,   32,  274,    0,    0,  693,   33,   65,    0,
   66,    0,   34,  693,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   68,  107,    0,  693,   36,  108,  299,
    0,    0,  110,  275,    0,    0,  111,  112,  693,    0,
    0,  693,    0,    0,   38,    0,    0,  693,    0,   39,
    0,    0,   76,   77,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   41,
   42,   79,    0,    0,    0,    0,    0,   81,    0,   83,
    0,   85,   43,   44,  276,   87,    0,    0,   45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   93,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1463,  297,  298,    0, 1237,    0,    0,    0,
   97,    0,   98,    0,    0,    0, 1238, 1464, 1465,    0,
    0,    0,    0, 1466,    0,    0,  100,  101,  102,  103,
 1467, 1240, 1241,  104,    0, 1468,    0,   20,    0, 1469,
    0,   60,    0,  105,  106,   31,    0, 1242,   32,  274,
    0,    0, 1470,   33,   65,    0,   66,    0,   34, 1471,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
  107,    0,    0,   36,  108,  299,    0,    0,  110,  275,
    0,    0,  111,  112,   21,    0,    0, 1472,    0,    0,
   38,    0,    0, 1243,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,    0,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   93,   94,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  297,
   96,    0,    0,    0,    0,    0,   97,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  101,  102,  103,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,    0,   60,    0,  105,
  106,   31,    0,    0,   32,  274,    0,    0,    0,   33,
   65,    0,   66,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   68,  107,    0,    0,   36,
  108,  504,    0,    0,  110,  275,    0,    0,  111,  112,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
    0,   39,    0,    0,   76,   77,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   42,   79,    0,    0,    0,    0,    0,   81,
    0,   83,    0,   85,   43,   44,  276,   87,    0,    0,
   45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   93,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  297,   96,    0,    0,    0,
    0,    0,   97,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  101,
  102,  103,    0,    0,    0,  104,    0,    0,    0,    0,
    0,    0,    0,  660,    0,  105,  106,  660,    0,    0,
  660,  660,    0,    0,    0,  660,  660,    0,  660,    0,
  660,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  660,  107,    0,    0,  660,  108, 1033,    0,    0,
  110,  660,    0,    0,  111,  112,    0,    0,    0,    0,
    0,    0,  660,    0,    0,    0,    0,  660,    0,    0,
  660,  660,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  660,  660,  660,
    0,    0,    0,    0,    0,  660,    0,  660,    0,  660,
  660,  660,  660,  660,    0,    0,  660,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  660,  660,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  660,  660,    0,    0,    0,    0,    0,  660,    0,
  660,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  660,  660,  660,  660,    0,    0,
    0,  660,    0,    0,    0,    0,    0,    0,    0,  103,
    0,  660,  660,  103,    0,    0,  103,  103,    0,    0,
    0,  103,  103,    0,  103,    0,  103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  103,  660,    0,
    0,  103,  660,  660,    0,    0,  660,  103,    0,    0,
  660,  660,    0,    0,    0,    0,    0,    0,  103,    0,
    0,    0,    0,  103,    0,    0,  103,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  103,  103,  103,    0,    0,    0,    0,
    0,  103,    0,  103,    0,  103,  103,  103,  103,  103,
    0,    0,  103,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,  103,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  103,  103,    0,
    0,    0,    0,    0,  103,    0,  103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  103,  103,  103,  103,    0,    0,    0,  103,    0,    0,
    0,    0,    0,    0,    0,  171,    0,  103,  103,  171,
    0,    0,  171,  171,    0,    0,    0,  171,  171,    0,
  171,    0,  171,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  171,  103,    0,    0,  171,  103,  103,
    0,    0,  103,  171,    0,    0,  103,  103,    0,    0,
    0,    0,    0,    0,  171,    0,    0,    0,    0,  171,
    0,    0,  171,  171,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  171,
  171,  171,    0,    0,    0,    0,    0,  171,    0,  171,
    0,  171,  171,  171,  171,  171,    0,    0,  171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  171,  171,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  171,  171,    0,    0,    0,    0,    0,
  171,    0,  171,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  171,  171,  171,  171,
    0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
    0,   60,    0,  171,  171,   31,    0,    0,   32,  274,
    0,    0,    0,   33,   65,    0,   66,    0,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
  171,    0,    0,   36,  171,  171,    0,    0,  171,  275,
    0,    0,  171,  171,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,    0,   39,    0,    0,   76,   77,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   79,    0,    0,
    0,   51,    0,   81,    0,   83,    0,   85,   43,   44,
  276,   87,    0,   51,   45,    0,    0,    0,   51,    0,
    0,    0,    0,    0,    0,   51,    0,    0,   51,    0,
    0,    0,    0,   51,    0,    0,    0,    0,    0,  277,
  278,    0,   51,   51,   51,    0,   97,    0,   98,   51,
    0,    0,    0,    0,   51,   51,    0,    0,    0,   51,
   51,   51,  100,  101,  102,  103,   51,    0,    0,  104,
   51,    0,   51,   51,   51,    0,    0,    0,    0,  105,
  106,    0,   51,    0,   51,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   51,   51,    0,    0,    0,
   51,    0,   51,   74,    0,   51,  107,    0,    0,    0,
  108,  279,    0,    0,    0,   74,   74,    0,  111,  112,
   74,    0,   51,    0,    0,    0,    0,   74,   51,   51,
   74,   74,   74,    0,    0,   74,    0,   74,    0,    0,
    0,    0,    0,    0,   74,   74,   74,    0,    0,   74,
    0,   74,    0,   74,    0,    0,   74,   74,    0,    0,
    0,   74,   74,   74,    0,    0,   74,    0,   74,    0,
    0,    0,   74,   74,   74,   74,   74,    0,    0,    0,
    0,    0,    0,    0,   74,    0,   74,    0,    0,    0,
    0,    0,    0,    0,    0,   51,   51,   74,   74,    0,
    0,   74,   74,    0,   74,   73,    0,   74,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,   73,    0,
    0,    0,   73,    0,   74,    0,    0,    0,    0,   73,
    0,    0,   73,   73,   73,    0,    0,   73,    0,   73,
    0,    0,    0,    0,    0,    0,   73,   73,   73,    0,
    0,   73,    0,   73,    0,   73,    0,    0,   73,   73,
    0,    0,    0,   73,   73,   73,    0,    0,   73,    0,
   73,    0,    0,    0,   73,   73,   73,   73,   73,    0,
    0,    0,    0,    0,    0,    0,   73,    0,   73,    0,
    0,    0,    0,    0,    0,    0,   74,   74,    0,   73,
   73,    0,    0,   73,   73,    0,   73,   73,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
   73,    0,    0,    0,   73,    0,   73,    0,    0,    0,
    0,   73,  106,    0,   73,   73,   73,    0,    0,   73,
    0,   73,    0,    0,    0,    0,    0,    0,   73,   73,
   73,    0,    0,   73,    0,   73,    0,   73,    0,    0,
   73,   73,    0,    0,    0,   73,   73,   73,    0,    0,
   73,    0,   73,    0,    0,    0,   73,   73,   73,   73,
   73,    0,    0,    0,    0,    0,    0,    0,   73,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,   73,   73,    0,    0,   73,   73,    0,   73,   73,
    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,   73,    0,    0,    0,   73,    0,   73,    0,
    0,    0,    0,   73,  107,    0,   73,   73,   73,    0,
    0,   73,    0,   73,    0,    0,    0,    0,    0,    0,
   73,   73,   73,    0,    0,   73,    0,   73,    0,   73,
    0,    0,   73,   73,    0,    0,    0,   73,   73,   73,
    0,    0,   73,    0,   73,    0,    0,    0,   73,   73,
   73,   73,   73,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,   73,   73,    0,    0,   73,   73,    0,
   73,   73,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,   73,    0,    0,    0,   73,    0,
   73,    0,    0,    0,    0,   73,    0,    0,   73,   73,
   73,    0,    0,   73,    0,   73,    0,    0,    0,    0,
    0,    0,   73,   73,   73,    0,    0,   73,    0,    0,
    0,   73,    0,    0,   73,   73,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,   73,    0,    0,    0,
   73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   73,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,   73,    0,    0,    0,   73,
   73,    0,   73,   73,    0,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,   73,    0,    0,    0,
   73,    0,   73,    0,    0,    0,    0,   73,  248,    0,
   73,   73,   73,    0,    0,   73,    0,   73,    0,    0,
    0,    0,    0,    0,   73,   73,   73,    0,    0,   73,
    0,    0,    0,   73,    0,    0,   73,   73,    0,    0,
    0,   73,   73,   73,    0,    0,   73,    0,   73,    0,
    0,    0,   73,   73,   73,   73,   73,    0,    0,   63,
    0,    0,    0,    0,   73,    0,   73,    0,    0,    0,
    0,   63,    0,    0,    0,   73,   63,   73,    0,    0,
    0,   73,   73,   63,   73,    0,   63,   73,    0,    0,
    0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
   63,   63,   63,    0,   73,    0,    0,   63,    0,    0,
  249,    0,   63,   63,    0,    0,    0,   63,   63,   63,
    0,    0,    0,    0,   63,    0,    0,    0,   63,    0,
   63,   63,   63,    0,    0,    0,    0,    0,    0,    0,
   63,    0,   63,    0,    0,    0,    0,   73,    0,    0,
    0,    0,    0,   63,   63,    0,    0,    0,   63,   73,
   63,    0,    0,   63,   73,    0,    0,    0,    0,    0,
    0,   73,    0,    0,   73,    0,    0,   73,    0,   73,
   63,    0,    0,    0,    0,   65,    0,   63,   73,   73,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,   73,    0,    0,    0,   73,   73,   73,    0,    0,
    0,    0,   73,    0,    0,    0,   73,    0,   73,   73,
   73,    0,    0,   74,    0,    0,    0,    0,   73,    0,
   73,    0,    0,    0,    0,   74,    0,    0,    0,    0,
   74,   73,    0,    0,    0,    0,   73,   74,   73,    0,
   74,   73,    0,   63,    0,   74,    0,    0,    0,    0,
    0,    0,    0,    0,   74,   74,   74,    0,   73,    0,
    0,    0,    0,    0,   53,    0,   74,   74,    0,    0,
    0,   74,   74,   74,    0,    0,    0,    0,   74,    0,
    0,    0,   74,    0,   74,   74,   74,    0,    0,    0,
    0,    0,    0,    0,   74,    0,   74,    0,   73,    0,
    0,    0,    0,    0,    0,    0,    0,   74,    0,    0,
   73,    0,   74,    0,   74,   73,    0,   74,    0,    0,
    0,    0,   73,    0,    0,   73,    0,    0,    0,    0,
   73,   73,    0,    0,   74,    0,    0,    0,    0,   73,
   73,   73,    0,    0,   73,    0,    0,    0,    0,    0,
    0,   73,   73,    0,    0,    0,   73,   73,   73,    0,
    0,    0,    0,   73,    0,    0,    0,   73,   73,   73,
   73,   73,    0,    0,    0,    0,   73,    0,    0,   73,
    0,   73,   73,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,    0,    0,    0,   73,   73,   73,
    0,    0,   73,   73,   73,    0,   73,   74,    0,   73,
    0,    0,    0,   73,   73,   73,   73,   73,    0,   73,
    0,    0,    0,    0,    0,   73,   43,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,   73,    0,
    0,   73,   73,   73,    0,   73,    0,   73,    0,    0,
   43,   73,    0,   73,   73,   73,    0,    0,   43,    0,
    0,    0,    0,   73,   43,   73,   43,   73,   73,    0,
    0,  229,    0,    0,    0,    0,   73,    0,    0,    0,
   43,   73,    0,   73,    0,   43,   43,    0,   43,    0,
    0,   43,   73,    0,    0,   43,   43,   43,   43,   43,
    0,    0,   43,   73,    0,   73,   73,   43, 1203,  231,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
   43,    0,    0,   43,   43,   43,    0,   43,    0,   43,
    0,    0, 1204,   43,    0,   43,   43,   43,   73,    0,
 1205,    0,    0,    0,    0,   43,   73,   43,    0,    0,
    0,    0,    0,   43,   43,    0,    0,    0,   43,    0,
    0,    0, 1206,   43,    0,   43,    0, 1207, 1208,    0,
   73,    0,    0, 1209,    0,    0,   73, 1210,   73, 1211,
 1212, 1213,    0,    0,   73,   43,   73,    0,    0, 1214,
    0,   43,   43,    0,    0,    0,    0,    0,    0,    0,
   73,    0, 1215,    0,    0,   73,   73, 1216,   73, 1217,
    0,   73,    0,    0,    0,   73,   73,   73,   73,   73,
   43,    0,   73,    0,    0,    0,    0,   73,    0, 1218,
    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
   73,    0,    0,   73,   73,   73,    0,   73,    0,   73,
   73,    0, 1487,   73,    0,   73,   73,   73,   43,    0,
    0,    0,    0,    0,    0,   73,    0,   73,    0,    0,
    0,    0,    0,  320,   73,    0,    0,    0,   73,    0,
    0,    0,   73,   73,    0,   73,    0,    0, 1203,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1257, 1219,    0,   73,   73,    0,    0,    0,   73,
   73,  321, 1204,    0,    0,   73,    0,    0,    0,   73,
 1205,   73,   73,   73,    0,    0, 1203,    0,    0,    0,
    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0, 1206,    0,   73,    0,    0, 1207, 1208,   73,
 1204,   73,    0, 1209,    0,    0,    0, 1210, 1205, 1211,
 1212, 1213,    0,    0,    0,    0,    0,    0,    0, 1214,
    0,   73,    0,   73,   73,    0,    0,    0,   73,    0,
 1206,    0, 1215,    0,    0, 1207, 1208, 1216,    0, 1217,
    0, 1209,    0,    0,    0, 1210,    0, 1211, 1212, 1213,
   31,    0,    0,   32,    0,    0,    0, 1214,   33, 1218,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
 1215,    0,    0,    0,    0, 1216,    0, 1217,   36,    0,
   31,    0,    0,   32,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   34,   73,   38,  211, 1218,    0,  211,
   39,    0,    0,    0,  211,    0,    0,  578,   36,  211,
    0,    0,    0,    0,    0,    0,    0,  579,    0,    0,
   41,   42,    0,    0,  211,   38,    0,    0,  580,    0,
   39, 1257, 1219,   43,   44,    0,    0,    0,    0,   45,
    0,  211,    0,  581,    0,    0,  211,    0,    0,    0,
   41,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,   44,  582,  211,  211,    0,   45,
 1219,    0,    0,  318,    0,    0,    0,    0,    0,  211,
  211,    0,    0,    0,    0,  211,    0,    0,    0,  211,
    0,    0,    0,    0,    0,  197,    0,    0,  198,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1041,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  198,    0,
    0,    0,    0,    0,    0,    0,  583,    0,    0,    0,
    0,    0,    0,    0,  211,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  319,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  211,
  };
  protected static readonly short [] yyCheck = {            17,
    6,   62,   55,  292,  109,  286,  138,   55,   17,    6,
  253,  211,  193,   20,   20,  261,  317,  682,  593, 1141,
  561,    0,  585,   84,   17,   86,  520,  354,   18,   51,
  735,  573,   64,  359,    0,  208,   82, 1239,    0,  256,
  256,    0,  256,  369,  256,  256, 1139,  256,  256,  269,
  256,  256,  302, 1139,  302,   20,    0,  269,    0,    0,
   78,  938,    0,    0,   82,  256, 1138,  383,  269,   76,
   76,  256,  309,    0, 1167,  346,  277,  256,  383, 1145,
   98, 1167,  693,  694,  943,  256,  256,   93,   94,  256,
  778,   60, 1221, 1240, 1241,  256,   65,  269,  402,  593,
   69,   70,   93,   94,  256,   74,   75,  256, 1201,   17,
   79,   80,  256, 1260,  360, 1201,  256,   86,  289,  356,
  138,   90,  383,   92,  370,   17,  256,  815,  388,  402,
  388, 1260,  257,  383,  392,  383,  256,  453,  454, 1061,
 1287,  194,   17, 1236,  162,  309,  115,  116,  452,  454,
 1236,  467,  381,  162, 1226,  256, 1078,  720,  363,  256,
  262,  256,  367, 1229,  369,  336,  256,  372,  373,  162,
  375,  376,  389,  387,  279,  256,  387,  391,  753,  452,
  391,   17,  383,  454,  390,  782,  256,  784,  682, 1048,
  377,  378,  356,  454,  299,   17,  402,  402,  251,   17,
  391,  256,  256,  800,  454, 1127,  454,  457,  468,  457,
  216,  217,  391,  810,  316,  387,  388,  387,   17,  456,
  242,  256, 1099,  363,  409,  216,  217,  367,  471,  369,
  391,  468,  372,  373,  404,  375,  376,  404,  454,  456,
  460,  568,  260,  261,  458,  454,  454,  458,  460,  267,
  247,  381,  313,  454,  162,  287,  288,  409,  402,  753,
  409,  949,  402,  468,   17, 1467,  272,  458,  286,  301,
  162,  289,  290,  291,  306,  281,  818,  603,  257,  458,
  606,  272,  402,  454,  404,  303,  292,  162,  460,  409,
  281,  257,  456,  256,  312,  257,  302,  315,  257,  317,
  390,  256,  403,   28,  406,  407,  403,  276,  403,  315,
  356,  302,  402,  257,  283,  257,  257, 1464, 1411,  257,
  257,  402,  256,  355, 1471, 1411,  162, 1032,  468,  256,
   17,   56,  402,  463,  464,  465,  466,  391,  356,  393,
  162,  359,  360,   17,  162,  351,  448,  402,  354,  403,
  256,  369,  370,  964, 1447,  966,  392,  392,  969,  256,
  351, 1447,  328,  162,  291,  309,  384,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
  256,  308,  555,  556,  328,   17,  328,  328,   17,  354,
  328,  328,   17, 1012,  721,  401,  402,  256,  503,  504,
  263,  256, 1419,  310,  388,  423,  310, 1004,  387,  162,
  401,  402,  356, 1024, 1336, 1026, 1027,  449,  256,  256,
 1437,  325,  309, 1345, 1346, 1347, 1348,  267,  391,  256,
  393,  256,  468,  346,  389,  346,  363, 1559,  267,  492,
  403,  310,  256,  256, 1077,  389,  452,  453,  389,  403,
  388,  389,  391,  310,  393,  409, 1053,  319,  392,  309,
  387,  452,  453,  310,  391,  472,  393,  489,  490,  356,
  389,  387,  388,  495,  337,  162,  403, 1019,  387,  388,
  528,  483,  257,  389,  468,  546,  547,  619,  162,  594,
  387,  498,  510,  511, 1057,  600,  336,  404,  488,  531,
  389,  828,  389, 1100,  750,  364,  356,  336,  526,  527,
 1051,  520,  456,  389, 1055,  263,  522,  256, 1129,  256,
  552, 1154,  310,  380, 1143, 1122,  383,  520,  309,  772,
  162,  522,  389,  162,  389,  404,  393,  162, 1080,  256,
 1115,  454,  461,  454,  562, 1142,  564, 1158, 1565, 1146,
  454,  325,  468,  559,  392,  392,  558,  404,  859,  468,
  592,  335,  568,  403,  388,  392, 1231,  392,  559,  456,
  366,  310,  346, 1067,  403,  356,  389,  546,  392,  585,
 1597,  599, 1599,  256,  593,  603,  555,  324,  606,  337,
 1512, 1513,  392,  611,  612,  613,  404,  454, 1615,  704,
  593,  619,  391,  568,  366,  270,  256, 1295,  389,  450,
  392, 1379, 1300, 1301,  402,  392,  404, 1305, 1306,  309,
  585, 1115, 1233, 1117,  363,  399,  467,  388,  367,  294,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  383, 1253, 1331,  468, 1186,  363,  409, 1412,  388,
  367,  390,  369,  392,  450,  372,  373,  256,  375,  376,
  468, 1583,  325,  402,  403,  404,  356,  310,  468,  458,
  688,  467,  335,  682,  325,  693,  694,  388,  696,  256,
  454,  420,  787,  346,  335,  366,  468,  273,  450,  682,
  363,  468,  993,  404,  367,  346,  369,  387, 1462,  372,
  373, 1623,  375,  376,  256,  467,  310,  468, 1630, 1477,
 1478, 1479,  454,  363,  720,  684, 1638,  367,  388,  369,
  454, 1643,  372,  373,  742,  375,  376,  391,  314,  468,
  778,  403,  750, 1423,  795,  981,  399, 1231,  409,  454,
  421,  392,  256,  324,  753,  391,  461,  324,  399,  392,
  308,  468,  308,  388,  393,  720,  278,  468,  344,  402,
  753,  404, 1452,  402,  363,  454,  288,  815,  367,  450,
  369,  273,  461,  372,  373, 1056,  375,  376,  450,  450,
  302,  303,  304, 1064,  454, 1067,  467,  793,  392,  807,
  454,  454,  973,  383,  812,  468,  814,  319,  402,  389,
  404,  380,  793,  454,  822,  363,  256,  363,  454,  391,
  389,  363,  314,  452,  393,  367,  395,  369,  824,  454,
  372,  373,  828,  375,  376,  404,  363,  363, 1067,  387,
 1411,  387,  256,  824,  887, 1117,  387, 1525, 1526,  857,
  391,  859,  344,  365, 1532, 1411,  270, 1093, 1536,  363,
  387,  387,  391,  367,  393,  369,  988,   66,  372,  373,
  383,  375,  376,  828,  454,  388, 1447,  273,  404,  468,
  294,  380,  454,  391,  273,  393,   85,  925, 1117,  278,
  459, 1447,  391,  324,  393,  467,  904,   96,  895,  288,
  325,  100,  101,  102,  103,  104,  105,  106,  107,  917,
  335,  949, 1352,  302,  303,  304, 1411,  458,  314, 1190,
  942,  346,  381,  363,  989,  314,  468,  367,  387,  369,
  319, 1164,  372,  373,  380,  375,  376,  383, 1033, 1411,
  453,  454,  404,  389, 1384, 1010,  392,  393,  344, 1139,
  458, 1411, 1447,  461,  467,  344,  964,  380,  966,  458,
  383,  969,  461, 1326,  468, 1411,  389,  388,  404,  392,
  393,  392,  363,  981,  399, 1447,  365, 1167,  986,  402,
  988,  978,  363,  404,  992,  993,  994, 1447, 1617, 1618,
  434,  389,  256,  391,  990,  393,  387, 1360, 1354, 1355,
 1022, 1447,  998,  447,  268, 1361,  387,  271,  454,  990,
 1006, 1201,  276,  404,  325, 1644, 1024,  281, 1026, 1027,
 1376, 1029, 1044,  388,  335, 1006,  388,  390,  468,  387,
  392,  454,  296,  410,  411,  346,  390,  402,  450,  402,
  450,  387,  404,  998,  409,  387, 1236, 1403, 1056,  313,
  427,  428,  310, 1075,  318,  467, 1064,  467,  404, 1110,
  458, 1057,  404,  461,  387, 1061,  387,  325, 1067, 1077,
  419,  389,  387,  319,  338,  339,  310,  395,  412,  278,
 1076,  404, 1078,  404, 1067, 1093,  404,  351,  352,  404,
  380,  325,  433,  357,  380, 1076, 1139,  361, 1149,  298,
  413, 1139, 1057,  393, 1155, 1338, 1061,  393,  391,  454,
  393,  394,  395,  396,  420,  398, 1115,  393, 1117,  383,
 1391, 1129,  467, 1078, 1167,  390,  391, 1135,  404, 1167,
  387, 1127, 1115, 1141, 1117,  390,  390,  402,  421,  422,
  423,  390,  391,  390,  393, 1196, 1154,  402,  402,  390,
 1158, 1159,  416,  402,  403,  402,  393,  390, 1201,  598,
  388,  402, 1257,  325,  392,  404,  392,  404,  459,  402,
  609,  392, 1127,  335, 1225,  458,  402,  392,  461,  392,
  389,  402, 1190,  380,  392,  360, 1281,  402,  388,  402,
  454,  705,  392, 1236,  402,  370,  387,  711, 1236,  398,
  399,  400,  388,  389,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,  421,  422,    0, 1233, 1505,  268,    4,  402,
  271,  404, 1231,  377,  378,  276,  409,  416,  417,  418,
  281,  429,  430,  431,  432, 1253,  393,  402, 1231,  404,
 1237, 1238,  424,  425,  426,  296,  390, 1295,  392, 1302,
  388,  389, 1300, 1301, 1328, 1329, 1330, 1305, 1306,  384,
  385,   20,  313,  409,  410,  411,  412,  318,  454, 1275,
  403,  404,  405, 1326,  406,  407,  408,  268, 1326,  402,
  271,  404,  391, 1331, 1275,  276,  450,  338,  339,  328,
  281, 1288,  402, 1290,  404, 1292, 1302,  387,  388,  290,
  351,  352,  387,  388,   63,  296,  357, 1360,  387,  388,
  361, 1302, 1360,  256,   73,  454,  307,  413,  414,  415,
  416,  402,  313,  404,  384,  385, 1332,  318,  256,  402,
 1336,  404,   91,  324,   93,   94,   95, 1323, 1324, 1345,
 1346, 1347, 1348,  402,  302,  404, 1352,  338,  339,  402,
  454,  404, 1334, 1335,  612,  613,  403, 1410, 1411, 1412,
  351,  352, 1410,  391, 1412,  416,  357,  310,  391,  393,
 1423, 1336,  450, 1391,  256, 1423,  403,  454, 1384,  310,
 1345, 1346, 1347, 1348,  310,  366, 1491,  454,  454,  409,
  403, 1397,  403,  402, 1447,  379,  454,  395,  404, 1452,
  389,  403,  256,  454, 1452, 1510, 1397,  402,  391, 1462,
 1416,  411,  392,  392, 1462,  392,  454,  392,  310,  310,
  363,  391,  256,  392,  367, 1416,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378, 1497,  402,  310,    0,
  310,  409,  404,  388,  392,  388,  402,  390,  403,  392,
  402,  310,  310,  404, 1586,  392,  402,  387,  402,  402,
  403,  404,  402,  454,  366,  392,  310,  392,  310,  402,
 1602,  390,  454,  391,  409,  409,  393, 1525, 1526, 1485,
  403,  454,  403, 1489, 1532,  256,  392,  287, 1536,  392,
  366, 1552, 1545,  374, 1485,  390, 1502, 1503, 1489, 1505,
  387,  260,  261,  402,  454,  409, 1512, 1513,  392,  403,
  403, 1502, 1503,  402, 1567, 1568,  256,  392,  403,  392,
  370,  392,  388,  392,  392,  468,  256,  370,  390,  403,
  256,  409, 1585,  388,  387, 1667,  371,  402,  297,  388,
  371, 1559,  268,  454,  454,  271,  409, 1512, 1513,  409,
  276,  402,  302,  454,  387,  281,  388,  379, 1576,  388,
  256,  391,  403,  322, 1617, 1618,  325,  391, 1586,  409,
  296,  454,  391,  256,  391,  393,  453, 1583, 1584, 1640,
 1641,  404,  387,  450, 1602,  393,  392,  313,  391,  256,
  392, 1644,  318,  392,  392,  392, 1657, 1658,  291,  403,
  359,  360,  403,  308,  392,  256,  454,  402,  363,  256,
  369,  370,  338,  339,  388,  454,  403, 1623, 1583, 1584,
  409,  404,  361,  387, 1630,  351,  352,  387,  404,  387,
  391,  357, 1638,  402,  388,  361,  392, 1643,  454,  388,
  388,  387,  454,  310,  454,  388,  403,  391,  256, 1667,
  403,  403,  403,  391,  391,  391,  403,  391, 1623,  387,
  454,  392,  404,  389,  409, 1630,  389,  392,  392,  387,
  402,  392,    0, 1638,  409,  402,  256,  392, 1643,  454,
  402,  454,  454,  403,  403,  402,  454,  388,  404,  403,
  416,  404,  404,  452,  453,  256,  363,  456,  404,  403,
  367,  262,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  390,  387,  403,  475,  337,  263,  403,
  388,  388,  409,  390,  409,  392,  485,  388,  454,    0,
  387,    0,  404,  404,  404,  402,  403,  404,  392,  388,
  390,    0,  404,  454,  392,  390,  387,  308,  404,  310,
  392,  454,  392,  420,  387,  316,  409,  392,  404,  454,
  404,  414,  415,  392,  392,  388,  525,  434,  404,  388,
  392,  387,  404,  454,  388,  387,  393,  404,  389,  404,
  447,  337,  435,  436,  437,  438,  439,  440,  441,  442,
  443,  444,  445,  263,  404,  404,   54,  404,  557,  404,
  404,  468,  363,  404,  404,  194,  367,   12,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
 1454, 1454,  383,    5, 1236,  584,  387,  388,  389,  390,
  391,  392,  393,  394,  395,  396, 1201,  398, 1167,  895,
 1093,  402,  403,  404,  603,  406,  407,  606,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
  441,  442,  443,  444,  445,  978,  447,  448,    0, 1093,
 1639,  452, 1589,  454, 1562, 1607, 1579,  458, 1552,  925,
  461, 1471, 1658,  925, 1447, 1470, 1660,  468, 1568, 1567,
  771, 1572, 1641, 1360, 1281, 1469,  887,   20,  315,  370,
  618,  511,  786,  750,  417,  419,  620,  742,  256,  257,
  418,  690,  421,  692,  420,  422,  264,  568,  828,  267,
  268,  269,  701,  271,  272, 1372,  274,  275,  276,  277,
 1416,  279,  280,  281,  162, 1010, 1045, 1068,  858,  287,
 1068,  527,  548,  937,  292,  461,  699,  295,  296,  461,
 1272, 1159,  300,  301,  302,  162,  892,  305,  306,  893,
   -1,   -1,   -1,  742,   -1,  313,   -1,   -1,   -1,  317,
  318,  750,   -1,  321,  322,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,  763,   -1,   -1,   -1,  336,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
  358,  359,   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,  387,
  388,  389,   -1,  391,   -1,   -1,   -1,   -1,  827,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  404,  405,  406,  407,
  408,   -1,   -1,   -1,  412,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  422,  423,   -1,   -1,   -1,  288,
  289,  290,   -1,    0,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,
   -1,  449,  311,   -1,   -1,  453,  454,   -1,   -1,  457,
  319,   -1,  460,  461,  462,  324,   -1,   -1,   -1,   -1,
  468,   -1,  331,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,   -1,   -1,  267,  268,  269,   -1,  271,
  272,   -1,  274,  275,  276,  277,   -1,  279,  280,  281,
  359,   -1,   -1,   -1,   -1,  934,  365,   -1,   -1,   -1,
  292,   -1,  941,  295,  296,   -1,   -1,   -1,  300,  301,
  302,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,  317,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  981,   -1,  336,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,  358,  359,   -1,   -1,
   -1,   -1,  364,  256,   -1,  367,  368,   -1,   -1,  262,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,  387,  388,  389,   -1,  391,
   -1,   -1,   -1,   -1, 1043,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  404,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,  308,   -1,  310,   -1,   -1,
  422,  423,   -1,  316,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1, 1093,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,   -1,   -1,  457,   -1,   -1,  460,  461,
  462,   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,  256,
  363,   -1,   -1,   -1,  367,  262,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,
  383,   -1,   -1,   -1,  387,  388,  389,  390,  391,  392,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  402,
  403,  404,   -1,  406,  407,   -1,  409,  410,  411,  412,
  413,  308,   -1,  310,   -1,   -1,  419,  420,   -1,  316,
   -1,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  447,  448,    0,   -1,   -1,  452,
   -1,  454,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  468,  363,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,   -1,   -1,   -1,  383,   -1,   -1,   -1,
  387,  388,   -1,  390,  391,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  402,  403,  404,   -1,  406,
  407, 1270,  409,  410,  411,  412,  413,   -1,  256,   -1,
   -1,   -1,  419,  420,  262,   -1,   -1,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  447,  448,   -1,    0,   -1,  452,   -1,  454,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  308,  468,  310,  268,   -1,   -1,  271,   -1,  316,   -1,
   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,  363,   -1,   -1,   -1,  367,
   -1,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,  338,  339,  383,   -1,   -1,   -1,  387,
  388,   -1,  390,  391,  392,   -1,  351,  352,   -1,    0,
   -1,   -1,  357,   -1,  402,  403,  404,   -1,  406,  407,
   -1,  409,  410,  411,  412,  413,   -1,   -1,   -1,   -1,
   -1,  419,  420,   -1,   -1,   -1,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  447,
  448,   -1,   -1,   -1,  452,   -1,  454,   -1,   -1,  273,
  274,  416,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
  468,  285,   -1,   -1,  288,  289,  290,   -1,   -1,  293,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,
  304,   -1,   -1,  307,   -1,  309,   -1,  311,   -1,  454,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
  324,   -1,  326,   -1,  328,   -1,  330,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  355,  356,   -1,   -1,  359,  360,   -1,  362,  256,
  257,  365,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,  382,   -1,
   -1,  278,   -1,   -1,  388,  389,   -1,   -1,  285,   -1,
   -1,  288,  289,  290,   -1,   -1,  293,   -1,  295,   -1,
  404,   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,
  307,   -1,  309,   -1,  311,   -1,   -1,  314,  315,   -1,
   -1,   -1,  319,  320,  321,   -1,   -1,  324,   -1,  326,
   -1,   -1,   -1,  330,  331,  332,  333,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,    0,   -1,
   -1,  455,  456,   -1,   -1,   -1,   -1,   -1,  355,  356,
   -1,   -1,  359,  360,  468,  362,  257,   -1,  365,   -1,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,   -1,   -1,  382,   -1,  278,   -1,   -1,
   -1,  388,  389,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,  309,   -1,
   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,
  321,   -1,   -1,   -1,   -1,  326,   -1,  328,   -1,  330,
   -1,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,  455,  456,
   -1,   -1,    0,   -1,  355,  356,   -1,   -1,   -1,  360,
   -1,  362,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,  389,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,
    0,  309,   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,  455,  456,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,
   -1,   -1,  360,   -1,  362,  257,   -1,  365,   -1,  261,
   -1,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,  382,   -1,  278,   -1,   -1,   -1,
   -1,  389,   -1,  285,   -1,   -1,  288,  289,  290,   -1,
   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,  307,   -1,   -1,  310,  311,
   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,  324,  325,  326,   -1,  328,   -1,  330,  331,
  332,  333,  334,   -1,   -1,  337,  268,   -1,   -1,  271,
  342,  273,  344,   -1,  276,   -1,   -1,  455,  456,  281,
   -1,   -1,   -1,  355,   -1,   -1,   -1,  359,  360,   -1,
  362,   -1,   -1,  365,  296,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  313,  384,  385,   -1,  273,  318,   -1,   -1,  321,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,  293,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  302,  303,  304,   -1,   -1,  351,
  352,   -1,   -1,   -1,   -1,  357,  314,  315,   -1,  361,
   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,  454,  455,  342,   -1,  344,  257,   -1,   -1,
   -1,  261,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,
   -1,   -1,  360,  273,  362,   -1,   -1,  365,  278,  292,
   -1,   -1,   -1,   -1,  416,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,  382,   -1,   -1,   -1,   -1,   -1,
  388,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  314,  315,  262,   -1,   -1,  319,
  320,  321,  454,   -1,   -1,   -1,  326,   -1,   -1,   -1,
  330,   -1,  332,  333,  334,  348,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,   -1,
  360,   -1,  362,   -1,  310,  365,   -1,  455,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,   -1,   -1,   -1,   -1,   -1,  388,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,  410,  411,  412,
  413,   -1,   -1,  416,  417,  418,  419,   -1,   -1,  422,
  423,  424,  425,  426,  427,  428,  429,  363,  431,   -1,
   -1,  367,   -1,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,  448,   -1,  383,   -1,   -1,
   -1,   -1,  388,  389,  390,  391,  392,  393,  394,  395,
  396,   -1,  398,  256,   -1,  455,  402,  403,  404,  262,
  406,  407,   -1,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
   -1,  447,  448,   -1,   -1,   -1,   -1,  310,  454,   -1,
   -1,   -1,  458,  316,   -1,  461,   -1,   -1,   -1,   -1,
   -1,   -1,  468,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  363,   -1,   -1,   -1,  367,   -1,  369,  370,  371,  372,
  373,  374,  375,  376,  377,  378,  379,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,   -1,  398,  256,   -1,   -1,  402,
  403,  404,  262,  406,  407,   -1,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
  443,  444,  445,   -1,  447,  448,   -1,   -1,   -1,   -1,
  310,   -1,   -1,   -1,   -1,  458,  316,   -1,  461,   -1,
   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,   -1,
  390,  391,  392,   -1,  394,  395,  396,   -1,  398,   -1,
   -1,   -1,  402,  403,  404,   -1,  406,  407,   -1,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
  440,  441,  442,  443,  444,  445,   -1,  447,  448,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,  458,  264,
   -1,  461,  267,  268,   -1,   -1,  271,  272,  468,  274,
  275,  276,  277,   -1,  279,  280,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,
  295,  296,   -1,   -1,   -1,  300,  301,  302,   -1,   -1,
  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,  317,  318,   -1,   -1,  321,  322,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,  336,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,  357,  358,  359,   -1,   -1,   -1,   -1,  364,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  310,   -1,   -1,   -1,  382,  383,  316,
   -1,   -1,   -1,  256,  389,   -1,  391,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  422,  423,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,  316,  449,   -1,   -1,   -1,  453,  454,
   -1,  388,  457,  390,   -1,  392,  461,  462,   -1,   -1,
   -1,   -1,   -1,  468,   -1,  402,  403,  404,   -1,  406,
  407,   -1,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,   -1,   -1,   -1,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
  437,  438,  439,  440,  441,  442,  443,  444,  445,   -1,
  447,  448,   -1,   -1,   -1,   -1,   -1,  390,  391,  392,
  393,  394,  395,  396,   -1,  398,  256,   -1,   -1,  402,
  403,  468,  262,  406,  407,   -1,  409,  410,  411,  412,
  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,
  443,  444,  445,   -1,  447,  448,   -1,   -1,   -1,   -1,
  310,   -1,   -1,   -1,   -1,  458,  316,   -1,  461,   -1,
   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,   -1,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,   -1,
  390,   -1,  392,  310,   -1,   -1,   -1,   -1,   -1,  316,
   -1,   -1,  402,  403,  404,   -1,  406,  407,   -1,   -1,
  410,  411,  412,  413,   -1,   -1,  416,  417,  418,  419,
  420,   -1,   -1,   -1,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  363,  447,  448,   -1,
  367,  262,  369,  370,  371,  372,  373,  374,  375,  376,
  377,  378,  379,   -1,   -1,   -1,   -1,   -1,  468,   -1,
   -1,  388,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  402,  403,  404,   -1,  406,
  407,   -1,   -1,  410,  411,  412,  413,   -1,   -1,  310,
   -1,   -1,  419,  420,   -1,  316,   -1,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
  447,  448,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  468,  363,   -1,   -1,   -1,  367,   -1,  369,  370,
  371,  372,  373,  374,  375,  376,  377,  378,  379,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,   -1,  390,
   -1,  392,  310,   -1,   -1,   -1,   -1,   -1,  316,   -1,
   -1,  402,  403,  404,   -1,  406,  407,   -1,   -1,  410,
  411,  412,  413,   -1,   -1,   -1,   -1,   -1,  419,  420,
   -1,   -1,   -1,  424,  425,  426,  427,  428,  429,  430,
  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  363,  447,  448,   -1,  367,
  262,  369,  370,  371,  372,  373,  374,  375,  376,  377,
  378,  379,   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,
  388,   -1,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  402,  403,  404,   -1,  406,  407,
   -1,   -1,  410,  411,  412,  413,   -1,   -1,  310,   -1,
   -1,  419,  420,   -1,  316,   -1,  424,  425,  426,  427,
  428,  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  447,
  448,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  468,  363,   -1,   -1,   -1,  367,   -1,  369,  370,  371,
  372,  373,  374,  375,  376,  377,  378,  379,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  388,   -1,  390,   -1,
  392,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  402,  403,  404,   -1,  406,  407,   -1,   -1,  410,  411,
  412,  413,   -1,   -1,   -1,   -1,  256,  419,  420,   -1,
   -1,   -1,  424,  425,  426,  427,  428,  429,  430,  431,
  432,  433,  434,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,  447,  448,   -1,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,  468,   -1,   -1,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,  424,  425,  426,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,  427,  428,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,  427,  428,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,  427,  428,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,  410,  411,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,  427,  428,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  429,  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  429,
  430,  431,  432,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  412,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   -1,  256,   -1,   -1,
  419,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,  268,   -1,   -1,  271,   -1,   -1,   -1,
   -1,  276,  402,  403,  404,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,  413,   -1,   -1,  256,   -1,   -1,  419,
  420,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,  338,  339,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,  351,  352,   -1,   -1,
   -1,   -1,  357,  402,  403,  404,  361,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  413,   -1,   -1,  256,   -1,   -1,
   -1,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,  416,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  413,   -1,   -1,  256,   -1,   -1,  454,
  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  402,  403,  404,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,  310,  392,  268,   -1,   -1,  271,   -1,   -1,   -1,
   -1,  276,  402,  403,  404,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  420,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,  434,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,  363,   -1,   -1,  447,  367,   -1,
  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,
  379,   -1,   -1,  338,  339,   -1,   -1,   -1,  468,  388,
  310,  390,   -1,  392,   -1,   -1,  351,  352,   -1,   -1,
   -1,   -1,  357,  402,  403,  404,  361,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  420,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  434,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,  367,  447,  369,
  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
   -1,  416,   -1,   -1,   -1,   -1,   -1,   -1,  388,  468,
  390,   -1,  392,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  402,  403,  404,  264,   -1,   -1,  267,  268,
  269,   -1,  271,  272,   -1,  274,  275,  276,  277,  454,
  279,  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,   -1,   -1,  295,  296,   -1,   -1,
   -1,  300,  301,  302,   -1,   -1,  305,  306,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,  468,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
  359,   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  404,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,  267,  268,   -1,   -1,  271,  272,   -1,  274,  275,
  276,  277,   -1,  279,  280,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,  295,
  296,  460,  461,  462,  300,  301,  302,   -1,   -1,  305,
  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,  317,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  336,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  357,  358,  359,   -1,   -1,   -1,   -1,  364,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,  387,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  404,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,  267,  268,   -1,   -1,  271,  272,
   -1,  274,  275,  276,  277,   -1,  279,  280,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,  457,  295,  296,   -1,  461,  462,  300,  301,  302,
   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,  317,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  336,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,  358,  359,   -1,   -1,   -1,
   -1,  364,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  404,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,  267,  268,   -1,
   -1,  271,  272,   -1,  274,  275,  276,  277,   -1,  279,
  280,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,  457,  295,  296,   -1,  461,  462,
  300,  301,  302,   -1,   -1,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,  317,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
   -1,   -1,   -1,   -1,  364,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  404,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
  267,  268,   -1,   -1,  271,  272,   -1,  274,  275,  276,
  277,   -1,  279,  280,  281,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,  457,  295,  296,
   -1,  461,  462,  300,  301,  302,   -1,   -1,  305,  306,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
  317,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,  358,  359,  262,   -1,   -1,   -1,  364,  267,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  261,   -1,  263,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  285,  404,  405,  406,
  407,  408,   -1,   -1,  293,  412,   -1,  316,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  422,  423,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,  336,   -1,   -1,
   -1,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,   -1,
   -1,  330,  449,  332,  333,  334,  453,  454,  337,   -1,
  457,   -1,   -1,  342,  461,  462,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
   -1,  360,   -1,  362,   -1,   -1,   -1,   -1,   -1,  388,
   -1,   -1,  391,   -1,  393,  394,  395,  396,   -1,  398,
   -1,   -1,   -1,  382,  403,  404,   -1,  406,  407,   -1,
  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
  419,  420,   -1,  422,  423,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,  440,  441,  442,  443,  444,  445,   -1,  447,  448,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,  458,
  264,   -1,  461,   -1,  268,   -1,   -1,  271,  272,  468,
   -1,   -1,  276,  277,   -1,  279,  455,  281,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,  292,   -1,
  271,   -1,  296,   -1,   -1,  276,   -1,   -1,  302,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,  296,   -1,  321,  322,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  335,  313,   -1,  338,  339,  340,  318,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,  338,  339,   -1,
   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,
  351,  352,   -1,   -1,   -1,   -1,  357,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
  391,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,  410,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,  457,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,  454,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,  359,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,  273,  274,  389,   -1,
  391,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  405,  406,  407,  408,  295,   -1,
   -1,  412,   -1,   -1,   -1,  302,  303,  304,  256,   -1,
  307,  422,  423,   -1,  311,   -1,  264,  314,   -1,   -1,
  268,   -1,  319,  271,  272,   -1,   -1,  324,  276,  277,
   -1,  279,   -1,  281,  331,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,  457,  344,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,   -1,   -1,  313,   -1,   -1,  365,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,
  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,
   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,  457,   -1,  296,   -1,  461,  462,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,  457,   -1,  296,   -1,  461,
  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,  457,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,  457,   -1,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,  457,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,  256,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,  457,   -1,  296,
  268,  461,  462,  271,   -1,  302,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,  313,   -1,   -1,   -1,  346,
  318,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,  352,  382,  383,   -1,   -1,  357,
   -1,   -1,  389,  361,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,  416,   -1,
   -1,  256,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,  268,  461,  462,  271,   -1,  302,   -1,
   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,  454,  321,  322,   -1,
   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,  313,   -1,
   -1,   -1,  346,  318,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,  382,  383,
   -1,   -1,  357,   -1,   -1,  389,  361,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,  416,   -1,   -1,  256,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,  268,  461,  462,  271,
   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,  454,
  321,  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,  313,   -1,   -1,   -1,  346,  318,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,
  352,  382,  383,   -1,   -1,  357,   -1,   -1,  389,  361,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,  416,   -1,   -1,  256,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,  268,
  461,  462,  271,   -1,  302,   -1,   -1,  276,   -1,   -1,
   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,  454,  321,  322,   -1,   -1,  296,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,  313,   -1,   -1,   -1,  346,  318,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  351,  352,  382,  383,   -1,   -1,  357,   -1,
   -1,  389,  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,  416,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,  268,  461,  462,  271,   -1,  302,   -1,   -1,
  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,  454,  321,  322,   -1,   -1,
  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,  313,   -1,   -1,
   -1,  346,  318,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  351,  352,  382,  383,   -1,
   -1,  357,   -1,   -1,  389,  361,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  392,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
  416,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,   -1,   -1,  296,  268,  461,  462,  271,   -1,
  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,  454,  321,
  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
  313,   -1,   -1,   -1,  346,  318,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,
  382,  383,   -1,   -1,  357,   -1,   -1,  389,  361,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,  416,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,  268,  461,
  462,  271,   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,
   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,  454,  321,  322,   -1,   -1,  296,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,  313,   -1,   -1,   -1,  346,  318,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  351,  352,  382,  383,   -1,   -1,  357,   -1,   -1,
  389,  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,  416,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,  268,  461,  462,  271,   -1,  302,   -1,   -1,  276,
   -1,   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,  454,  321,  322,   -1,   -1,  296,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,  313,   -1,   -1,   -1,
  346,  318,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  351,  352,  382,  383,   -1,   -1,
  357,   -1,   -1,  389,  361,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,  416,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,  268,  461,  462,  271,   -1,  302,
   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,  454,  321,  322,
   -1,   -1,  296,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,  313,
   -1,   -1,   -1,  346,  318,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  351,  352,  382,
  383,   -1,   -1,  357,   -1,   -1,  389,  361,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,  416,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,  268,  461,  462,
  271,   -1,  302,   -1,   -1,  276,   -1,   -1,   -1,   -1,
  281,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
  454,  321,  322,   -1,   -1,  296,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,  313,   -1,   -1,   -1,  346,  318,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  351,  352,  382,  383,   -1,   -1,  357,   -1,   -1,  389,
  361,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,  416,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,
  268,  461,  462,  271,   -1,  302,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,  454,  321,  322,   -1,   -1,  296,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,  313,   -1,   -1,   -1,  346,
  318,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,  352,  382,  383,   -1,   -1,  357,
   -1,   -1,  389,  361,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,  416,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,  454,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,
  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,
   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,
  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,
   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,
   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,
  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,
   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,
  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,
   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,
  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,
   -1,   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,
  461,  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,
  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,
   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,
  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,
   -1,   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,
   -1,  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,
   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,
  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,
  292,   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,
  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,
  412,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
  422,  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,
   -1,  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,
  462,   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,  422,  423,   -1,   -1,   -1,  264,   -1,
   -1,   -1,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,
  449,   -1,   -1,   -1,  453,  454,  292,   -1,   -1,   -1,
  296,   -1,  461,  462,   -1,   -1,  302,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,
  346,   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,
  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,  422,  423,   -1,   -1,
   -1,  264,   -1,   -1,   -1,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,  449,   -1,   -1,   -1,  453,  454,  292,
   -1,   -1,   -1,  296,   -1,  461,  462,   -1,   -1,  302,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,  422,
  423,   -1,   -1,   -1,  264,   -1,   -1,   -1,  268,   -1,
   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,  449,   -1,   -1,   -1,
  453,  454,  292,   -1,   -1,   -1,  296,   -1,  461,  462,
   -1,   -1,  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  338,  339,
  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,
  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,
  316,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,
   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  422,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  449,
   -1,   -1,   -1,  453,  454,   -1,   -1,  383,   -1,   -1,
   -1,  461,  462,  389,   -1,  391,  392,  393,  394,  395,
  396,   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  406,  407,   -1,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,
  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,
  256,  447,  448,   -1,   -1,  261,   -1,  262,  454,   -1,
   -1,   -1,  458,   -1,   -1,  461,   -1,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,  289,  290,   -1,   -1,  293,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,  304,   -1,
   -1,  307,   -1,  309,   -1,  311,   -1,   -1,  314,  315,
   -1,  316,   -1,  319,  320,  321,   -1,   -1,  324,   -1,
  326,   -1,   -1,   -1,  330,  331,  332,  333,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,
  356,   -1,   -1,  359,  360,   -1,  362,   -1,   -1,  365,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,
   -1,  387,   -1,  389,   -1,   -1,  391,  392,  393,  394,
  395,  396,   -1,  398,   -1,   -1,   -1,  402,  403,   -1,
   -1,  406,  407,   -1,   -1,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
  445,   -1,  447,  448,   -1,   -1,   -1,  264,   -1,  455,
  456,  268,   -1,  458,  271,  272,  461,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,   -1,   -1,   -1,  296,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,  325,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  402,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,  422,  423,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,  449,   -1,   -1,  296,  453,  454,   -1,   -1,
  457,  302,   -1,   -1,  461,  462,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
  361,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  274,  382,  383,   -1,  278,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,  288,  289,  290,   -1,   -1,   -1,
   -1,  295,   -1,   -1,  405,  406,  407,  408,  302,  303,
  304,  412,   -1,  307,   -1,  309,   -1,  311,   -1,  264,
  314,  422,  423,  268,   -1,  319,  271,  272,   -1,   -1,
  324,  276,  277,   -1,  279,   -1,  281,  331,   -1,   -1,
   -1,   -1,   -1,  337,   -1,   -1,   -1,  292,  449,   -1,
  344,  296,  453,  454,   -1,   -1,  457,  302,   -1,   -1,
  461,  462,  356,   -1,   -1,  359,   -1,   -1,  313,   -1,
   -1,  365,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,  385,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,  359,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,  382,  383,   -1,
  278,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
  288,  289,  290,   -1,   -1,   -1,   -1,  295,   -1,   -1,
  405,  406,  407,  408,  302,  303,  304,  412,   -1,  307,
   -1,  309,   -1,  311,   -1,  264,  314,  422,  423,  268,
   -1,  319,  271,  272,   -1,   -1,  324,  276,  277,   -1,
  279,   -1,  281,  331,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  449,   -1,  344,  296,  453,  454,
   -1,   -1,  457,  302,   -1,   -1,  461,  462,  356,   -1,
   -1,  359,   -1,   -1,  313,   -1,   -1,  365,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  274,  382,  383,   -1,  278,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,  288,  289,  290,   -1,
   -1,   -1,   -1,  295,   -1,   -1,  405,  406,  407,  408,
  302,  303,  304,  412,   -1,  307,   -1,  309,   -1,  311,
   -1,  264,   -1,  422,  423,  268,   -1,  319,  271,  272,
   -1,   -1,  324,  276,  277,   -1,  279,   -1,  281,  331,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  449,   -1,   -1,  296,  453,  454,   -1,   -1,  457,  302,
   -1,   -1,  461,  462,  356,   -1,   -1,  359,   -1,   -1,
  313,   -1,   -1,  365,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,   -1,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  406,  407,  408,   -1,   -1,   -1,  412,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,  422,
  423,  268,   -1,   -1,  271,  272,   -1,   -1,   -1,  276,
  277,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,  449,   -1,   -1,  296,
  453,  454,   -1,   -1,  457,  302,   -1,   -1,  461,  462,
   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,   -1,   -1,   -1,  346,
   -1,  348,   -1,  350,  351,  352,  353,  354,   -1,   -1,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,
   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,
  407,  408,   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,  422,  423,  268,   -1,   -1,
  271,  272,   -1,   -1,   -1,  276,  277,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,  449,   -1,   -1,  296,  453,  454,   -1,   -1,
  457,  302,   -1,   -1,  461,  462,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,   -1,  350,
  351,  352,  353,  354,   -1,   -1,  357,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,  389,   -1,
  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  405,  406,  407,  408,   -1,   -1,
   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
   -1,  422,  423,  268,   -1,   -1,  271,  272,   -1,   -1,
   -1,  276,  277,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  449,   -1,
   -1,  296,  453,  454,   -1,   -1,  457,  302,   -1,   -1,
  461,  462,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
   -1,   -1,   -1,  318,   -1,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,  346,   -1,  348,   -1,  350,  351,  352,  353,  354,
   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  367,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,  389,   -1,  391,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  405,  406,  407,  408,   -1,   -1,   -1,  412,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  264,   -1,  422,  423,  268,
   -1,   -1,  271,  272,   -1,   -1,   -1,  276,  277,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  449,   -1,   -1,  296,  453,  454,
   -1,   -1,  457,  302,   -1,   -1,  461,  462,   -1,   -1,
   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,  318,
   -1,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,   -1,   -1,   -1,  346,   -1,  348,
   -1,  350,  351,  352,  353,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,   -1,   -1,
  389,   -1,  391,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  405,  406,  407,  408,
   -1,   -1,   -1,  412,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  264,   -1,  422,  423,  268,   -1,   -1,  271,  272,
   -1,   -1,   -1,  276,  277,   -1,  279,   -1,  281,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  449,   -1,   -1,  296,  453,  454,   -1,   -1,  457,  302,
   -1,   -1,  461,  462,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,  318,   -1,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,
   -1,  261,   -1,  346,   -1,  348,   -1,  350,  351,  352,
  353,  354,   -1,  273,  357,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,  382,
  383,   -1,  302,  303,  304,   -1,  389,   -1,  391,  309,
   -1,   -1,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,  405,  406,  407,  408,  326,   -1,   -1,  412,
  330,   -1,  332,  333,  334,   -1,   -1,   -1,   -1,  422,
  423,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,
  360,   -1,  362,  261,   -1,  365,  449,   -1,   -1,   -1,
  453,  454,   -1,   -1,   -1,  273,  274,   -1,  461,  462,
  278,   -1,  382,   -1,   -1,   -1,   -1,  285,  388,  389,
  288,  289,  290,   -1,   -1,  293,   -1,  295,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  307,
   -1,  309,   -1,  311,   -1,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,  324,   -1,  326,   -1,
   -1,   -1,  330,  331,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  455,  456,  355,  356,   -1,
   -1,  359,  360,   -1,  362,  261,   -1,  365,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,  278,   -1,  382,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,  289,  290,   -1,   -1,  293,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,  304,   -1,
   -1,  307,   -1,  309,   -1,  311,   -1,   -1,  314,  315,
   -1,   -1,   -1,  319,  320,  321,   -1,   -1,  324,   -1,
  326,   -1,   -1,   -1,  330,  331,  332,  333,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  454,  455,   -1,  355,
  356,   -1,   -1,  359,  360,   -1,  362,  261,   -1,  365,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,  278,   -1,  382,   -1,   -1,   -1,
   -1,  285,  388,   -1,  288,  289,  290,   -1,   -1,  293,
   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,  302,  303,
  304,   -1,   -1,  307,   -1,  309,   -1,  311,   -1,   -1,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
  324,   -1,  326,   -1,   -1,   -1,  330,  331,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  455,
   -1,  355,  356,   -1,   -1,  359,  360,   -1,  362,  261,
   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,  278,   -1,  382,   -1,
   -1,   -1,   -1,  285,  388,   -1,  288,  289,  290,   -1,
   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,  307,   -1,  309,   -1,  311,
   -1,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,  330,  331,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  455,   -1,  355,  356,   -1,   -1,  359,  360,   -1,
  362,  261,   -1,  365,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,  278,   -1,
  382,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,  289,
  290,   -1,   -1,  293,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  302,  303,  304,   -1,   -1,  307,   -1,   -1,
   -1,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,  319,
  320,  321,   -1,   -1,  324,   -1,  326,   -1,   -1,   -1,
  330,  331,  332,  333,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  455,   -1,  355,   -1,   -1,   -1,  359,
  360,   -1,  362,  261,   -1,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
  278,   -1,  382,   -1,   -1,   -1,   -1,  285,  388,   -1,
  288,  289,  290,   -1,   -1,  293,   -1,  295,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,   -1,  307,
   -1,   -1,   -1,  311,   -1,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,  324,   -1,  326,   -1,
   -1,   -1,  330,  331,  332,  333,  334,   -1,   -1,  261,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,   -1,   -1,
   -1,  273,   -1,   -1,   -1,  455,  278,  355,   -1,   -1,
   -1,  359,  360,  285,  362,   -1,  288,  365,   -1,   -1,
   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,   -1,  382,   -1,   -1,  309,   -1,   -1,
  388,   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,
   -1,   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,
  332,  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,   -1,  355,  356,   -1,   -1,   -1,  360,  273,
  362,   -1,   -1,  365,  278,   -1,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,  455,   -1,  293,
  382,   -1,   -1,   -1,   -1,  387,   -1,  389,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,  332,  333,
  334,   -1,   -1,  261,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,   -1,   -1,   -1,  273,   -1,   -1,   -1,   -1,
  278,  355,   -1,   -1,   -1,   -1,  360,  285,  362,   -1,
  288,  365,   -1,  455,   -1,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,   -1,  382,   -1,
   -1,   -1,   -1,   -1,  388,   -1,  314,  315,   -1,   -1,
   -1,  319,  320,  321,   -1,   -1,   -1,   -1,  326,   -1,
   -1,   -1,  330,   -1,  332,  333,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  355,   -1,   -1,
  273,   -1,  360,   -1,  362,  278,   -1,  365,   -1,   -1,
   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,
  293,  455,   -1,   -1,  382,   -1,   -1,   -1,   -1,  302,
  303,  304,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,  314,  315,   -1,   -1,   -1,  319,  320,  321,   -1,
   -1,   -1,   -1,  326,   -1,   -1,   -1,  330,  285,  332,
  333,  334,   -1,   -1,   -1,   -1,  293,   -1,   -1,  342,
   -1,  344,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  355,   -1,   -1,   -1,   -1,  360,  315,  362,
   -1,   -1,  365,  320,  321,   -1,  285,  455,   -1,  326,
   -1,   -1,   -1,  330,  293,  332,  333,  334,   -1,  382,
   -1,   -1,   -1,   -1,   -1,  342,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,  355,   -1,
   -1,  320,  321,  360,   -1,  362,   -1,  326,   -1,   -1,
  285,  330,   -1,  332,  333,  334,   -1,   -1,  293,   -1,
   -1,   -1,   -1,  342,  261,  382,  263,  384,  385,   -1,
   -1,  388,   -1,   -1,   -1,   -1,  355,   -1,   -1,   -1,
  315,  360,   -1,  362,   -1,  320,  321,   -1,  285,   -1,
   -1,  326,  455,   -1,   -1,  330,  293,  332,  333,  334,
   -1,   -1,  337,  382,   -1,  384,  385,  342,  261,  388,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  355,   -1,   -1,  320,  321,  360,   -1,  362,   -1,  326,
   -1,   -1,  285,  330,   -1,  332,  333,  334,  455,   -1,
  293,   -1,   -1,   -1,   -1,  342,  261,  382,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,  355,   -1,
   -1,   -1,  315,  360,   -1,  362,   -1,  320,  321,   -1,
  285,   -1,   -1,  326,   -1,   -1,  455,  330,  293,  332,
  333,  334,   -1,   -1,  261,  382,  263,   -1,   -1,  342,
   -1,  388,  389,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  355,   -1,   -1,  320,  321,  360,  285,  362,
   -1,  326,   -1,   -1,   -1,  330,  293,  332,  333,  334,
  455,   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,  382,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  355,   -1,   -1,  320,  321,  360,   -1,  362,   -1,  326,
  261,   -1,  405,  330,   -1,  332,  333,  334,  455,   -1,
   -1,   -1,   -1,   -1,   -1,  342,   -1,  382,   -1,   -1,
   -1,   -1,   -1,  388,  285,   -1,   -1,   -1,  355,   -1,
   -1,   -1,  293,  360,   -1,  362,   -1,   -1,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  454,  455,   -1,  315,  382,   -1,   -1,   -1,  320,
  321,  388,  285,   -1,   -1,  326,   -1,   -1,   -1,  330,
  293,  332,  333,  334,   -1,   -1,  261,   -1,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  455,   -1,  315,   -1,  355,   -1,   -1,  320,  321,  360,
  285,  362,   -1,  326,   -1,   -1,   -1,  330,  293,  332,
  333,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,
   -1,  382,   -1,  384,  385,   -1,   -1,   -1,  455,   -1,
  315,   -1,  355,   -1,   -1,  320,  321,  360,   -1,  362,
   -1,  326,   -1,   -1,   -1,  330,   -1,  332,  333,  334,
  268,   -1,   -1,  271,   -1,   -1,   -1,  342,  276,  382,
   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
  355,   -1,   -1,   -1,   -1,  360,   -1,  362,  296,   -1,
  268,   -1,   -1,  271,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,  455,  313,  268,  382,   -1,  271,
  318,   -1,   -1,   -1,  276,   -1,   -1,  325,  296,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,   -1,   -1,
  338,  339,   -1,   -1,  296,  313,   -1,   -1,  346,   -1,
  318,  454,  455,  351,  352,   -1,   -1,   -1,   -1,  357,
   -1,  313,   -1,  361,   -1,   -1,  318,   -1,   -1,   -1,
  338,  339,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,  352,  383,  338,  339,   -1,  357,
  455,   -1,   -1,  361,   -1,   -1,   -1,   -1,   -1,  351,
  352,   -1,   -1,   -1,   -1,  357,   -1,   -1,   -1,  361,
   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,  416,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  416,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  454,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  416,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  454,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  454,
  };

//#line 7914 "ps-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement (report);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

object Error_AwaitAsIdentifier (object token)
{
	if (async_block) {
		report.Error (4003, GetLocation (token), "`await' cannot be used as an identifier within an async method or lambda expression");
		return new Tokenizer.LocatedToken ("await", GetLocation (token));
	}

	return token;
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (is_config_enabled) {
		if (partial_token != null)
			current_container.AddPartial (tc);
		else
			current_container.AddTypeContainer (tc);
	}
	
	is_config_enabled = true;
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

bool IsPartial (object a)
{
	var attrs = a as Attributes;
	if (attrs == null)
		return false;
	foreach (var attr in attrs.Attrs) {
		if (attr.TypeExpression.Name == "Partial")
			return true;
	}
	return false;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public PlayScriptParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			if (report.Errors == 0)
				report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, FullNamedExpression retType, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);
	oob_stack.Push (Lexer.AutoSemiInsertion);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc, parameters, retType);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	Lexer.AutoSemiInsertion = (bool) oob_stack.Pop ();
	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

void CheckIsPlayScript(string elem, Location loc) 
{
	if (!parsing_playscript) {
		report.Error (7035, loc, "`{0}' only supported in PlayScript", elem);
	}

}

object ConvertAsType(SimpleName sn, object e)
{
	if (sn.Name == "Object") 
		return new TypeExpression (compiler.BuiltinTypes.Dynamic, GetLocation (e));
	else if (sn.Name == "Boolean") 
		return new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (e));
	else if (sn.Name == "Number")
		return new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (e));
	else if (sn.Name == "String")
		return new TypeExpression (compiler.BuiltinTypes.String, GetLocation (e));
	else if (sn.Name == "void")
		return new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (e));
	else if (sn.Name == "Function")
		return new TypeExpression (compiler.BuiltinTypes.Delegate, GetLocation (e));
	else if (sn.Name == "Class")
		return new TypeExpression (compiler.BuiltinTypes.Type, GetLocation (e));
	else
		return e;
}

Statement ExpressionListToStatementList(List<Expression> list)
{
	if (list.Count == 1) {
		return ConvertExpressionToStatement(list[0]);
	} else if (list.Count > 1) {
		var sl = new StatementList(ConvertExpressionToStatement(list[0]), ConvertExpressionToStatement(list[1]));
		for (var i = 2; i < list.Count; i++) {
			sl.Add(ConvertExpressionToStatement(list[i]));
		}
		return sl;
	}
	
	return new StatementErrorExpression (EmptyExpression.MissingValue);
}

Statement ConvertExpressionToStatement(Expression ex)
{
	Statement ret;
	ExpressionStatement s = ex as ExpressionStatement;
	if (s == null) {
		if (Lexer.ParsingPlayScript) {
			ex.Error_InvalidExpressionStatement (report);
			ret = new StatementErrorExpression (ex);
		} else {
			ret = new AsNonAssignStatementExpression (ex);
		}
	} else {
		ret = new StatementExpression (s);
	}
	return ret;
}

Expression MakeMonoSimdType(string typeName, Location loc)
{
	return new MemberAccess(new MemberAccess(new SimpleName("Mono", loc), "Simd", loc), typeName, loc);
}

LocalVariable GetOrCreateLocalVariable(Block block, string name, LocalVariable.Flags flags, FullNamedExpression typeExpr, Location loc)
{
	INamedBlockVariable existing = null;
	LocalVariable li = null;

	if (!parsing_playscript) {
		if (block.ParametersBlock.TopBlock.GetLocalName (name, block, ref existing)) {
			if (existing is LocalVariable) {
				li = existing as LocalVariable;
				if (li.TypeExpr != null && existing.TypeExpr != null && li.TypeExpr.Equals (existing.TypeExpr)) {
					report.Warning (7138, 1, loc, "Variable is declared more than once.");
					li.DeclFlags |= LocalVariable.Flags.AsIgnoreMultiple;
					return li;
				}
			}
		}
	}
	
	li = new LocalVariable(block, name, flags, loc);
	li.TypeExpr = typeExpr;

	block.AddLocalName (li);
	
	return li;
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return "Literal " + ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
	case Token.IDENTIFIER_MODIFIER:
	case Token.IDENTIFIER_CONFIG:
		return "Identifier " + ((Tokenizer.LocatedToken)lexer.Value).Value ?? "";
	case Token.BOOL:
		return "bool";
	case Token.BOOLEAN:
		return "boolean";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.DOUBLE2:
		return "double2";
	case Token.DOUBLE3:
		return "double3";
	case Token.DOUBLE4:
		return "double4";
	case Token.DYNAMIC:
		return "dynamic";
	case Token.FLOAT:
		return "float";
	case Token.FLOAT2:
		return "float2";
	case Token.FLOAT3:
		return "float3";
	case Token.FLOAT4:
		return "float4";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.LOGICAL_AND_ASSIGN:
		return "&&=";
	case Token.LOGICAL_OR_ASSIGN:
		return "||=";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_USHIFT_RIGHT:
		return ">>>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_REF_EQ:
		return "===";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_IN:
		return "in";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_USHIFT_RIGHT_ASSIGN:
		return ">>>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.SUPER:
		return "super";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DELETE:
		return "delete";
	case Token.DO:
		return "do";
	case Token.EACH:
		return "each";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTENDS:
		return "extends";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINAL:
		return "final";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOR_EACH:
		return "for each";
	case Token.FUNCTION:
		return "function";
	case Token.FUNCTION_GET:
		return "function get";
	case Token.FUNCTION_SET:
		return "function set";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLEMENTS:
		return "implements";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IMPORT:
		return "import";
	case Token.IN:
		return "in";
	case Token.INDEXER:
		return "indexer";
	case Token.INSTANCEOF:
		return "instanceof";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NATIVE:
		return "native";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.OVERLOAD:
		return "overload";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROPERTY:
		return "property";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNDEFINED:
		return "undefined";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USE:
		return "use";
	case Token.USING:
		return "using";
	case Token.VAR:
		return "var";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
//	case Token.ARGLIST:
//		return "__arglist";
//	case Token.REFVALUE:
//		return "__refvalue";
//	case Token.REFTYPE:
//		return "__reftype";
//	case Token.MAKEREF:
//		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
	case Token.OPEN_BRACE_INIT:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.DOT_AT:
		return ".@";
	case Token.DOT_STAR:
		return ".*";
	case Token.DOTDOT:
		return "..";
	case Token.DOTDOT_AT:
		return "..@";
	case Token.DOTDOT_STAR:
		return "..*";
	case Token.DOTDOTDOT:
		return "...";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
	case Token.OP_AT:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return ".<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
//#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int SUPER = 264;
  public const int BOOL = 265;
  public const int BOOLEAN = 266;
  public const int BREAK = 267;
  public const int BYTE = 268;
  public const int CASE = 269;
  public const int CATCH = 270;
  public const int CHAR = 271;
  public const int CHECKED = 272;
  public const int CLASS = 273;
  public const int CONST = 274;
  public const int CONTINUE = 275;
  public const int DECIMAL = 276;
  public const int DEFAULT = 277;
  public const int DELEGATE = 278;
  public const int DELETE = 279;
  public const int DO = 280;
  public const int DOUBLE = 281;
  public const int DOUBLE2 = 282;
  public const int DOUBLE3 = 283;
  public const int DOUBLE4 = 284;
  public const int DYNAMIC = 285;
  public const int EACH = 286;
  public const int ELSE = 287;
  public const int ENUM = 288;
  public const int EVENT = 289;
  public const int EXPLICIT = 290;
  public const int EXTENDS = 291;
  public const int FALSE = 292;
  public const int FINAL = 293;
  public const int FINALLY = 294;
  public const int FIXED = 295;
  public const int FLOAT = 296;
  public const int FLOAT2 = 297;
  public const int FLOAT3 = 298;
  public const int FLOAT4 = 299;
  public const int FOR = 300;
  public const int FOR_EACH = 301;
  public const int FUNCTION = 302;
  public const int FUNCTION_GET = 303;
  public const int FUNCTION_SET = 304;
  public const int GOTO = 305;
  public const int IF = 306;
  public const int IMPLICIT = 307;
  public const int IMPLEMENTS = 308;
  public const int IMPORT = 309;
  public const int IN = 310;
  public const int INDEXER = 311;
  public const int INSTANCEOF = 312;
  public const int INT = 313;
  public const int INTERFACE = 314;
  public const int INTERNAL = 315;
  public const int IS = 316;
  public const int LOCK = 317;
  public const int LONG = 318;
  public const int NAMESPACE = 319;
  public const int NATIVE = 320;
  public const int NEW = 321;
  public const int NULL = 322;
  public const int OBJECT = 323;
  public const int OPERATOR = 324;
  public const int OUT = 325;
  public const int OVERRIDE = 326;
  public const int OVERLOAD = 327;
  public const int PACKAGE = 328;
  public const int PARAMS = 329;
  public const int PRIVATE = 330;
  public const int PROPERTY = 331;
  public const int PROTECTED = 332;
  public const int PUBLIC = 333;
  public const int READONLY = 334;
  public const int REF = 335;
  public const int RETURN = 336;
  public const int REMOVE = 337;
  public const int SBYTE = 338;
  public const int SHORT = 339;
  public const int SIZEOF = 340;
  public const int STACKALLOC = 341;
  public const int STATIC = 342;
  public const int STRING = 343;
  public const int STRUCT = 344;
  public const int SWITCH = 345;
  public const int THIS = 346;
  public const int THROW = 347;
  public const int TRUE = 348;
  public const int TRY = 349;
  public const int TYPEOF = 350;
  public const int UINT = 351;
  public const int ULONG = 352;
  public const int UNCHECKED = 353;
  public const int UNDEFINED = 354;
  public const int UNSAFE = 355;
  public const int USE = 356;
  public const int USHORT = 357;
  public const int USING = 358;
  public const int VAR = 359;
  public const int VIRTUAL = 360;
  public const int VOID = 361;
  public const int VOLATILE = 362;
  public const int WHERE = 363;
  public const int WHILE = 364;
  public const int PARTIAL = 365;
  public const int ARROW = 366;
  public const int FROM = 367;
  public const int FROM_FIRST = 368;
  public const int JOIN = 369;
  public const int ON = 370;
  public const int EQUALS = 371;
  public const int SELECT = 372;
  public const int GROUP = 373;
  public const int BY = 374;
  public const int LET = 375;
  public const int ORDERBY = 376;
  public const int ASCENDING = 377;
  public const int DESCENDING = 378;
  public const int INTO = 379;
  public const int INTERR_NULLABLE = 380;
  public const int EXTERN = 381;
  public const int ASYNC = 382;
  public const int AWAIT = 383;
  public const int GET = 384;
  public const int SET = 385;
  public const int LAST_KEYWORD = 386;
  public const int OPEN_BRACE = 387;
  public const int CLOSE_BRACE = 388;
  public const int OPEN_BRACKET = 389;
  public const int CLOSE_BRACKET = 390;
  public const int OPEN_PARENS = 391;
  public const int CLOSE_PARENS = 392;
  public const int DOT = 393;
  public const int DOT_AT = 394;
  public const int DOT_STAR = 395;
  public const int DOTDOT = 396;
  public const int DOTDOT_AT = 397;
  public const int DOTDOT_STAR = 398;
  public const int DOTDOTDOT = 399;
  public const int DOT_OPEN_PARENS = 400;
  public const int CLOSE_PARENS_DOT = 401;
  public const int COMMA = 402;
  public const int COLON = 403;
  public const int SEMICOLON = 404;
  public const int TILDE = 405;
  public const int PLUS = 406;
  public const int MINUS = 407;
  public const int BANG = 408;
  public const int ASSIGN = 409;
  public const int OP_LT = 410;
  public const int OP_GT = 411;
  public const int BITWISE_AND = 412;
  public const int BITWISE_OR = 413;
  public const int LOGICAL_AND_ASSIGN = 414;
  public const int LOGICAL_OR_ASSIGN = 415;
  public const int STAR = 416;
  public const int PERCENT = 417;
  public const int DIV = 418;
  public const int CARRET = 419;
  public const int INTERR = 420;
  public const int DOUBLE_COLON = 421;
  public const int OP_INC = 422;
  public const int OP_DEC = 423;
  public const int OP_SHIFT_LEFT = 424;
  public const int OP_SHIFT_RIGHT = 425;
  public const int OP_USHIFT_RIGHT = 426;
  public const int OP_LE = 427;
  public const int OP_GE = 428;
  public const int OP_EQ = 429;
  public const int OP_REF_EQ = 430;
  public const int OP_NE = 431;
  public const int OP_REF_NE = 432;
  public const int OP_AND = 433;
  public const int OP_OR = 434;
  public const int OP_MULT_ASSIGN = 435;
  public const int OP_DIV_ASSIGN = 436;
  public const int OP_MOD_ASSIGN = 437;
  public const int OP_ADD_ASSIGN = 438;
  public const int OP_SUB_ASSIGN = 439;
  public const int OP_SHIFT_LEFT_ASSIGN = 440;
  public const int OP_SHIFT_RIGHT_ASSIGN = 441;
  public const int OP_USHIFT_RIGHT_ASSIGN = 442;
  public const int OP_AND_ASSIGN = 443;
  public const int OP_XOR_ASSIGN = 444;
  public const int OP_OR_ASSIGN = 445;
  public const int OP_PTR = 446;
  public const int OP_COALESCING = 447;
  public const int OP_IN = 448;
  public const int OP_AT = 449;
  public const int OP_GENERICS_LT = 450;
  public const int OP_GENERICS_LT_DECL = 451;
  public const int OP_GENERICS_GT = 452;
  public const int LITERAL = 453;
  public const int IDENTIFIER = 454;
  public const int IDENTIFIER_MODIFIER = 455;
  public const int IDENTIFIER_CONFIG = 456;
  public const int OPEN_PARENS_LAMBDA = 457;
  public const int OPEN_PARENS_CAST = 458;
  public const int GENERIC_DIMENSION = 459;
  public const int DEFAULT_COLON = 460;
  public const int OPEN_BRACKET_EXPR = 461;
  public const int OPEN_BRACE_INIT = 462;
  public const int EVAL_STATEMENT_PARSER = 463;
  public const int EVAL_COMPILATION_UNIT_PARSER = 464;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 465;
  public const int DOC_SEE = 466;
  public const int GENERATE_COMPLETION = 467;
  public const int COMPLETE_COMPLETION = 468;
  public const int UMINUS = 469;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
