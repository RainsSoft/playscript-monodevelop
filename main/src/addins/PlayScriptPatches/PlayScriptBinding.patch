diff -rupN ../CSharpBinding/Autotools/Autotools.csproj ../PlayScriptBinding/Autotools/Autotools.csproj
--- ../CSharpBinding/Autotools/Autotools.csproj	2013-04-22 22:21:54.000000000 -0700
+++ ../PlayScriptBinding/Autotools/Autotools.csproj	1969-12-31 16:00:00.000000000 -0800
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
-  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>9.0.21022</ProductVersion>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{F79A67A1-4BA2-48F8-A7DD-A72E316EF6CD}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AssemblyName>MonoDevelop.CSharpBinding.Autotools</AssemblyName>
-    <RootNamespace>Autotools</RootNamespace>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <DebugSymbols>True</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>True</Optimize>
-    <OutputPath>..\..\..\..\build\AddIns\BackendBindings\</OutputPath>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-    <ConsolePause>False</ConsolePause>
-    <Execution>
-      <Execution clr-version="Net_2_0" />
-    </Execution>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <DebugType>none</DebugType>
-    <Optimize>True</Optimize>
-    <OutputPath>..\..\..\..\build\AddIns\BackendBindings\</OutputPath>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-    <ConsolePause>False</ConsolePause>
-    <Execution>
-      <Execution clr-version="Net_2_0" />
-    </Execution>
-  </PropertyGroup>
-  <ItemGroup>
-    <ProjectReference Include="..\..\MonoDevelop.Autotools\MonoDevelop.Autotools.csproj">
-      <Project>{CFC02FEC-BDF4-40B9-94D6-35E73F76A92E}</Project>
-      <Name>MonoDevelop.Autotools</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\..\core\MonoDevelop.Core\MonoDevelop.Core.csproj">
-      <Project>{7525BB88-6142-4A26-93B9-A30C6983390A}</Project>
-      <Name>MonoDevelop.Core</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\..\core\MonoDevelop.Ide\MonoDevelop.Ide.csproj">
-      <Project>{27096E7F-C91C-4AC6-B289-6897A701DF21}</Project>
-      <Name>MonoDevelop.Ide</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\CSharpBinding.csproj">
-      <Project>{07CC7654-27D6-421D-A64C-0FFA40456FA2}</Project>
-      <Name>CSharpBinding</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\..\core\Mono.Texteditor\Mono.TextEditor.csproj">
-      <Project>{A2329308-3751-4DBD-9A75-5F7B8B024625}</Project>
-      <Name>Mono.TextEditor</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\MonoDevelop.Refactoring\MonoDevelop.Refactoring.csproj">
-      <Project>{100568FC-F4E8-439B-94AD-41D11724E45B}</Project>
-      <Name>MonoDevelop.Refactoring</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\AspNet\MonoDevelop.AspNet\MonoDevelop.AspNet.csproj">
-      <Project>{1CF94D07-5480-4D10-A3CD-2EBD5E87B02E}</Project>
-      <Name>MonoDevelop.AspNet</Name>
-      <Private>False</Private>
-    </ProjectReference>
-    <ProjectReference Include="..\..\MonoDevelop.DesignerSupport\MonoDevelop.DesignerSupport.csproj">
-      <Project>{2C24D515-4A2C-445C-8419-C09231913CFA}</Project>
-      <Name>MonoDevelop.DesignerSupport</Name>
-      <Private>False</Private>
-    </ProjectReference>
-  </ItemGroup>
-  <ItemGroup>
-    <Reference Include="System" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="CSharpAutotoolsSetup.cs" />
-  </ItemGroup>
-  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
-  <Import Project="..\..\..\..\md.targets" />
-</Project>
diff -rupN ../CSharpBinding/Autotools/CSharpAutotoolsSetup.cs ../PlayScriptBinding/Autotools/CSharpAutotoolsSetup.cs
--- ../CSharpBinding/Autotools/CSharpAutotoolsSetup.cs	2013-04-22 22:21:54.000000000 -0700
+++ ../PlayScriptBinding/Autotools/CSharpAutotoolsSetup.cs	1969-12-31 16:00:00.000000000 -0800
@@ -1,129 +0,0 @@
-
-using System;
-using System.IO;
-using MonoDevelop.Core;
-using MonoDevelop.Autotools;
-using MonoDevelop.Projects;
-using CSharpBinding;
-using MonoDevelop.CSharp.Project;
-
-namespace CSharpBinding.Autotools
-{
-	public class CSharpAutotoolsSetup : ISimpleAutotoolsSetup
-	{
-		public string GetCompilerCommand ( Project project, string configuration )
-		{
-			DotNetProject dp = project as DotNetProject;
-			if ( !this.CanDeploy ( project ) || dp == null)
-				throw new Exception ( "Not a deployable project." );
-			
-			switch (dp.TargetFramework.ClrVersion) {
-			case ClrVersion.Net_1_1:
-				return "mcs";
-			case ClrVersion.Net_2_0:
-				return "gmcs";
-			case ClrVersion.Clr_2_1:
-				return "smcs";
-			case ClrVersion.Net_4_0:
-				return "dmcs";
-			default:
-				throw new Exception ("Cannot handle unknown runtime version ClrVersion.'" + dp.TargetFramework.ClrVersion.ToString () + "'.");
-			}
-		}
-
-		public string GetCompilerFlags ( Project project, string configuration )
-		{
-			if ( !this.CanDeploy ( project ) )
-				throw new Exception ( "Not a deployable project." );
-			
-			DotNetProjectConfiguration config = 
-				project.Configurations [configuration] as DotNetProjectConfiguration;
-
-			if ( config == null ) return "";
-			
-			CSharpCompilerParameters parameters = (CSharpCompilerParameters) config.CompilationParameters;
-			CSharpProjectParameters projectParameters = (CSharpProjectParameters) config.ProjectParameters;
-			
-			StringWriter writer = new StringWriter();
-			
-			writer.Write(" -noconfig");
-			writer.Write(" -codepage:utf8");
-			
-			if (parameters.UnsafeCode) {
-				writer.Write(" -unsafe");
-			}
-			writer.Write(" -warn:" + parameters.WarningLevel);
-			if(parameters.Optimize)
-				writer.Write(" -optimize+");
-			else
-				writer.Write(" -optimize-");
-
-			if(parameters.NoWarnings != null && parameters.NoWarnings != "") {
-				writer.Write(" \"-nowarn:" + parameters.NoWarnings + '"');
-			}
-
-			if(config.DebugMode) {
-				writer.Write(" -debug");
-				//Check whether we have a DEBUG define
-				bool hasDebugDefine = false;
-				foreach (string define in parameters.DefineSymbols.Split (';')) {
-					if (String.Compare (define, "DEBUG") == 0) {
-						hasDebugDefine = true;
-						break;
-					}
-				}
-				if (!hasDebugDefine)
-					writer.Write (" -define:DEBUG");
-			}
-			
-			if (!string.IsNullOrEmpty (parameters.AdditionalArguments)) {
-				writer.Write (" " + parameters.AdditionalArguments + " ");
-			}
-			
-			switch (parameters.LangVersion) {
-			case LangVersion.Default:
-				break;
-			case LangVersion.ISO_1:
-				writer.Write (" -langversion:ISO-1 ");
-				break;
-			case LangVersion.ISO_2:
-				writer.Write (" -langversion:ISO-2 ");
-				break;
-			default:
-				throw new Exception ("Invalid LangVersion enum value '" + parameters.LangVersion.ToString () + "'");
-			}
-			
-			
-			// TODO check path and add to extradist...
-			//if (parameters.Win32Icon != null && parameters.Win32Icon.Length > 0) {
-			//	writer.Write(" \"-win32icon:" + compilerparameters.Win32Icon + "\"");
-			//}
-			
-			if (parameters.DefineSymbols.Length > 0) {
-				writer.Write (" \"-define:" + parameters.DefineSymbols + '"');
-			}
-				
-			if (projectParameters.MainClass != null && projectParameters.MainClass != "") {
-				writer.Write (" \"-main:" + projectParameters.MainClass + '"');
-			}
-
-			if (config.SignAssembly)
-				writer.Write (" \"-keyfile:" + project.GetRelativeChildPath (config.AssemblyKeyFile) + '"');
-			
-			// TODO check paths and add to extradist?
-			//if (parameters.GenerateXmlDocumentation) {
-			//	writer.WriteLine(" \"-doc:" + Path.ChangeExtension(exe, ".xml") + '"');
-			//}
-		
-			return writer.ToString();
-		}
-		
-		public bool CanDeploy ( Project project )
-		{
-			DotNetProject csproj = project as DotNetProject;
-			if ( csproj != null )
-				if ( csproj.LanguageName == "C#" ) return true;
-			return false;
-		}
-	}
-}
diff -rupN ../CSharpBinding/Autotools/ChangeLog ../PlayScriptBinding/Autotools/ChangeLog
--- ../CSharpBinding/Autotools/ChangeLog	2013-04-22 22:21:54.000000000 -0700
+++ ../PlayScriptBinding/Autotools/ChangeLog	1969-12-31 16:00:00.000000000 -0800
@@ -1,72 +0,0 @@
-2010-03-17  Lluis Sanchez Gual  <lluis@novell.com>
-
-	* Makefile.am:
-	* Autotools.csproj: Merged MD.Projects into MD.Core, and
-	  MD.Projects.Gui, MD.Core.Gui and MD.Components into MD.Ide.
-
-2010-03-09  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Autotools.csproj: Worked on new formatter/parser.
-
-2010-01-06  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Makefile.am: fixed 'Bug 568484 - NRE in resolver'.
-
-2009-10-09  Mike Kr端ger  <mkrueger@novell.com>
-
-	* CSharpAutotoolsSetup.cs: Renamed some namespaces.
-
-2009-10-08  Ankit Jain  <jankit@novell.com>
-
-	* Autotools.csproj: Use \ instead of '/' in the Import.
-
-2009-10-08  Ankit Jain  <jankit@novell.com>
-
-	* Autotools.csproj: Add md.targets .
-
-2009-08-10  Lluis Sanchez Gual  <lluis@novell.com>
-
-	* Autotools.csproj: Don't make local copies of project
-	  references.
-
-2009-07-03  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Makefile.am:
-	* Autotools.csproj: Worked on refactoring support.
-
-2009-04-17  Michael Hutchinson  <mhutchinson@novell.com>
-
-	* Autotools.csproj: Flush reference version number.
-
-2009-03-16  Michael Hutchinson  <mhutchinson@novell.com>
-
-	* Autotools.csproj: Don't local-copy project refs.
-
-2009-03-13  Michael Hutchinson  <mhutchinson@novell.com>
-
-	* Autotools.csproj: Don't local-copy project refs.
-
-2009-03-13  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Autotools.csproj: Moved text editor to core
-
-2009-03-10  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Makefile.am:
-	* Autotools.csproj: Monodevelop changed the reference a bit.
-
-2009-03-10  Mike Kr端ger  <mkrueger@novell.com>
-
-	* Makefile.am:
-	* Autotools.csproj: Updated nrefactory references.
-
-2009-02-25  Lluis Sanchez Gual  <lluis@novell.com>
-
-	* CSharpAutotoolsSetup.cs: Moved some properties from
-	  configuration parameters to project parameters.
-
-2009-02-06  Lluis Sanchez Gual  <lluis@novell.com>
-
-	* Autotools.mdp:
-	* Autotools.csproj: Migrated to MSBuild file format.
-
diff -rupN ../CSharpBinding/Autotools/Makefile.am ../PlayScriptBinding/Autotools/Makefile.am
--- ../CSharpBinding/Autotools/Makefile.am	2013-04-22 22:21:54.000000000 -0700
+++ ../PlayScriptBinding/Autotools/Makefile.am	1969-12-31 16:00:00.000000000 -0800
@@ -1 +0,0 @@
-include $(top_srcdir)/xbuild.include
diff -rupN ../CSharpBinding/CSharpBinding.addin.xml ../PlayScriptBinding/CSharpBinding.addin.xml
--- ../CSharpBinding/CSharpBinding.addin.xml	2013-04-14 01:09:29.000000000 -0700
+++ ../PlayScriptBinding/CSharpBinding.addin.xml	2013-04-22 22:02:58.000000000 -0700
@@ -1,10 +1,10 @@
-<Addin id          = "CSharpBinding"
+<Addin id          = "PlayScriptBinding"
        namespace   = "MonoDevelop"
-       name        = "CSharp Language Binding"
-       author      = "Todd Berman"
+       name        = "PlayScript Language Binding"
+       author      = "Ben Cooley"
        copyright   = "MIT X11"
        url         = "http://www.monodevelop.com/"
-       description = "CSharp Language Binding"
+       description = "PlayScript Language Binding"
        category    = "Language bindings"
        version     = "4.0.3">
 	
@@ -13,6 +13,7 @@
 		<Addin id="Ide" version="4.0.3"/>
 		<Addin id="SourceEditor2" version="4.0.3"/>
 		<Addin id="Refactoring" version="4.0.3"/>
+		<Addin id="CSharpBinding" version="4.0.3"/>
 	</Dependencies>
 
 	<ConditionType id="MSBuildTargetIsAvailable" type="MonoDevelop.Projects.Formats.MSBuild.TargetsAvailableCondition" />
@@ -25,76 +26,75 @@
 
 	<Extension path = "/MonoDevelop/ProjectModel/MSBuildItemTypes">
 		<DotNetProject
-			language="C#"
-			extension="csproj"
-			guid="{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"
+			language="PlayScript"
+			extension="psproj"
+			guid="{2065160B-5C1B-4AFD-AAB6-1CF1AC3AC086}"
 			import="$(MSBuildBinPath)\Microsoft.CSharp.targets"
-			resourceHandler="MonoDevelop.CSharp.Project.CSharpResourceIdBuilder"
+			resourceHandler="MonoDevelop.PlayScript.Project.CSharpResourceIdBuilder"
 			/>
-		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
-			<DotNetProjectSubtype
-				guid="{786C830F-07A1-408B-BD7F-6EE04809D6DB}"
-				type="MonoDevelop.Projects.PortableDotNetProject"
-				useXBuild="true">
-				<AddImport language="C#" projects="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
-				<RemoveImport language="C#" projects="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
-			</DotNetProjectSubtype>
-		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/FileTemplates">
-		<FileTemplate id = "CSharpEmptyFile" resource = "EmptyCSharpFile.xft.xml"/>
 		<FileTemplate id = "CSharpAssemblyInfo" resource = "AssemblyInfo.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyFile" resource = "AsEmptyFile.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyClass" resource = "AsEmptyClass.xft.xml"/>
+		<FileTemplate id = "ActionScriptEmptyInterface" resource = "AsEmptyInterface.xft.xml"/>		
+		<FileTemplate id = "PlayScriptEmptyFile" resource = "PsEmptyFile.xft.xml"/>
+		<FileTemplate id = "PlayScriptEmptyClass" resource = "PsEmptyClass.xft.xml"/>
+		<FileTemplate id = "PlayScriptEmptyInterface" resource = "PsEmptyInterface.xft.xml"/>		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/ProjectTemplates">
-		<ProjectTemplate id = "CSharpConsoleProject" resource = "ConsoleProject.xpt.xml"/>
-		<ProjectTemplate id = "CSharpEmptyProject" resource = "EmptyProject.xpt.xml"/>
-		<ProjectTemplate id = "CSharpGtkSharp2Project" resource = "GtkSharp2Project.xpt.xml"/>
-		<ProjectTemplate id = "CSharpLibrary" resource = "Library.xpt.xml"/>
+		<ProjectTemplate id = "PlayScriptEmptyProject" resource = "PsEmptyProject.xpt.xml"/>
+		<ProjectTemplate id = "PlayScriptLibrary" resource = "PsLibrary.xpt.xml"/>
+		<ProjectTemplate id = "PlayScriptConsoleProject" resource = "PsConsoleProject.xpt.xml"/>
 		<ProjectTemplate id = "ActionScriptConsoleProject" resource = "AsConsoleProject.xpt.xml"/>
-		<Condition id="MSBuildTargetIsAvailable" target="$(MSBuildExtensionsPath)\Microsoft\Portable\v4.0\Microsoft.Portable.CSharp.targets">
-			<ProjectTemplate id = "CSharpPortableLibrary" resource = "PortableLibrary.xpt.xml" />
-		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/FileFilters">
-		<FileFilter id = "CSharp"
+		<FileFilter id = "ActionScript"
 		            insertbefore = "Assemblies"
-		            _label = "C# Files"
-		            extensions = "*.cs"/>
+		            _label = "ActionScript Files"
+		            extensions = "*.as"/>
+		<FileFilter id = "PlayScript"
+		            insertbefore = "Assemblies"
+		            _label = "PlayScript Files"
+		            extensions = "*.play"/>			            	            
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/General">
-		<Condition id="ActiveLanguage" value="C#">
+		<Condition id="ActiveLanguage" value="PlayScript">
 			<Panel id = "CSharpCompilerOptionsPanel"
-			             _label = "C#"
-			             class = "MonoDevelop.CSharp.Project.CompilerOptionsPanel"/>
+			             _label = "PlayScript"
+			             class = "MonoDevelop.PlayScript.Project.CompilerOptionsPanel"/>
 		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build/Compiler">
-		<Condition id="ActiveLanguage" value="C#">
+		<Condition id="ActiveLanguage" value="PlayScript">
 			<Panel id = "CSharpCodeGenerationPanel"
 			             _label = "Compiler"
-			             class = "MonoDevelop.CSharp.Project.CodeGenerationPanel"/>
+			             class = "MonoDevelop.PlayScript.Project.CodeGenerationPanel"/>
 		</Condition>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/LanguageBindings">
-		<LanguageBinding id    = "CSharp"
-		                 supportedextensions = ".cs"
-		                 class = "MonoDevelop.CSharp.CSharpLanguageBinding" />
+		<LanguageBinding id    = "ActionScript"
+		                 supportedextensions = ".as"
+		                 class = "MonoDevelop.PlayScript.ActionScriptLanguageBinding" />
+		<LanguageBinding id    = "PlayScript"
+		                 supportedextensions = ".play"
+		                 class = "MonoDevelop.PlayScript.PlayScriptLanguageBinding" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/ReferenceFinder">
-		<ReferenceFinder supportedmimetypes = "text/x-csharp"
-		                 class = "MonoDevelop.CSharp.Refactoring.CSharpReferenceFinder" />
+		<ReferenceFinder supportedmimetypes = "text/x-csharp,text/x-actionscript,text/x-playscript"
+		                 class = "MonoDevelop.PlayScript.Refactoring.CSharpReferenceFinder" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/SerializableClasses">
-		<DataType class = "MonoDevelop.CSharp.Project.CSharpCompilerParameters" />
-		<DataType class = "MonoDevelop.CSharp.Project.CSharpProjectParameters" />
+		<DataType class = "MonoDevelop.PlayScript.Project.CSharpCompilerParameters" />
+		<DataType class = "MonoDevelop.PlayScript.Project.CSharpProjectParameters" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/TextEditorExtensions">
@@ -111,10 +111,10 @@
 		         privaet;
 
 		-->
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Formatting.CSharpTextEditorIndentation" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Completion.CSharpCompletionTextEditorExtension" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.Highlighting.HighlightUsagesExtension" />
-		<Class fileExtensions = ".cs" class = "MonoDevelop.CSharp.PathedDocumentTextEditorExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Formatting.CSharpTextEditorIndentation" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Completion.CSharpCompletionTextEditorExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.Highlighting.HighlightUsagesExtension" />
+		<Class fileExtensions = ".as,.play" class = "MonoDevelop.PlayScript.PathedDocumentTextEditorExtension" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/MD1SerializationMaps">
@@ -122,34 +122,43 @@
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Core/StockIcons">
-		<StockIcon stockid = "md-csharp-file" resource = "C#.FileIcon" size="Menu" />
-		<StockIcon stockid = "md-csharp-project" resource = "csharp-project-16.png" size="Menu"/>
+		<StockIcon stockid = "md-actionscript-file" resource = "ActionScript.FileIcon" size="Menu" />
+		<StockIcon stockid = "md-playscript-file" resource = "PlayScript.FileIcon" size="Menu" />
+		<StockIcon stockid = "md-playscript-project" resource = "playscript-project-16.png" size="Menu"/>
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Core/MimeTypes">
-		<MimeType id="text/x-csharp" _description="C# source code" icon="md-csharp-file" isText="true">
-			<File pattern="*.cs" />
-		</MimeType>
+		<MimeType id="text/x-actionscript" _description="ActionScript source code" icon="md-actionscript-file" isText="true">
+			<File pattern="*.as" />
+		</MimeType>		
+		<MimeType id="text/x-playscript" _description="PlayScript source code" icon="md-playscript-file" isText="true">
+			<File pattern="*.play" />
+		</MimeType>		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/Ide/CodeFormatters">
-		<Formatter mimeType="text/x-csharp" class="MonoDevelop.CSharp.Formatting.CSharpFormatter" />
+		<Formatter mimeType="text/x-actionscript" class="MonoDevelop.PlayScript.Formatting.CSharpFormatter" />
+		<Formatter mimeType="text/x-playscript" class="MonoDevelop.PlayScript.Formatting.CSharpFormatter" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/Ambiences">
-		<Ambience mimeType="text/x-csharp" class = "MonoDevelop.CSharp.CSharpAmbience" />
+		<Ambience mimeType="text/x-actionscript" class = "MonoDevelop.PlayScript.CSharpAmbience" />
+		<Ambience mimeType="text/x-playscript" class = "MonoDevelop.PlayScript.CSharpAmbience" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/Parser">
-		<Parser class="MonoDevelop.CSharp.Parser.TypeSystemParser" mimeType = "text/x-csharp" />
+		<Parser class="MonoDevelop.PlayScript.Parser.TypeSystemParser" mimeType = "text/x-actionscript" />
+		<Parser class="MonoDevelop.PlayScript.Parser.TypeSystemParser" mimeType = "text/x-playscript" />
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/FoldingParser">
-		<Parser class = "MonoDevelop.CSharp.Parser.CSharpFoldingParser" mimeType="text/x-csharp" />
+		<Parser class = "MonoDevelop.PlayScript.Parser.CSharpFoldingParser" mimeType="text/x-actionscript" />
+		<Parser class = "MonoDevelop.PlayScript.Parser.CSharpFoldingParser" mimeType="text/x-playscript" />		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/TypeSystem/CodeGenerators">
-		<Generator class="MonoDevelop.CSharp.Refactoring.CSharpCodeGenerator" mimeType = "text/x-csharp" />
+		<Generator class="MonoDevelop.PlayScript.Refactoring.CSharpCodeGenerator" mimeType = "text/x-actionscript" />
+		<Generator class="MonoDevelop.PlayScript.Refactoring.CSharpCodeGenerator" mimeType = "text/x-playscript" />		
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/PolicySets/Mono" >
@@ -190,46 +199,48 @@
 	</Extension>
 
 	<Extension path = "/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels">
-		<Panel id = "CSharpFormatting" _label = "C# Format" mimeType="text/x-csharp" class = "MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanel" />
+		<Panel id = "CSharpFormatting" _label = "ActionScript Format" mimeType="text/x-actionscript" class = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanel" />
+		<Panel id = "CSharpFormatting" _label = "PlayScript Format" mimeType="text/x-playscript" class = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanel" />		
 	</Extension>
 
-	<Extension path = "/MonoDevelop/Refactoring/CodeActions">
+	<!-- Extension path = "/MonoDevelop/Refactoring/CodeActions">
 		<Action mimeType="text/x-csharp"
 			_title = "Move type to another file"
 			_description = "Moves current type to another file that matches the name of the type."
-			class = "MonoDevelop.CSharp.Refactoring.CodeActions.MoveTypeToFile" />
-	</Extension>
+			class = "MonoDevelop.PlayScript.Refactoring.CodeActions.MoveTypeToFile" />
+	</Extension -->
 
 	<Extension path = "/MonoDevelop/Ide/TextEditorResolver">
-		<Resolver class = "MonoDevelop.CSharp.Resolver.TextEditorResolverProvider" mimeType="text/x-csharp" />
+		<Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-actionscript" />
+		<Resolver class = "MonoDevelop.PlayScript.Resolver.TextEditorResolverProvider" mimeType="text/x-playscript" />
 	</Extension>
 
-	<Extension path = "/MonoDevelop/Ide/Commands/TextEditor">
-		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.PrevUsage"
-		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToPrevUsageHandler"
+	<!-- Extension path = "/MonoDevelop/Ide/Commands/TextEditor">
+		<Command id = "MonoDevelop.PlayScript.Highlighting.MoveToUsagesCommand.PrevUsage"
+		         defaultHandler = "MonoDevelop.PlayScript.Highlighting.MoveToPrevUsageHandler"
 		         shortcut = "Ctrl|Shift|Up"
 		         macShortcut = "Meta|Shift|Up"
 		         _label = "_Move to prev usage"/>
-		<Command id = "MonoDevelop.CSharp.Highlighting.MoveToUsagesCommand.NextUsage"
-		         defaultHandler = "MonoDevelop.CSharp.Highlighting.MoveToNextUsageHandler"
+		<Command id = "MonoDevelop.PlayScript.Highlighting.MoveToUsagesCommand.NextUsage"
+		         defaultHandler = "MonoDevelop.PlayScript.Highlighting.MoveToNextUsageHandler"
 		         shortcut = "Ctrl|Shift|Down"
 		         macShortcut = "Meta|Shift|Down"
 		         _label = "_Move to next usage"/>
 
-		<Command id = "MonoDevelop.CSharp.ExpandCommands.ExpandSelection"
-		         defaultHandler = "MonoDevelop.CSharp.ExpandSelectionHandler"
+		<Command id = "MonoDevelop.PlayScript.ExpandCommands.ExpandSelection"
+		         defaultHandler = "MonoDevelop.PlayScript.ExpandSelectionHandler"
 		         shortcut = "Alt|Shift|Up"
 		         macShortcut = "Alt|Shift|Up"
 		         _label = "_Expand selection"/>
 
-		<Command id = "MonoDevelop.CSharp.ExpandCommands.ShrinkSelection"
-		         defaultHandler = "MonoDevelop.CSharp.ShrinkSelectionHandler"
+		<Command id = "MonoDevelop.PlayScript.ExpandCommands.ShrinkSelection"
+		         defaultHandler = "MonoDevelop.PlayScript.ShrinkSelectionHandler"
 		         shortcut = "Alt|Shift|Down"
 		         macShortcut = "Alt|Shift|Down"
 		         _label = "_Shrink selection"/>
-	</Extension>
+	</Extension -->
 
-	<Extension path = "/MonoDevelop/Refactoring/CodeGenerators">
+	<!-- Extension path = "/MonoDevelop/Refactoring/CodeGenerators">
 		<Class class = "MonoDevelop.CodeGeneration.CreateConstructorGenerator" />
 		<Class class = "MonoDevelop.CodeGeneration.ReadonlyPropertyGenerator" />
 		<Class class = "MonoDevelop.CodeGeneration.PropertyGenerator" />
@@ -239,33 +250,33 @@
 		<Class class = "MonoDevelop.CodeGeneration.RaiseEventMethodGenerator" />
 		<Class class = "MonoDevelop.CodeGeneration.EqualityMembersGenerator" />
 		<Class class = "MonoDevelop.CodeGeneration.WriteLineGenerator" />
-	</Extension>
-
-	<Extension path = "/MonoDevelop/Refactoring/CodeActionSource">
-		<Source class ="MonoDevelop.CSharp.Refactoring.CodeActions.NRefactoryCodeActionSource"/>
-	</Extension>
+	</Extension -->
 
-	<Extension path = "/MonoDevelop/Refactoring/CodeIssueSource">
-		<Source class ="MonoDevelop.CSharp.Refactoring.CodeIssues.NRefactoryCodeIssueSource"/>
-	</Extension>
-
-	<Extension path = "/MonoDevelop/ProjectModel/Gui/DefaultPolicyPanels/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
-	</Extension>
-	<Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
-	</Extension>
-	<Extension path = "/MonoDevelop/Ide/GlobalOptionsDialog/SourceCode">
-		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanel" />
-	</Extension>
+	<!-- Extension path = "/MonoDevelop/Refactoring/CodeActionSource">
+		<Source class ="MonoDevelop.PlayScript.Refactoring.CodeActions.NRefactoryCodeActionSource"/>
+	</Extension -->
+
+	<!-- Extension path = "/MonoDevelop/Refactoring/CodeIssueSource">
+		<Source class ="MonoDevelop.PlayScript.Refactoring.CodeIssues.NRefactoryCodeIssueSource"/>
+	</Extension -->
+
+	<!-- Extension path = "/MonoDevelop/ProjectModel/Gui/DefaultPolicyPanels/SourceCode">
+		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
+	</Extension -->
+	<!-- Extension path = "/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/SourceCode">
+		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
+	</Extension -->
+	<!-- Extension path = "/MonoDevelop/Ide/GlobalOptionsDialog/SourceCode">
+		<Section id="NameConventions" _label="Name Conventions" fill = "true" class="MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanel" />
+	</Extension -->
 
 	<Extension path = "/MonoDevelop/SourceEditor2/TooltipProviders">
 		<Class id="LanguageItem" class="MonoDevelop.SourceEditor.LanguageItemTooltipProvider" />
 	</Extension>
 
-	<Module>
+	<!-- Module>
 	    <Runtime>
-	        <Import assembly="MonoDevelop.CSharpBinding.Autotools.dll"/>
+	        <Import assembly="MonoDevelop.PlayScriptBinding.Autotools.dll"/>
 	    </Runtime>
 		<Dependencies>
 			<Addin id="Autotools" version="4.0.3"/>
@@ -273,9 +284,9 @@
 		<Extension path = "/MonoDevelop/Autotools/SimpleSetups">
 			<Class class="CSharpBinding.Autotools.CSharpAutotoolsSetup" />
 		</Extension>
-	</Module>
+	</Module -->
 
-	<Module>
+	<!-- Module>
 		<Runtime>
 			<Import assembly="MonoDevelop.CSharpBinding.AspNet.dll"/>
 		</Runtime>
@@ -289,5 +300,6 @@
 			<ReferenceFinder supportedmimetypes = "application/x-aspx,application/x-ascx,application/x-asax,application/x-ashx,application/x-asmx,application/x-asix"
 			                 class = "MonoDevelop.CSharp.Refactoring.ASPNetReferenceFinder" />
 		</Extension>
-	</Module>
+	</Module -->
+
 </Addin>
diff -rupN ../CSharpBinding/CSharpBinding.csproj ../PlayScriptBinding/CSharpBinding.csproj
--- ../CSharpBinding/CSharpBinding.csproj	2013-04-14 01:06:24.000000000 -0700
+++ ../PlayScriptBinding/CSharpBinding.csproj	2013-04-22 21:59:57.000000000 -0700
@@ -5,10 +5,10 @@
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
     <ProductVersion>9.0.21022</ProductVersion>
     <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{07CC7654-27D6-421D-A64C-0FFA40456FA2}</ProjectGuid>
+    <ProjectGuid>{6D8647C9-D479-46CD-A872-6999A8BF156C}</ProjectGuid>
     <OutputType>Library</OutputType>
-    <AssemblyName>MonoDevelop.CSharpBinding</AssemblyName>
-    <RootNamespace>CSharpBinding</RootNamespace>
+    <AssemblyName>MonoDevelop.PlayScriptBinding</AssemblyName>
+    <RootNamespace>PlayScriptBinding</RootNamespace>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>True</DebugSymbols>
@@ -91,16 +91,19 @@
       <Name>ICSharpCode.NRefactory</Name>
       <Private>False</Private>
     </ProjectReference>
-    <ProjectReference Include="..\..\..\external\nrefactory\ICSharpCode.NRefactory.CSharp\ICSharpCode.NRefactory.CSharp.csproj">
-      <Project>{53DCA265-3C3C-42F9-B647-F72BA678122B}</Project>
-      <Name>ICSharpCode.NRefactory.CSharp</Name>
-      <Private>False</Private>
-    </ProjectReference>
     <ProjectReference Include="..\..\..\external\mono-addins\Mono.Addins\Mono.Addins.csproj">
       <Project>{91DD5A2D-9FE3-4C3C-9253-876141874DAD}</Project>
       <Name>Mono.Addins</Name>
       <Private>False</Private>
     </ProjectReference>
+    <ProjectReference Include="..\ICSharpCode.NRefactory.PlayScript\ICSharpCode.NRefactory.PlayScript.csproj">
+      <Project>{6587E3E6-B14F-4924-B39D-512A78C4C1B2}</Project>
+      <Name>ICSharpCode.NRefactory.PlayScript</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\..\..\external\nrefactory\ICSharpCode.NRefactory.CSharp\ICSharpCode.NRefactory.CSharp.csproj">
+      <Project>{53DCA265-3C3C-42F9-B647-F72BA678122B}</Project>
+      <Name>ICSharpCode.NRefactory.CSharp</Name>
+    </ProjectReference>
   </ItemGroup>
   <ItemGroup>
     <Reference Include="System" />
@@ -131,32 +134,32 @@
     <Reference Include="Mono.Cairo" />
   </ItemGroup>
   <ItemGroup>
-    <EmbeddedResource Include="templates\ConsoleProject.xpt.xml">
-      <LogicalName>ConsoleProject.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsConsoleProject.xpt.xml">
+      <LogicalName>PsConsoleProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\EmptyCSharpFile.xft.xml">
-      <LogicalName>EmptyCSharpFile.xft.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyFile.xft.xml">
+      <LogicalName>PsEmptyFile.xft.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\EmptyProject.xpt.xml">
-      <LogicalName>EmptyProject.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsEmptyProject.xpt.xml">
+      <LogicalName>PsEmptyProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\GtkSharp2Project.xpt.xml">
-      <LogicalName>GtkSharp2Project.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\PsLibrary.xpt.xml">
+      <LogicalName>PsLibrary.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\Library.xpt.xml">
-      <LogicalName>Library.xpt.xml</LogicalName>
+    <EmbeddedResource Include="icons\PlayScript.FileIcon">
+      <LogicalName>PlayScript.FileIcon</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\C#.FileIcon">
-      <LogicalName>C#.FileIcon</LogicalName>
+    <EmbeddedResource Include="icons\ActionScript.FileIcon">
+      <LogicalName>ActionScript.FileIcon</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="CSharpBinding.addin.xml">
-      <LogicalName>CSharpBinding.addin.xml</LogicalName>
+    <EmbeddedResource Include="PlayScriptBinding.addin.xml">
+      <LogicalName>PlayScriptBinding.addin.xml</LogicalName>
     </EmbeddedResource>
     <EmbeddedResource Include="gtk-gui\gui.stetic">
       <LogicalName>gui.stetic</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\csharp-icon-32.png">
-      <LogicalName>csharp-icon-32.png</LogicalName>
+    <EmbeddedResource Include="icons\playscript-icon-32.png">
+      <LogicalName>playscript-icon-32.png</LogicalName>
     </EmbeddedResource>
     <EmbeddedResource Include="templates\AssemblyInfo.xft.xml">
       <LogicalName>AssemblyInfo.xft.xml</LogicalName>
@@ -164,8 +167,8 @@
     <EmbeddedResource Include="md1format.xml">
       <LogicalName>md1format.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\csharp-project-16.png">
-      <LogicalName>csharp-project-16.png</LogicalName>
+    <EmbeddedResource Include="icons\playscript-project-16.png">
+      <LogicalName>playscript-project-16.png</LogicalName>
     </EmbeddedResource>
     <EmbeddedResource Include="MonoDevelop.CSharp.Formatting\CSharpFormattingPolicy.xml">
       <LogicalName>CSharpFormattingPolicy.xml</LogicalName>
@@ -197,11 +200,23 @@
     <EmbeddedResource Include="MonoDevelop.CSharp.Refactoring.CodeIssues\NamingInspection\MonoNameConventionPolicy.xml">
       <LogicalName>MonoNameConventionPolicy.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="templates\PortableLibrary.xpt.xml">
-      <LogicalName>PortableLibrary.xpt.xml</LogicalName>
+    <EmbeddedResource Include="templates\AsConsoleProject.xpt.xml">
+      <LogicalName>AsConsoleProject.xpt.xml</LogicalName>
     </EmbeddedResource>
-    <EmbeddedResource Include="icons\ActionScript.FileIcon">
-      <LogicalName>ActionScript.FileIcon</LogicalName>
+    <EmbeddedResource Include="templates\AsEmptyFile.xft.xml">
+      <LogicalName>AsEmptyFile.xft.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="templates\PsEmptyClass.xft.xml">
+      <LogicalName>PsEmptyClass.xft.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="templates\PsEmptyInterface.xft.xml">
+      <LogicalName>PsEmptyInterface.xft.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="templates\AsEmptyClass.xft.xml">
+      <LogicalName>AsEmptyClass.xft.xml</LogicalName>
+    </EmbeddedResource>
+    <EmbeddedResource Include="templates\AsEmptyInterface.xft.xml">
+      <LogicalName>AsEmptyInterface.xft.xml</LogicalName>
     </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
@@ -296,6 +311,8 @@
     <Compile Include="MonoDevelop.CSharp\SignatureMarkupCreator.cs" />
     <Compile Include="MonoDevelop.CSharp.Completion\ArrayTypeParameterDataProvider.cs" />
     <Compile Include="MonoDevelop.CSharp.CodeGeneration\ImplementInterfaceMembersGenerator.cs" />
+    <Compile Include="MonoDevelop.CSharp\ActionScriptLanguageBinding.cs" />
+    <Compile Include="MonoDevelop.CSharp\PlayScriptLanguageBinding.cs" />
   </ItemGroup>
   <ItemGroup>
     <None Include="Makefile.am" />
diff -rupN ../CSharpBinding/Makefile.in ../PlayScriptBinding/Makefile.in
--- ../CSharpBinding/Makefile.in	2013-03-29 16:30:06.000000000 -0700
+++ ../PlayScriptBinding/Makefile.in	2013-04-20 20:00:51.000000000 -0700
@@ -50,7 +50,7 @@ PRE_UNINSTALL = :
 POST_UNINSTALL = :
 DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
 	$(top_srcdir)/xbuild.include ChangeLog
-subdir = src/addins/CSharpBinding
+subdir = src/addins/PlayScriptBinding
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/configure.in
 am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
@@ -291,7 +291,7 @@ TESTFILES = \
 TESTDLLS = \
 	$(NUNIT_LIBS)
 
-TESTASSEMBLY = $(top_builddir)/build/bin/CSharpBinding.Test.dll
+TESTASSEMBLY = $(top_builddir)/build/bin/PlayScriptBinding.Test.dll
 CLEANFILES = $(PARSE) $(PARSE).mdb
 all: all-recursive
 
@@ -305,9 +305,9 @@ $(srcdir)/Makefile.in: @MAINTAINER_MODE_
 	      exit 1;; \
 	  esac; \
 	done; \
-	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/addins/CSharpBinding/Makefile'; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/addins/PlayScriptBinding/Makefile'; \
 	$(am__cd) $(top_srcdir) && \
-	  $(AUTOMAKE) --foreign src/addins/CSharpBinding/Makefile
+	  $(AUTOMAKE) --foreign src/addins/PlayScriptBinding/Makefile
 .PRECIOUS: Makefile
 Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
 	@case '$?' in \
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs ../PlayScriptBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs
--- ../CSharpBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs	2013-04-22 22:23:26.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/ActionScriptLanguageBinding.cs	2013-04-20 11:32:02.000000000 -0700
@@ -40,43 +40,43 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
-	public class CSharpLanguageBinding : IDotNetLanguageBinding
+	public class ActionScriptLanguageBinding : IDotNetLanguageBinding
 	{
 		CSharpCodeProvider provider;
-		
+
 		// Keep the platforms combo of CodeGenerationPanelWidget in sync with this list
 		public static IList<string> SupportedPlatforms = new string[] { "anycpu", "x86", "x64", "itanium" };
-	
+
 		public string Language {
 			get {
-				return "C#";
+				return "ActionScript";
 			}
 		}
-		
+
 		public string ProjectStockIcon {
 			get { 
-				return "md-csharp-project";
+				return "md-playscript-project";
 			}
 		}
-		
-		
+
+
 		public bool IsSourceCodeFile (FilePath fileName)
 		{
-			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".cs");
+			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".as");
 		}
-		
+
 		public BuildResult Compile (ProjectItemCollection projectItems, DotNetProjectConfiguration configuration, ConfigurationSelector configSelector, IProgressMonitor monitor)
 		{
 			return CSharpBindingCompilerManager.Compile (projectItems, configuration, configSelector, monitor);
 		}
-		
+
 		public ConfigurationParameters CreateCompilationParameters (XmlElement projectOptions)
 		{
 			CSharpCompilerParameters pars = new CSharpCompilerParameters ();
@@ -93,41 +93,41 @@ namespace MonoDevelop.CSharp
 			}
 			return pars;
 		}
-	
+
 		public ProjectParameters CreateProjectParameters (XmlElement projectOptions)
 		{
 			return new CSharpProjectParameters ();
 		}
-		
+
 		public string SingleLineCommentTag { get { return "//"; } }
 		public string BlockCommentStartTag { get { return "/*"; } }
 		public string BlockCommentEndTag { get { return "*/"; } }
-		
+
 		public CodeDomProvider GetCodeDomProvider ()
 		{
 			if (provider == null)
 				provider = new CSharpEnhancedCodeProvider ();
 			return provider;
 		}
-		
+
 		public FilePath GetFileName (FilePath baseName)
 		{
-			return baseName + ".cs";
+			return baseName + ".as";
 		}
-		
-//		public IParser Parser {
-//			get { 
-//				return null; 
-//			}
-//		}
-//		
-//		CSharpRefactorer refactorer = new CSharpRefactorer ();
-//		public IRefactorer Refactorer {
-//			get { 
-//				return refactorer; 
-//			}
-//		}
-		
+
+		//		public IParser Parser {
+		//			get { 
+		//				return null; 
+		//			}
+		//		}
+		//		
+		//		CSharpRefactorer refactorer = new CSharpRefactorer ();
+		//		public IRefactorer Refactorer {
+		//			get { 
+		//				return refactorer; 
+		//			}
+		//		}
+
 		public ClrVersion[] GetSupportedClrVersions ()
 		{
 			return new ClrVersion[] { 
@@ -139,9 +139,5 @@ namespace MonoDevelop.CSharp
 			};
 		}
 	}
-	
-	internal static class Counters
-	{
-		public static Counter ResolveTime = InstrumentationService.CreateCounter ("Resolve Time", "Timing");
-	}
+
 }
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/AstAmbience.cs ../PlayScriptBinding/MonoDevelop.CSharp/AstAmbience.cs
--- ../CSharpBinding/MonoDevelop.CSharp/AstAmbience.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/AstAmbience.cs	2013-04-20 10:51:13.000000000 -0700
@@ -24,19 +24,19 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using System.Collections.Generic;
 using System.Linq;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class AstAmbience
 	{
 		CSharpFormattingOptions options;
 		
-		public AstAmbience (ICSharpCode.NRefactory.CSharp.CSharpFormattingOptions options)
+		public AstAmbience (ICSharpCode.NRefactory.PlayScript.CSharpFormattingOptions options)
 		{
 			this.options = options;
 		}
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/AstStockIcons.cs ../PlayScriptBinding/MonoDevelop.CSharp/AstStockIcons.cs
--- ../CSharpBinding/MonoDevelop.CSharp/AstStockIcons.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/AstStockIcons.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,9 +28,9 @@ using System;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	// Copied from StockIcons.cs and extended for the c# ast (c# AST shouldn't be in Ide)
 	public static class AstStockIcons
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/CSharpAmbience.cs ../PlayScriptBinding/MonoDevelop.CSharp/CSharpAmbience.cs
--- ../CSharpBinding/MonoDevelop.CSharp/CSharpAmbience.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/CSharpAmbience.cs	2013-04-20 15:20:20.000000000 -0700
@@ -28,18 +28,18 @@ using System.Linq;
 using System.Collections.Generic;
 using System.Text;
 using System.CodeDom;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide;
 using System.Collections.ObjectModel;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.IO;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class CSharpAmbience : Ambience
 	{
@@ -73,11 +73,13 @@ namespace MonoDevelop.CSharp
 			"fixed",
 			"float",
 			"for",
-			"foreach",
+			"function",
 			"goto",
 			"if",
 			"implicit",
+			"import",
 			"in",
+			"indexer",
 			"int",
 			"interface",
 			"internal",
@@ -93,6 +95,7 @@ namespace MonoDevelop.CSharp
 			"override",
 			"params",
 			"private",
+			"property",
 			"protected",
 			"public",
 			"readonly",
@@ -185,7 +188,7 @@ namespace MonoDevelop.CSharp
 			netToCSharpTypes ["System.Double"] = "double";
 			netToCSharpTypes ["System.Decimal"] = "decimal";
 			netToCSharpTypes ["System.String"] = "string";
-			
+
 			classTypes [TypeKind.Class] = "class";
 			classTypes [TypeKind.Enum] = "enum";
 			classTypes [TypeKind.Interface] = "interface";
@@ -193,7 +196,7 @@ namespace MonoDevelop.CSharp
 			classTypes [TypeKind.Delegate] = "delegate";
 		}
 		
-		public CSharpAmbience () : base ("C#")
+		public CSharpAmbience () : base ("PlayScript")
 		{
 		}
 		
@@ -203,11 +206,11 @@ namespace MonoDevelop.CSharp
 		{
 			if (entity == null)
 				throw new ArgumentNullException ("entity");
-			return MonoDevelop.CSharp.Completion.MemberCompletionData.CreateTooltipInformation (
+			return MonoDevelop.PlayScript.Completion.MemberCompletionData.CreateTooltipInformation (
 				entity.Compilation,
 				null,
 				null,
-				new CSharpFormattingPolicy (),
+				new PlayScriptFormattingPolicy (),
 				entity,
 				false,
 				true);
@@ -663,7 +666,7 @@ namespace MonoDevelop.CSharp
 			}
 			
 			if (settings.IncludeParameters) {
-//			CSharpFormattingPolicy policy = GetPolicy (settings);
+//			PlayScriptFormattingPolicy policy = GetPolicy (settings);
 //			if (policy.BeforeMethodCallParentheses)
 //				result.Append (settings.Markup (" "));
 				result.Append (settings.Markup ("("));
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs ../PlayScriptBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs
--- ../CSharpBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs	2013-04-14 01:11:14.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/CSharpBindingCompilerManager.cs	2013-04-20 10:47:18.000000000 -0700
@@ -35,13 +35,13 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Execution;
 using MonoDevelop.Core.Assemblies;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Threading;
 using MonoDevelop.Ide;
 using MonoDevelop.Core.ProgressMonitoring;
 
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	static class CSharpBindingCompilerManager
 	{	
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/CSharpEnhancedCodeProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -34,12 +34,12 @@ using System.IO;
 using System.CodeDom;
 using System.CodeDom.Compiler;
 using Microsoft.CSharp;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.Cecil;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	[System.ComponentModel.DesignerCategory ("Code")]
 	public class CSharpEnhancedCodeProvider : CSharpCodeProvider
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs ../PlayScriptBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs
--- ../CSharpBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs	2013-04-14 01:36:42.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/CSharpLanguageBinding.cs	2013-04-20 10:51:08.000000000 -0700
@@ -40,12 +40,12 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class CSharpLanguageBinding : IDotNetLanguageBinding
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs ../PlayScriptBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs
--- ../CSharpBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/ExpandSelectionHandler.cs	2013-04-20 10:54:14.000000000 -0700
@@ -24,12 +24,12 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Components.Commands;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public enum ExpandCommands
 	{
@@ -42,7 +42,7 @@ namespace MonoDevelop.CSharp
 		protected override void Run ()
 		{
 			MonoDevelop.Ide.Gui.Document doc = IdeApp.Workbench.ActiveDocument;
-			CSharpParser parser = new CSharpParser ();
+			PlayScriptParser parser = new PlayScriptParser ();
 			var unit = parser.Parse (doc.Editor);
 			if (unit == null)
 				return;
@@ -67,7 +67,7 @@ namespace MonoDevelop.CSharp
 		protected override void Run ()
 		{
 			MonoDevelop.Ide.Gui.Document doc = IdeApp.Workbench.ActiveDocument;
-			CSharpParser parser = new CSharpParser ();
+			PlayScriptParser parser = new PlayScriptParser ();
 			var unit = parser.Parse (doc.Editor);
 			if (unit == null)
 				return;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs ../PlayScriptBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs
--- ../CSharpBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/PathedDocumentTextEditorExtension.cs	2013-04-20 10:51:08.000000000 -0700
@@ -31,13 +31,13 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Core;
-using MonoDevelop.CSharp.Completion;
+using MonoDevelop.PlayScript.Completion;
 using System.Linq;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class PathedDocumentTextEditorExtension : TextEditorExtension, IPathedDocument
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs ../PlayScriptBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs
--- ../CSharpBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs	2013-04-22 22:23:26.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/PlayScriptLanguageBinding.cs	2013-04-20 11:31:58.000000000 -0700
@@ -40,43 +40,43 @@ using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Core.Instrumentation;
 
-using MonoDevelop.CSharp.Parser;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Parser;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Project;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
-	public class CSharpLanguageBinding : IDotNetLanguageBinding
+	public class PlayScriptLanguageBinding : IDotNetLanguageBinding
 	{
 		CSharpCodeProvider provider;
-		
+
 		// Keep the platforms combo of CodeGenerationPanelWidget in sync with this list
 		public static IList<string> SupportedPlatforms = new string[] { "anycpu", "x86", "x64", "itanium" };
-	
+
 		public string Language {
 			get {
-				return "C#";
+				return "PlayScript";
 			}
 		}
-		
+
 		public string ProjectStockIcon {
 			get { 
-				return "md-csharp-project";
+				return "md-playscript-project";
 			}
 		}
-		
-		
+
+
 		public bool IsSourceCodeFile (FilePath fileName)
 		{
-			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".cs");
+			return StringComparer.OrdinalIgnoreCase.Equals (Path.GetExtension (fileName), ".play");
 		}
-		
+
 		public BuildResult Compile (ProjectItemCollection projectItems, DotNetProjectConfiguration configuration, ConfigurationSelector configSelector, IProgressMonitor monitor)
 		{
 			return CSharpBindingCompilerManager.Compile (projectItems, configuration, configSelector, monitor);
 		}
-		
+
 		public ConfigurationParameters CreateCompilationParameters (XmlElement projectOptions)
 		{
 			CSharpCompilerParameters pars = new CSharpCompilerParameters ();
@@ -93,41 +93,41 @@ namespace MonoDevelop.CSharp
 			}
 			return pars;
 		}
-	
+
 		public ProjectParameters CreateProjectParameters (XmlElement projectOptions)
 		{
 			return new CSharpProjectParameters ();
 		}
-		
+
 		public string SingleLineCommentTag { get { return "//"; } }
 		public string BlockCommentStartTag { get { return "/*"; } }
 		public string BlockCommentEndTag { get { return "*/"; } }
-		
+
 		public CodeDomProvider GetCodeDomProvider ()
 		{
 			if (provider == null)
 				provider = new CSharpEnhancedCodeProvider ();
 			return provider;
 		}
-		
+
 		public FilePath GetFileName (FilePath baseName)
 		{
-			return baseName + ".cs";
+			return baseName + ".play";
 		}
-		
-//		public IParser Parser {
-//			get { 
-//				return null; 
-//			}
-//		}
-//		
-//		CSharpRefactorer refactorer = new CSharpRefactorer ();
-//		public IRefactorer Refactorer {
-//			get { 
-//				return refactorer; 
-//			}
-//		}
-		
+
+		//		public IParser Parser {
+		//			get { 
+		//				return null; 
+		//			}
+		//		}
+		//		
+		//		CSharpRefactorer refactorer = new CSharpRefactorer ();
+		//		public IRefactorer Refactorer {
+		//			get { 
+		//				return refactorer; 
+		//			}
+		//		}
+
 		public ClrVersion[] GetSupportedClrVersions ()
 		{
 			return new ClrVersion[] { 
@@ -139,9 +139,4 @@ namespace MonoDevelop.CSharp
 			};
 		}
 	}
-	
-	internal static class Counters
-	{
-		public static Counter ResolveTime = InstrumentationService.CreateCounter ("Resolve Time", "Timing");
-	}
 }
diff -rupN ../CSharpBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs ../PlayScriptBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs
--- ../CSharpBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp/SignatureMarkupCreator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -27,10 +27,10 @@ using System;
 using MonoDevelop.Ide.TypeSystem;
 using System.Text;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.IO;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 using System.Collections.Generic;
 using Mono.TextEditor.Highlighting;
@@ -41,7 +41,7 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Projects;
 using ICSharpCode.NRefactory.Semantics;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public class SignatureMarkupCreator
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/AbstractGenerateAction.cs	2013-04-20 10:51:08.000000000 -0700
@@ -29,7 +29,7 @@ using System.Linq;
 using System.Text;
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CodeGenerationOptions.cs	2013-04-20 12:45:54.000000000 -0700
@@ -28,11 +28,11 @@ using MonoDevelop.Ide.Gui;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System;
 using ICSharpCode.NRefactory;
 using System.Threading;
@@ -72,7 +72,7 @@ namespace MonoDevelop.CodeGeneration
 				var doc = Document;
 				var policyParent = doc.Project != null ? doc.Project.Policies : null;
 				var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (doc.Editor.MimeType);
-				var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+				var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 				return codePolicy.CreateOptions ();
 			}
 		}
@@ -139,7 +139,7 @@ namespace MonoDevelop.CodeGeneration
 			
 			var csResolver = parsedFile.GetResolver (Document.Compilation, Document.Editor.Caret.Location);
 			
-			var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+			var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 			return builder.ConvertType (fullType);
 		}
 		
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/CreateConstructorGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -26,7 +26,7 @@
 
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
 using ICSharpCode.NRefactory.TypeSystem;
@@ -102,7 +102,7 @@ namespace MonoDevelop.CodeGeneration
 			{
 				var constructorDeclaration = new ConstructorDeclaration () {
 					Name = Options.EnclosingType.Name,
-					Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public,
+					Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public,
 					Body = new BlockStatement ()
 				};
 				
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/EqualityMembersGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -26,7 +26,7 @@
 
 using Gtk;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
 using ICSharpCode.NRefactory.TypeSystem;
@@ -96,7 +96,7 @@ namespace MonoDevelop.CodeGeneration
 				methodDeclaration.Name = "Equals";
 
 				methodDeclaration.ReturnType = new PrimitiveType ("bool");
-				methodDeclaration.Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public | ICSharpCode.NRefactory.CSharp.Modifiers.Override;
+				methodDeclaration.Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public | ICSharpCode.NRefactory.PlayScript.Modifiers.Override;
 				methodDeclaration.Body = new BlockStatement ();
 				methodDeclaration.Parameters.Add (new ParameterDeclaration (new PrimitiveType ("object"), "obj"));
 				var paramId = new IdentifierExpression ("obj");
@@ -140,7 +140,7 @@ namespace MonoDevelop.CodeGeneration
 				methodDeclaration.Name = "GetHashCode";
 
 				methodDeclaration.ReturnType = new PrimitiveType ("int");
-				methodDeclaration.Modifiers = ICSharpCode.NRefactory.CSharp.Modifiers.Public | ICSharpCode.NRefactory.CSharp.Modifiers.Override;
+				methodDeclaration.Modifiers = ICSharpCode.NRefactory.PlayScript.Modifiers.Public | ICSharpCode.NRefactory.PlayScript.Modifiers.Override;
 				methodDeclaration.Body = new BlockStatement ();
 
 				binOp = null;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ImplementInterfaceMembersGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -27,7 +27,7 @@ using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System;
@@ -81,7 +81,7 @@ namespace MonoDevelop.CodeGeneration
 				foreach (var baseType in Options.EnclosingType.DirectBaseTypes) {
 					if (baseType.Kind != TypeKind.Interface)
 						continue;
-					foreach (var t in ICSharpCode.NRefactory.CSharp.Refactoring.ImplementInterfaceAction.CollectMembersToImplement (type, baseType, false)) {
+					foreach (var t in ICSharpCode.NRefactory.PlayScript.Refactoring.ImplementInterfaceAction.CollectMembersToImplement (type, baseType, false)) {
 						yield return t;
 					}
 				}
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/OverrideMembersGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,7 +28,7 @@ using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs	2013-03-14 23:28:11.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/PropertyGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -26,7 +26,7 @@
 
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/RaiseEventMethodGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ReadonlyPropertyGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using Gtk;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/ToStringGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -29,7 +29,7 @@ using MonoDevelop.Components;
 using Gtk;
 using MonoDevelop.Ide.Gui;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.CodeGeneration/WriteLineGenerator.cs	2013-04-20 10:51:08.000000000 -0700
@@ -29,7 +29,7 @@ using MonoDevelop.Components;
 using Gtk;
 using MonoDevelop.Ide.Gui;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/AbstractParameterDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -33,12 +33,12 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.CodeCompletion;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	abstract class AbstractParameterDataProvider : ParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/ArrayTypeParameterDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,29 +25,29 @@
 // THE SOFTWARE.
 using System;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.CodeCompletion;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Linq;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Text;
 using MonoDevelop.Ide.CodeTemplates;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp.Completion;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class ArrayTypeParameterDataProvider : AbstractParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/CSharpCompletionTextEditorExtension.cs	2013-04-20 12:51:09.000000000 -0700
@@ -26,31 +26,31 @@
 
 using System;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.CodeCompletion;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using System.Linq;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Text;
 using MonoDevelop.Ide.CodeTemplates;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp.Completion;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using Mono.TextEditor;
 using MonoDevelop.Components.Commands;
 using MonoDevelop.CodeGeneration;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	
 	public class CSharpCompletionTextEditorExtension : CompletionTextEditorExtension, IParameterCompletionDataFactory, ITextEditorMemberPositionProvider
@@ -109,15 +109,15 @@ namespace MonoDevelop.CSharp.Completion
 			}
 		}
 		
-		CSharpFormattingPolicy policy;
-		public CSharpFormattingPolicy FormattingPolicy {
+		PlayScriptFormattingPolicy policy;
+		public PlayScriptFormattingPolicy FormattingPolicy {
 			get {
 				if (policy == null) {
 					IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
 					if (Document.Project != null && Document.Project.Policies != null) {
-						policy = base.Document.Project.Policies.Get<CSharpFormattingPolicy> (types);
+						policy = base.Document.Project.Policies.Get<PlayScriptFormattingPolicy> (types);
 					} else {
-						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 					}
 				}
 				return policy;
@@ -555,7 +555,7 @@ namespace MonoDevelop.CSharp.Completion
 			if (i == cursor) 
 				return 1; // parameters are 1 based
 			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
-			var engine = new CSharpIndentEngine (MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types));
+			var engine = new CSharpIndentEngine (MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types));
 			int index = memberStart + 1;
 			int parentheses = 0;
 			int bracket = 0;
@@ -848,7 +848,7 @@ namespace MonoDevelop.CSharp.Completion
 			IEnumerable<ICompletionData> ICompletionDataFactory.CreateCodeTemplateCompletionData ()
 			{
 				var result = new CompletionDataList ();
-				CodeTemplateService.AddCompletionDataForMime ("text/x-csharp", result);
+				CodeTemplateService.AddCompletionDataForMime ("text/x-playscript", result);
 				return result;
 			}
 			
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/ConstructorParameterDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -26,13 +26,13 @@
 using System;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using ICSharpCode.NRefactory.Completion;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class ConstructorParameterDataProvider : MethodParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/DelegateDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -31,20 +31,20 @@ using System.Xml;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class DelegateDataProvider : AbstractParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/EventCreationCompletionData.cs	2013-04-20 10:47:18.000000000 -0700
@@ -30,13 +30,13 @@ using System.Linq;
 using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	public class EventCreationCompletionData : CompletionData
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/IndexerParameterDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -32,18 +32,18 @@ using System.Xml;
 
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class IndexerParameterDataProvider : AbstractParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/MemberCompletionData.cs	2013-04-20 12:45:54.000000000 -0700
@@ -34,19 +34,19 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Projects;
 using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.Documentation;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.IO;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	public class MemberCompletionData : CompletionData, IEntityCompletionData
 	{
@@ -66,7 +66,7 @@ namespace MonoDevelop.CSharp.Completion
 			}
 		}
 		
-		MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy Policy {
+		MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy Policy {
 			get {
 				return editorCompletion.FormattingPolicy;
 			}
@@ -537,12 +537,12 @@ namespace MonoDevelop.CSharp.Completion
 			return CreateTooltipInformation (editorCompletion.UnresolvedFileCompilation, editorCompletion.CSharpUnresolvedFile, resolver, editorCompletion.TextEditorData, editorCompletion.FormattingPolicy, entity, smartWrap);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
 		{
 			return CreateTooltipInformation (compilation, file, null, textEditorData, formattingPolicy, entity, smartWrap, createFooter);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, CSharpResolver resolver, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, CSharpResolver resolver, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IEntity entity, bool smartWrap, bool createFooter = false)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			if (resolver == null)
@@ -598,7 +598,7 @@ namespace MonoDevelop.CSharp.Completion
 			return tooltipInfo;
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IType type, bool smartWrap, bool createFooter = false)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IType type, bool smartWrap, bool createFooter = false)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			var resolver = file != null ? file.GetResolver (compilation, textEditorData.Caret.Location) : new CSharpResolver (compilation);
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/MethodParameterDataProvider.cs	2013-04-20 12:45:54.000000000 -0700
@@ -34,14 +34,14 @@ using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using MonoDevelop.Ide.CodeCompletion;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	class MethodParameterDataProvider : AbstractParameterDataProvider
 	{
@@ -121,7 +121,7 @@ namespace MonoDevelop.CSharp.Completion
 			return CreateTooltipInformation (compilation, file, ext.TextEditorData, ext.FormattingPolicy, entity, currentParameter, smartWrap);
 		}
 
-		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy formattingPolicy, IParameterizedMember entity, int currentParameter, bool smartWrap)
+		public static TooltipInformation CreateTooltipInformation (ICompilation compilation, CSharpUnresolvedFile file, TextEditorData textEditorData, MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy formattingPolicy, IParameterizedMember entity, int currentParameter, bool smartWrap)
 		{
 			var tooltipInfo = new TooltipInformation ();
 			var resolver = file.GetResolver (compilation, textEditorData.Caret.Location);
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/NewOverrideCompletionData.cs	2013-04-20 10:51:08.000000000 -0700
@@ -31,12 +31,12 @@ using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.Gui.Content;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	public class NewOverrideCompletionData : CompletionData
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/TemplateParameterDataProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/TemplateParameterDataProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/TemplateParameterDataProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/TemplateParameterDataProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -31,18 +31,18 @@ using System.Xml;
 using MonoDevelop.Core;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using System.Text.RegularExpressions;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
 using Mono.TextEditor;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	public class TemplateParameterDataProvider: IParameterDataProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs ../PlayScriptBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Completion/VariableCompletionData.cs	2013-04-20 10:47:18.000000000 -0700
@@ -29,7 +29,7 @@ using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Completion
+namespace MonoDevelop.PlayScript.Completion
 {
 	public class VariableCompletionData : CompletionData, IVariableCompletionData
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormatter.cs	2013-04-20 12:51:09.000000000 -0700
@@ -28,20 +28,20 @@ using System.Collections.Generic;
 
 
 using Mono.TextEditor;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects.Policies;
 using System.Linq;
 using MonoDevelop.Ide.CodeFormatting;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Core;
-using MonoDevelop.CSharp.Refactoring;
+using MonoDevelop.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class CSharpFormatter : AbstractAdvancedFormatter
 	{
-		static internal readonly string MimeType = "text/x-csharp";
+		static internal readonly string MimeType = "text/x-playscript";
 
 		public override bool SupportsOnTheFlyFormatting { get { return true; } }
 
@@ -54,7 +54,7 @@ namespace MonoDevelop.CSharp.Formatting
 			if (lineSegment == null)
 				return;
 
-			var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+			var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 			var textPolicy = policyParent.Get<TextStylePolicy> (mimeTypeChain);
 			var tracker = new DocumentStateTracker<CSharpIndentEngine> (new CSharpIndentEngine (policy, textPolicy), data);
 			tracker.UpdateEngine (lineSegment.Offset);
@@ -80,7 +80,7 @@ namespace MonoDevelop.CSharp.Formatting
 		}
 
 
-		public string FormatText (CSharpFormattingPolicy policy, TextStylePolicy textPolicy, string mimeType, string input, int startOffset, int endOffset)
+		public string FormatText (PlayScriptFormattingPolicy policy, TextStylePolicy textPolicy, string mimeType, string input, int startOffset, int endOffset)
 		{
 			var data = new TextEditorData ();
 			data.Document.SuppressHighlightUpdate = true;
@@ -98,7 +98,7 @@ namespace MonoDevelop.CSharp.Formatting
 			// System.Console.WriteLine (data.Text.Replace (" ", ".").Replace ("\t", "->"));
 			// System.Console.WriteLine ("-----");
 
-			var parser = new CSharpParser ();
+			var parser = new PlayScriptParser ();
 			var compilationUnit = parser.Parse (data);
 			bool hadErrors = parser.HasErrors;
 			
@@ -128,7 +128,7 @@ namespace MonoDevelop.CSharp.Formatting
 			}
 
 			// check if the formatter has produced errors
-			parser = new CSharpParser ();
+			parser = new PlayScriptParser ();
 			parser.Parse (data);
 			if (parser.HasErrors) {
 				LoggingService.LogError ("C# formatter produced source code errors. See console for output.");
@@ -144,7 +144,7 @@ namespace MonoDevelop.CSharp.Formatting
 
 		public override string FormatText (PolicyContainer policyParent, IEnumerable<string> mimeTypeChain, string input, int startOffset, int endOffset)
 		{
-			var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+			var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 			var textPolicy = policyParent.Get<TextStylePolicy> (mimeTypeChain);
 
 			return FormatText (policy, textPolicy, mimeTypeChain.First (), input, startOffset, endOffset);
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs	2013-03-14 23:28:11.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicy.cs	2013-04-20 12:52:00.000000000 -0700
@@ -1,5 +1,5 @@
 // 
-// CSharpFormattingPolicy.cs
+// PlayScriptFormattingPolicy.cs
 //  
 // Author:
 //       Mike Kr端ger <mkrueger@novell.com>
@@ -32,12 +32,12 @@ using System.Xml;
 using System.Text;
 using System.Linq;
 using MonoDevelop.Projects.Policies;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
-	[PolicyType ("C# formatting")]
-	public class CSharpFormattingPolicy : IEquatable<CSharpFormattingPolicy>
+	[PolicyType ("PlayScript formatting")]
+	public class PlayScriptFormattingPolicy : IEquatable<PlayScriptFormattingPolicy>
 	{
 		CSharpFormattingOptions options = FormattingOptionsFactory.CreateMono ();
 		
@@ -51,9 +51,9 @@ namespace MonoDevelop.CSharp.Formatting
 			set;
 		}
 		
-		public CSharpFormattingPolicy Clone ()
+		public PlayScriptFormattingPolicy Clone ()
 		{
-			return new CSharpFormattingPolicy (options.Clone ());
+			return new PlayScriptFormattingPolicy (options.Clone ());
 		}
 
 		public CSharpFormattingOptions CreateOptions ()
@@ -61,12 +61,12 @@ namespace MonoDevelop.CSharp.Formatting
 			return options;
 		}
 		
-		static CSharpFormattingPolicy ()
+		static PlayScriptFormattingPolicy ()
 		{
-			PolicyService.InvariantPolicies.Set<CSharpFormattingPolicy> (new CSharpFormattingPolicy (), "text/x-csharp");
+			PolicyService.InvariantPolicies.Set<PlayScriptFormattingPolicy> (new PlayScriptFormattingPolicy (), "text/x-playscript");
 		}
 		
-		protected CSharpFormattingPolicy (CSharpFormattingOptions options)
+		protected PlayScriptFormattingPolicy (CSharpFormattingOptions options)
 		{
 			this.options = options;
 		}
@@ -1439,27 +1439,27 @@ namespace MonoDevelop.CSharp.Formatting
 		}
 		#endregion
 		
-		public CSharpFormattingPolicy ()
+		public PlayScriptFormattingPolicy ()
 		{
 			this.options = FormattingOptionsFactory.CreateMono ();
 		}
 		
-		public static CSharpFormattingPolicy Load (FilePath selectedFile)
+		public static PlayScriptFormattingPolicy Load (FilePath selectedFile)
 		{
 			using (var stream = System.IO.File.OpenRead (selectedFile)) {
 				return Load (stream);
 			}
 		}
 		
-		public static CSharpFormattingPolicy Load (System.IO.Stream input)
+		public static PlayScriptFormattingPolicy Load (System.IO.Stream input)
 		{
-			CSharpFormattingPolicy result = new CSharpFormattingPolicy ();
+			PlayScriptFormattingPolicy result = new PlayScriptFormattingPolicy ();
 			result.Name = "noname";
 			using (XmlTextReader reader = new XmlTextReader (input)) {
 				while (reader.Read ()) {
 					if (reader.NodeType == XmlNodeType.Element) {
 						if (reader.LocalName == "Property") {
-							var info = typeof (CSharpFormattingPolicy).GetProperty (reader.GetAttribute ("name"));
+							var info = typeof (PlayScriptFormattingPolicy).GetProperty (reader.GetAttribute ("name"));
 							string valString = reader.GetAttribute ("value");
 							object value;
 							if (info.PropertyType == typeof (bool)) {
@@ -1490,7 +1490,7 @@ namespace MonoDevelop.CSharp.Formatting
 				writer.IndentChar = '\t';
 				writer.WriteStartElement ("FormattingProfile");
 				writer.WriteAttributeString ("name", Name);
-				foreach (PropertyInfo info in typeof (CSharpFormattingPolicy).GetProperties ()) {
+				foreach (PropertyInfo info in typeof (PlayScriptFormattingPolicy).GetProperties ()) {
 					if (info.GetCustomAttributes (false).Any (o => o.GetType () == typeof(ItemPropertyAttribute))) {
 						writer.WriteStartElement ("Property");
 						writer.WriteAttributeString ("name", info.Name);
@@ -1502,9 +1502,9 @@ namespace MonoDevelop.CSharp.Formatting
 			}
 		}
 		
-		public bool Equals (CSharpFormattingPolicy other)
+		public bool Equals (PlayScriptFormattingPolicy other)
 		{
-			foreach (PropertyInfo info in typeof (CSharpFormattingPolicy).GetProperties ()) {
+			foreach (PropertyInfo info in typeof (PlayScriptFormattingPolicy).GetProperties ()) {
 				if (info.GetCustomAttributes (false).Any (o => o.GetType () == typeof(ItemPropertyAttribute))) {
 					object val = info.GetValue (this, null);
 					object otherVal = info.GetValue (other, null);
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanel.cs	2013-04-20 12:45:54.000000000 -0700
@@ -31,9 +31,9 @@ using System.Xml;
 using MonoDevelop.Ide.Gui.Dialogs;
 using System;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
-	class CSharpFormattingPolicyPanel : MimeTypePolicyOptionsPanel<CSharpFormattingPolicy>
+	class CSharpFormattingPolicyPanel : MimeTypePolicyOptionsPanel<PlayScriptFormattingPolicy>
 	{
 		CSharpFormattingPolicyPanelWidget panel;
 		
@@ -48,12 +48,12 @@ namespace MonoDevelop.CSharp.Formatting
 			return panel = new CSharpFormattingPolicyPanelWidget ();
 		}
 		
-		protected override void LoadFrom (CSharpFormattingPolicy policy)
+		protected override void LoadFrom (PlayScriptFormattingPolicy policy)
 		{
 			panel.Policy = policy.Clone ();
 		}
 		
-		protected override CSharpFormattingPolicy GetPolicy ()
+		protected override PlayScriptFormattingPolicy GetPolicy ()
 		{
 			// return cloned policy
 			return panel.Policy;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingPolicyPanelWidget.cs	2013-04-20 12:45:54.000000000 -0700
@@ -29,14 +29,14 @@ using MonoDevelop.Core;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 using MonoDevelop.Ide.CodeFormatting;
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	[System.ComponentModel.ToolboxItem(true)]
 	public partial class CSharpFormattingPolicyPanelWidget : Gtk.Bin
 	{
 		Mono.TextEditor.TextEditor texteditor = new Mono.TextEditor.TextEditor ();
 //		Gtk.ListStore model = new Gtk.ListStore (typeof(string));
-//		List<CSharpFormattingPolicy> policies = new List<CSharpFormattingPolicy> ();
+//		List<PlayScriptFormattingPolicy> policies = new List<PlayScriptFormattingPolicy> ();
 		const string example = @"using System;
 namespace Example { 
 	public class Test
@@ -49,8 +49,8 @@ namespace Example { 
 		}
 	}
 }";
-		CSharpFormattingPolicy policy;
-		public CSharpFormattingPolicy Policy {
+		PlayScriptFormattingPolicy policy;
+		public PlayScriptFormattingPolicy Policy {
 			get {
 				return policy;
 			}
@@ -63,7 +63,7 @@ namespace Example { 
 		public CSharpFormattingPolicyPanelWidget ()
 		{
 			this.Build ();
-			policy = new CSharpFormattingPolicy ();
+			policy = new PlayScriptFormattingPolicy ();
 			buttonEdit.Clicked += HandleButtonEditClicked;
 			
 			var options = MonoDevelop.SourceEditor.DefaultSourceEditorOptions.Instance;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProfileDialog.cs	2013-04-20 12:45:54.000000000 -0700
@@ -30,13 +30,13 @@ using MonoDevelop.Ide;
 using System.Reflection;
 using System.Collections.Generic;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp;
-namespace MonoDevelop.CSharp.Formatting
+using ICSharpCode.NRefactory.PlayScript;
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpFormattingProfileDialog : Gtk.Dialog
 	{
 		Mono.TextEditor.TextEditor texteditor = new Mono.TextEditor.TextEditor ();
-		CSharpFormattingPolicy profile;
+		PlayScriptFormattingPolicy profile;
 		Gtk.TreeStore indentOptions, bacePositionOptions, newLineOptions, whiteSpaceOptions;
 		
 		static Dictionary<Wrapping, string> arrayInitializerTranslationDictionary = new Dictionary<Wrapping, string> ();
@@ -353,7 +353,7 @@ namespace TestSpace {
 		protected ListStore comboBoxStore = new ListStore (typeof (string), typeof (string));
 		
 		
-		public CSharpFormattingProfileDialog (CSharpFormattingPolicy profile)
+		public CSharpFormattingProfileDialog (PlayScriptFormattingPolicy profile)
 		{
 			this.Build ();
 			this.profile = profile;
@@ -988,7 +988,7 @@ delegate void BarFoo ();
 		
 		static PropertyInfo GetPropertyByName (string name)
 		{
-			PropertyInfo info = typeof(CSharpFormattingPolicy).GetProperty (name);
+			PropertyInfo info = typeof(PlayScriptFormattingPolicy).GetProperty (name);
 			if (info == null)
 				throw new Exception (name + " property not found");
 			return info;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpFormattingProperties.cs	2013-04-20 10:47:17.000000000 -0700
@@ -29,7 +29,7 @@ using System;
 
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public enum GotoLabelIndentStyle {
 		// Place goto labels in the leftmost column
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngine.cs	2013-04-20 12:45:54.000000000 -0700
@@ -31,10 +31,10 @@ using System.Text;
 
 using MonoDevelop.Ide.Gui.Content;
 
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpIndentEngine : ICloneable, IDocumentStateEngine {
 		IndentStack stack;
@@ -73,11 +73,11 @@ namespace MonoDevelop.CSharp.Formatting
 		
 		int curLineNr;
 		int cursor;
-		CSharpFormattingPolicy policy;
+		PlayScriptFormattingPolicy policy;
 		TextStylePolicy textPolicy;
 		// Constructors
 
-		public CSharpIndentEngine (CSharpFormattingPolicy policy, TextStylePolicy textPolicy)
+		public CSharpIndentEngine (PlayScriptFormattingPolicy policy, TextStylePolicy textPolicy)
 		{
 			if (policy == null)
 				throw new ArgumentNullException ("policy");
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentEngineStack.cs	2013-04-20 10:47:18.000000000 -0700
@@ -28,11 +28,11 @@
 using System;
 using System.Text;
 
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpIndentEngine : ICloneable {
 		public enum Inside {
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpIndentVirtualSpaceManager.cs	2013-04-20 10:51:08.000000000 -0700
@@ -35,17 +35,17 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects;
 using MonoDevelop.Ide.CodeCompletion;
 
-using MonoDevelop.CSharp.Formatting;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Formatting;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
 using MonoDevelop.Ide.CodeTemplates;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	class IndentVirtualSpaceManager : Mono.TextEditor.IIndentationTracker
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/CSharpTextEditorIndentation.cs	2013-04-20 12:45:54.000000000 -0700
@@ -33,15 +33,15 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Projects;
 using MonoDevelop.Ide.CodeCompletion;
 
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using Mono.TextEditor;
 using MonoDevelop.Ide.CodeTemplates;
 using MonoDevelop.SourceEditor;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 using ICSharpCode.NRefactory.Editor;
 using System.Linq;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class CSharpTextEditorIndentation : TextEditorExtension
 	{
@@ -55,12 +55,12 @@ namespace MonoDevelop.CSharp.Formatting
 
 		IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
 
-		CSharpFormattingPolicy Policy {
+		PlayScriptFormattingPolicy Policy {
 			get {
 				if (Document != null && Document.Project != null && Document.Project.Policies != null) {
-					return base.Document.Project.Policies.Get<CSharpFormattingPolicy> (types);
+					return base.Document.Project.Policies.Get<PlayScriptFormattingPolicy> (types);
 				}
-				return MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+				return MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 			}
 		}
 
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/Indent.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/Indent.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/Indent.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/Indent.cs	2013-04-20 10:47:18.000000000 -0700
@@ -25,7 +25,7 @@
 // THE SOFTWARE.
 using System;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class Indent
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/NewFormattingProfileDialog.cs	2013-04-20 12:45:54.000000000 -0700
@@ -27,7 +27,7 @@ using System;
 using System.Collections.Generic;
 using System.Linq;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class NewFormattingProfileDialog  : Gtk.Dialog
 	{
@@ -37,14 +37,14 @@ namespace MonoDevelop.CSharp.Formatting
 		}
 		
 		
-		public CSharpFormattingPolicy InitializeFrom {
+		public PlayScriptFormattingPolicy InitializeFrom {
 			get {
 				return policies[comboboxInitFrom.Active];
 			}
 		}
 		
-		List<CSharpFormattingPolicy> policies;
-		public NewFormattingProfileDialog (List<CSharpFormattingPolicy> policies)
+		List<PlayScriptFormattingPolicy> policies;
+		public NewFormattingProfileDialog (List<PlayScriptFormattingPolicy> policies)
 		{
 			this.Build ();
 			this.policies = policies;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/OnTheFlyFormatter.cs	2013-04-20 12:51:09.000000000 -0700
@@ -28,18 +28,18 @@ using MonoDevelop.Ide;
 using System;
 using System.Collections.Generic;
 using MonoDevelop.Projects.Policies;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using MonoDevelop.CSharp.Completion;
-using MonoDevelop.CSharp.Refactoring;
-using MonoDevelop.CSharp.Parser;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using MonoDevelop.PlayScript.Completion;
+using MonoDevelop.PlayScript.Refactoring;
+using MonoDevelop.PlayScript.Parser;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Completion;
+using ICSharpCode.NRefactory.PlayScript.Completion;
 
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public class OnTheFlyFormatter
 	{
@@ -150,7 +150,7 @@ namespace MonoDevelop.CSharp.Formatting
 		{
 			using (var stubData = TextEditorData.CreateImmutable (input)) {
 				stubData.Document.FileName = document.FileName;
-				var parser = document.HasProject ? new CSharpParser (TypeSystemParser.GetCompilerArguments (document.Project)) : new CSharpParser ();
+				var parser = document.HasProject ? new PlayScriptParser (TypeSystemParser.GetCompilerArguments (document.Project)) : new PlayScriptParser ();
 				var compilationUnit = parser.Parse (stubData);
 				bool hadErrors = parser.HasErrors;
 				if (hadErrors) {
@@ -164,7 +164,7 @@ namespace MonoDevelop.CSharp.Formatting
 					return null;
 				}
 				
-				var policy = policyParent.Get<CSharpFormattingPolicy> (mimeTypeChain);
+				var policy = policyParent.Get<PlayScriptFormattingPolicy> (mimeTypeChain);
 				
 				var formattingVisitor = new AstFormattingVisitor (policy.CreateOptions (), stubData.Document, document.Editor.CreateNRefactoryTextEditorOptions ()) {
 					HadErrors = hadErrors,
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/AllmanCSharpPolicy.xml	2013-04-20 12:51:09.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -161,4 +161,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/GNUCSharpPolicy.xml	2013-04-20 12:47:26.000000000 -0700
@@ -27,7 +27,7 @@ THE SOFTWARE.
 -->
 
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -162,4 +162,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/KRCSharpPolicy.xml	2013-04-20 12:51:09.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -161,4 +161,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/MonoCSharpPolicy.xml	2013-04-20 12:51:09.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="True">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="True">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -161,4 +161,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/SharpDevelopCSharpPolicy.xml	2013-04-20 12:51:09.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -161,4 +161,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml
--- ../CSharpBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Formatting/policies/WhitesmithsCSharpPolicy.xml	2013-04-20 12:51:09.000000000 -0700
@@ -26,7 +26,7 @@ OUT OF OR IN CONNECTION WITH THE SOFTWAR
 THE SOFTWARE.
 -->
 
-<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="False">
+<PlayScriptFormattingPolicy scope="text/x-playscript" allowDiffSerialize="False">
 	<IndentNamespaceBody>True</IndentNamespaceBody>
 	<IndentClassBody>True</IndentClassBody>
 	<IndentInterfaceBody>True</IndentInterfaceBody>
@@ -161,4 +161,4 @@ THE SOFTWARE.
 	<BlankLinesBetweenFields>0</BlankLinesBetweenFields>
 	<BlankLinesBetweenEventFields>0</BlankLinesBetweenEventFields>
 	<BlankLinesBetweenMembers>1</BlankLinesBetweenMembers>
-</CSharpFormattingPolicy>
\ No newline at end of file
+</PlayScriptFormattingPolicy>
\ No newline at end of file
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSelectionSurroundingProvider.cs	2013-04-20 10:47:18.000000000 -0700
@@ -26,7 +26,7 @@
 using System;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public class CSharpSelectionSurroundingProvider : DefaultSelectionSurroundingProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/CSharpSyntaxMode.cs	2013-04-20 15:08:19.000000000 -0700
@@ -33,25 +33,25 @@ using Mono.TextEditor.Highlighting;
 using Mono.TextEditor;
 using System.Xml;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide;
 using MonoDevelop.Ide.Tasks;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.SourceEditor.QuickTasks;
 using System.Threading;
 using System.Diagnostics;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp.Analysis;
+using ICSharpCode.NRefactory.PlayScript.Analysis;
 using ICSharpCode.NRefactory;
 
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	static class StringHelper
 	{
@@ -283,7 +283,7 @@ namespace MonoDevelop.CSharp.Highlightin
 				base.VisitIdentifierExpression (identifierExpression);
 				var result = resolver.Resolve (identifierExpression, cancellationToken);
 				if (result.IsError) {
-					QuickTasks.Add (new QuickTask (string.Format ("error CS0103: The name `{0}' does not exist in the current context", identifierExpression.Identifier), identifierExpression.StartLocation, Severity.Error));
+					QuickTasks.Add (new QuickTask (string.Format ("error CS0103: The name `{0}' does not exist in the current context", identifierExpression.Identifier), identifierExpression.StartLocation, ICSharpCode.NRefactory.CSharp.Severity.Error));
 				}
 			}
 
@@ -292,11 +292,11 @@ namespace MonoDevelop.CSharp.Highlightin
 				base.VisitMemberReferenceExpression (memberReferenceExpression);
 				var result = resolver.Resolve (memberReferenceExpression, cancellationToken) as UnknownMemberResolveResult;
 				if (result != null && result.TargetType.Kind != TypeKind.Unknown) {
-					QuickTasks.Add (new QuickTask (string.Format ("error CS0117: `{0}' does not contain a definition for `{1}'", result.TargetType.FullName, memberReferenceExpression.MemberName), memberReferenceExpression.MemberNameToken.StartLocation, Severity.Error));
+					QuickTasks.Add (new QuickTask (string.Format ("error CS0117: `{0}' does not contain a definition for `{1}'", result.TargetType.FullName, memberReferenceExpression.MemberName), memberReferenceExpression.MemberNameToken.StartLocation, ICSharpCode.NRefactory.CSharp.Severity.Error));
 				}
 			}
 
-			public override void VisitComment (ICSharpCode.NRefactory.CSharp.Comment comment)
+			public override void VisitComment (ICSharpCode.NRefactory.PlayScript.Comment comment)
 			{
 			}
 		}
@@ -397,7 +397,7 @@ namespace MonoDevelop.CSharp.Highlightin
 			bool loadRules = _rules == null;
 
 			if (loadRules) {
-				var provider = new ResourceStreamProvider (typeof(ResourceStreamProvider).Assembly, typeof(ResourceStreamProvider).Assembly.GetManifestResourceNames ().First (s => s.Contains ("CSharpSyntaxMode")));
+				var provider = new ResourceStreamProvider (typeof(ResourceStreamProvider).Assembly, typeof(ResourceStreamProvider).Assembly.GetManifestResourceNames ().First (s => s.Contains ("PlayScriptSyntaxMode")));
 				using (var reader = provider.Open ()) {
 					SyntaxMode baseMode = SyntaxMode.Read (reader);
 					_rules = new List<Rule> (baseMode.Rules.Where (r => r.Name != "Comment"));
@@ -852,7 +852,7 @@ namespace MonoDevelop.CSharp.Highlightin
 
 				int length = end - textOffset;
 				string parameter = CurText.Substring (textOffset + 3, length - 3);
-				AstNode expr = new CSharpParser ().ParseExpression (parameter);
+				AstNode expr = new PlayScriptParser ().ParseExpression (parameter);
 				bool result = false;
 				if (expr != null && !expr.IsNull) {
 					object o = expr.AcceptVisitor (new ConditinalExpressionEvaluator (doc, Defines), null);
@@ -894,7 +894,7 @@ namespace MonoDevelop.CSharp.Highlightin
 				DocumentLine line = doc.GetLineByOffset (i);
 				int length = line.Offset + line.Length - i;
 				string parameter = doc.GetTextAt (i + 5, length - 5);
-				AstNode expr= new CSharpParser ().ParseExpression (parameter);
+				AstNode expr= new PlayScriptParser ().ParseExpression (parameter);
 				bool result;
 				if (expr != null && !expr.IsNull) {
 					var visitResult = expr.AcceptVisitor (new ConditinalExpressionEvaluator (doc, Defines), null);
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/HighlightUsagesExtension.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,20 +28,20 @@ using MonoDevelop.Ide.Gui.Content;
 using Mono.TextEditor;
 using System.Collections.Generic;
 using Gdk;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Projects.Text;
 using System.Linq;
 using MonoDevelop.Core;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using MonoDevelop.Ide.FindInFiles;
 using MonoDevelop.SourceEditor;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.SourceEditor.QuickTasks;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public class HighlightUsagesExtension : TextEditorExtension, IUsageProvider
 	{
@@ -194,7 +194,7 @@ namespace MonoDevelop.CSharp.Highlightin
 		static readonly List<MemberReference> emptyList = new List<MemberReference> ();
 		IEnumerable<MemberReference> GetReferences (ResolveResult resolveResult)
 		{
-			var finder = new MonoDevelop.CSharp.Refactoring.CSharpReferenceFinder ();
+			var finder = new MonoDevelop.PlayScript.Refactoring.CSharpReferenceFinder ();
 			if (resolveResult is MemberResolveResult) {
 				finder.SetSearchedMembers (new [] { ((MemberResolveResult)resolveResult).Member });
 			} else if (resolveResult is TypeResolveResult) {
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Highlighting/MoveToUsagesHandler.cs	2013-04-20 10:47:18.000000000 -0700
@@ -30,7 +30,7 @@ using MonoDevelop.Ide;
 using MonoDevelop.Ide.Gui.Content;
 using Mono.TextEditor;
 
-namespace MonoDevelop.CSharp.Highlighting
+namespace MonoDevelop.PlayScript.Highlighting
 {
 	public enum MoveToUsagesCommand {
 		PrevUsage,
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs ../PlayScriptBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Parser/CSharpFoldingParser.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,9 +28,9 @@ using System.Collections.Generic;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Parser
+namespace MonoDevelop.PlayScript.Parser
 {
 	public unsafe class CSharpFoldingParser : IFoldingParser
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Parser/TypeSystemProvider.cs	2013-04-20 11:11:05.000000000 -0700
@@ -25,24 +25,24 @@
 // THE SOFTWARE.
 using System;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using System.Collections.Generic;
 using MonoDevelop.Projects;
-using MonoDevelop.CSharp.Project;
+using MonoDevelop.PlayScript.Project;
 using MonoDevelop.Ide.Tasks;
-using Mono.CSharp;
+using Mono.CSharpPs;
 using System.Linq;
 using ICSharpCode.NRefactory;
-using MonoDevelop.CSharp.Refactoring.CodeActions;
+using MonoDevelop.PlayScript.Refactoring.CodeActions;
 
-namespace MonoDevelop.CSharp.Parser
+namespace MonoDevelop.PlayScript.Parser
 {
 	public class TypeSystemParser : MonoDevelop.Ide.TypeSystem.TypeSystemParser
 	{
 		public override ParsedDocument Parse (bool storeAst, string fileName, System.IO.TextReader content, MonoDevelop.Projects.Project project = null)
 		{
-			var parser = new ICSharpCode.NRefactory.CSharp.CSharpParser (GetCompilerArguments (project));
+			var parser = new ICSharpCode.NRefactory.PlayScript.PlayScriptParser (GetCompilerArguments (project));
 			parser.GenerateTypeSystemMode = !storeAst;
 			var result = new ParsedDocumentDecorator ();
 
@@ -328,9 +328,9 @@ namespace MonoDevelop.CSharp.Parser
 			}
 		}
 
-		public static ICSharpCode.NRefactory.CSharp.CompilerSettings GetCompilerArguments (MonoDevelop.Projects.Project project)
+		public static ICSharpCode.NRefactory.PlayScript.CompilerSettings GetCompilerArguments (MonoDevelop.Projects.Project project)
 		{
-			var compilerArguments = new ICSharpCode.NRefactory.CSharp.CompilerSettings ();
+			var compilerArguments = new ICSharpCode.NRefactory.PlayScript.CompilerSettings ();
 	///		compilerArguments.TabSize = 1;
 
 			if (project == null || MonoDevelop.Ide.IdeApp.Workspace == null) {
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpCompilerParameters.cs	2013-04-20 10:47:18.000000000 -0700
@@ -32,7 +32,7 @@ using System.ComponentModel;
 using MonoDevelop.Projects;
 using MonoDevelop.Core.Serialization;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	public enum LangVersion {
 		Default = 0,
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpProjectParameters.cs	2013-04-20 10:47:18.000000000 -0700
@@ -28,7 +28,7 @@ using System;
 using MonoDevelop.Core.Serialization;
 using MonoDevelop.Projects;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	public class CSharpProjectParameters: ProjectParameters
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Project/CSharpResourceIdBuilder.cs	2013-04-20 10:47:18.000000000 -0700
@@ -36,7 +36,7 @@ using System.Text;
 using MonoDevelop.Projects.Extensions;
 using MonoDevelop.Projects.Formats.MSBuild;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	class CSharpResourceIdBuilder : MSBuildResourceHandler
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs ../PlayScriptBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs	2013-03-14 23:27:13.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Project/CodeGenerationPanel.cs	2013-04-20 10:47:18.000000000 -0700
@@ -31,7 +31,7 @@ using MonoDevelop.Projects;
 using Gtk;
 using MonoDevelop.Ide.Gui.Dialogs;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	partial class CodeGenerationPanelWidget : Gtk.Bin 
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs ../PlayScriptBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Project/CompilerOptionsPanelWidget.cs	2013-04-20 10:47:18.000000000 -0700
@@ -38,7 +38,7 @@ using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
 
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	
 	public partial class CompilerOptionsPanelWidget : Gtk.Bin
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpCodeGenerator.cs	2013-04-22 14:54:48.000000000 -0700
@@ -24,18 +24,18 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Text;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using System.Collections.Generic;
 using System.Linq;
 using MonoDevelop.Ide;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using MonoDevelop.Projects.Policies;
 using Mono.Cecil;
 using Mono.Cecil.Cil;
@@ -45,23 +45,23 @@ using ICSharpCode.NRefactory.PatternMatc
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
 
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	public class CSharpCodeGenerator : CodeGenerator
 	{
 		static CSharpAmbience ambience = new CSharpAmbience ();
 		
-		CSharpFormattingPolicy policy;
+		PlayScriptFormattingPolicy policy;
 		
-		public MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy Policy {
+		public MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy Policy {
 			get {
 				if (policy == null) {
 					var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
 					if (PolicyParent != null)
-						policy = PolicyParent.Get<CSharpFormattingPolicy> (types);
+						policy = PolicyParent.Get<PlayScriptFormattingPolicy> (types);
 					if (policy == null) {
 						
-						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<CSharpFormattingPolicy> (types);
+						policy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<PlayScriptFormattingPolicy> (types);
 					}
 				}
 				return this.policy;
@@ -75,7 +75,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			set {
 				base.PolicyParent = value;
 				var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (CSharpFormatter.MimeType);
-				policy = value.Get<CSharpFormattingPolicy> (types);
+				policy = value.Get<PlayScriptFormattingPolicy> (types);
 			}
 		}
 		
@@ -97,7 +97,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					return ns + "." + name;
 				var file = Document.ParsedDocument.ParsedFile as CSharpUnresolvedFile;
 				var csResolver = file.GetResolver (Document.Compilation, Document.Editor.Caret.Location);
-				var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+				var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 				return OutputNode (Document, builder.ConvertType (typeDef));
 			}
 		}
@@ -298,7 +298,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					result.Append (typeString);
 				}
 			} else {
-				result.Append (new ICSharpCode.NRefactory.CSharp.CSharpAmbience ().ConvertType (type));
+				result.Append (new ICSharpCode.NRefactory.PlayScript.CSharpAmbience ().ConvertType (type));
 			}
 		}
 		
@@ -531,6 +531,8 @@ namespace MonoDevelop.CSharp.Refactoring
 					// See: Bug 1373 - overriding [Model] class methods shouldn't insert base.Methods
 					// TODO: Extend this to user defined code.
 					try {
+#if NOT_PLAYSCRIPT
+						// TODO: This doesn't work in PLAYSCRIPT!
 						if (method.Region.FileName == null) {
 							var asm = AssemblyDefinition.ReadAssembly (method.ParentAssembly.UnresolvedAssembly.Location);
 							foreach (var type in asm.MainModule.Types) {
@@ -539,7 +541,7 @@ namespace MonoDevelop.CSharp.Refactoring
 								foreach (var m  in type.Resolve ().Methods) {
 									if (m.HasBody && m.Name == method.Name) {
 										var context = new DecompilerContext (asm.MainModule);
-										
+
 										context.CurrentType = type;
 				
 										context.Settings = new DecompilerSettings () {
@@ -552,9 +554,9 @@ namespace MonoDevelop.CSharp.Refactoring
 				
 										var astBuilder = new AstBuilder (context);
 										astBuilder.AddMethod (m);
-										
+
 										astBuilder.RunTransformations (o => false);
-										
+
 										var visitor = new ThrowsExceptionVisitor ();
 										astBuilder.CompilationUnit.AcceptVisitor (visitor);
 										skipBody = visitor.Throws;
@@ -566,6 +568,7 @@ namespace MonoDevelop.CSharp.Refactoring
 									break;
 							}
 						}
+#endif
 					} catch (Exception) {
 					}
 					AppendIndent (result);
@@ -849,7 +852,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		
 		static bool InsertUsingAfter (AstNode node)
 		{
-			return node is ICSharpCode.NRefactory.CSharp.Comment ||
+			return node is ICSharpCode.NRefactory.PlayScript.Comment ||
 				node is UsingDeclaration ||
 				node is UsingAliasDeclaration;
 		}
@@ -873,7 +876,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			if (unit == null)
 				return;
 			
-			var policy = doc.Project != null ? doc.Project.Policies.Get <CSharpFormattingPolicy> () : null;
+			var policy = doc.Project != null ? doc.Project.Policies.Get <PlayScriptFormattingPolicy> () : null;
 			if (policy == null)
 				policy = Policy;
 			
@@ -923,7 +926,7 @@ namespace MonoDevelop.CSharp.Refactoring
 				return;
 			}
 			
-			var policy = doc.Project != null ? doc.Project.Policies.Get <CSharpFormattingPolicy> () : null;
+			var policy = doc.Project != null ? doc.Project.Policies.Get <PlayScriptFormattingPolicy> () : null;
 			if (policy == null)
 				policy = Policy;
 			
@@ -989,7 +992,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		public AstType CreateShortType (ICompilation compilation, CSharpUnresolvedFile parsedFile, TextLocation loc, IType fullType)
 		{
 			var csResolver = parsedFile.GetResolver (compilation, loc);
-			var builder = new ICSharpCode.NRefactory.CSharp.Refactoring.TypeSystemAstBuilder (csResolver);
+			var builder = new ICSharpCode.NRefactory.PlayScript.Refactoring.TypeSystemAstBuilder (csResolver);
 			return builder.ConvertType (fullType);			
 		}
 		
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/CSharpReferenceFinder.cs	2013-04-20 10:57:34.000000000 -0700
@@ -29,25 +29,25 @@ using System.Collections.Generic;
 
 using MonoDevelop.Core;
 using MonoDevelop.Ide;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Ide.FindInFiles;
 using System.Linq;
 using ICSharpCode.NRefactory.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System.IO;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Semantics;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	using MonoDevelop.Projects;
 	public class CSharpReferenceFinder : ReferenceFinder
 	{
-		ICSharpCode.NRefactory.CSharp.Resolver.FindReferences refFinder = new ICSharpCode.NRefactory.CSharp.Resolver.FindReferences ();
+		ICSharpCode.NRefactory.PlayScript.Resolver.FindReferences refFinder = new ICSharpCode.NRefactory.PlayScript.Resolver.FindReferences ();
 		List<object> searchedMembers;
 		List<FilePath> files = new List<FilePath> ();
 		List<Tuple<FilePath, MonoDevelop.Ide.Gui.Document>> openDocuments = new List<Tuple<FilePath, MonoDevelop.Ide.Gui.Document>> ();
@@ -240,7 +240,7 @@ namespace MonoDevelop.CSharp.Refactoring
 					continue;
 				using (var editor = TextEditorData.CreateImmutable (text)) {
 					editor.Document.FileName = file;
-					var unit = new CSharpParser ().Parse (editor);
+					var unit = new PlayScriptParser ().Parse (editor);
 					if (unit == null)
 						continue;
 					
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring/HelperMethods.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,11 +25,11 @@
 // THE SOFTWARE.
 using System;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring
+namespace MonoDevelop.PlayScript.Refactoring
 {
 	public static class HelperMethods
 	{
@@ -47,9 +47,9 @@ namespace MonoDevelop.CSharp.Refactoring
 			return change;
 		}
 
-		public static ICSharpCode.NRefactory.CSharp.TextEditorOptions CreateNRefactoryTextEditorOptions (this TextEditorData doc)
+		public static ICSharpCode.NRefactory.PlayScript.TextEditorOptions CreateNRefactoryTextEditorOptions (this TextEditorData doc)
 		{
-			return new ICSharpCode.NRefactory.CSharp.TextEditorOptions () {
+			return new ICSharpCode.NRefactory.PlayScript.TextEditorOptions () {
 				TabsToSpaces = doc.TabsToSpaces,
 				TabSize = doc.Options.TabSize,
 				IndentSize = doc.Options.IndentationSize,
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/Actions/MoveTypeToFile.cs	2013-04-20 10:51:08.000000000 -0700
@@ -24,7 +24,7 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.PatternMatching;
 using MonoDevelop.Core;
 using System.Collections.Generic;
@@ -38,7 +38,7 @@ using MonoDevelop.Core.ProgressMonitorin
 using ICSharpCode.NRefactory;
 using System.Threading;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MoveTypeToFile : MonoDevelop.CodeActions.CodeActionProvider
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/ContextActionExtensions.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,11 +25,11 @@
 // THE SOFTWARE.
 using System;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public static class ContextActionExtensions
 	{
@@ -62,7 +62,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		public static void FormatText (this AstNode node, MonoDevelop.Ide.Gui.Document doc)
 		{
 			doc.UpdateParseDocument ();
-			MonoDevelop.CSharp.Formatting.OnTheFlyFormatter.Format (doc, node.StartLocation);
+			MonoDevelop.PlayScript.Formatting.OnTheFlyFormatter.Format (doc, node.StartLocation);
 		}
 	}
 }
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringContext.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,28 +25,28 @@
 // THE SOFTWARE.
 
 using System;
-using MonoDevelop.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp;
+using MonoDevelop.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Collections.Generic;
 using Mono.TextEditor;
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using ICSharpCode.NRefactory.TypeSystem;
 using ICSharpCode.NRefactory.TypeSystem.Implementation;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System.Linq;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 using MonoDevelop.Ide.Gui;
 using System.Diagnostics;
-using MonoDevelop.CSharp.Refactoring.CodeIssues;
+using MonoDevelop.PlayScript.Refactoring.CodeIssues;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MDRefactoringContext : RefactoringContext
 	{
@@ -88,7 +88,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			}
 		}
 
-		public override ICSharpCode.NRefactory.CSharp.TextEditorOptions TextEditorOptions {
+		public override ICSharpCode.NRefactory.PlayScript.TextEditorOptions TextEditorOptions {
 			get {
 				return Document.Editor.CreateNRefactoryTextEditorOptions ();
 			}
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/MDRefactoringScript.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,22 +25,22 @@
 // THE SOFTWARE.
 using System;
 using System.Linq;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using MonoDevelop.Core;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Refactoring.Rename;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using System.IO;
-using MonoDevelop.CSharp.Formatting;
+using MonoDevelop.PlayScript.Formatting;
 using MonoDevelop.Ide;
 using System.Threading.Tasks;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class MDRefactoringScript : DocumentScript
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeAction.cs	2013-04-20 10:51:08.000000000 -0700
@@ -26,20 +26,20 @@
 
 using System;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
 using ICSharpCode.NRefactory;
 using System.Threading;
 using MonoDevelop.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class NRefactoryCodeAction : MonoDevelop.CodeActions.CodeAction
 	{
-		readonly ICSharpCode.NRefactory.CSharp.Refactoring.CodeAction act;
+		readonly ICSharpCode.NRefactory.PlayScript.Refactoring.CodeAction act;
 		
-		public NRefactoryCodeAction (string id, string title, ICSharpCode.NRefactory.CSharp.Refactoring.CodeAction act)
+		public NRefactoryCodeAction (string id, string title, ICSharpCode.NRefactory.PlayScript.Refactoring.CodeAction act)
 		{
 			this.IdString = id;
 			this.Title = title;
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionProvider.cs	2013-04-20 11:37:22.000000000 -0700
@@ -26,15 +26,15 @@
 
 using System;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Ide.Gui;
 using ICSharpCode.NRefactory;
 using System.Threading;
 using MonoDevelop.Refactoring;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	class NRefactoryCodeActionProvider : MonoDevelop.CodeActions.CodeActionProvider
 	{
@@ -51,7 +51,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			Title = GettextCatalog.GetString (attr.Title ?? "");
 			Description = GettextCatalog.GetString (attr.Description ?? "");
 			Category = GettextCatalog.GetString (attr.Category ?? "");
-			MimeType = "text/x-csharp";
+			MimeType = "text/x-playscript";
 			BoundToIssue = attr.BoundToIssue;
 		}
 
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeActions/NRefactoryCodeActionSource.cs	2013-04-20 10:51:08.000000000 -0700
@@ -27,20 +27,20 @@ using System;
 using MonoDevelop.CodeActions;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeActions
+namespace MonoDevelop.PlayScript.Refactoring.CodeActions
 {
 	public class NRefactoryCodeActionSource : ICodeActionProviderSource
 	{
 		#region ICodeActionProviderSource implementation
 		public IEnumerable<CodeActionProvider> GetProviders ()
 		{
-			foreach (var t in typeof (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeActionProvider).Assembly.GetTypes ()) {
-				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.CSharp.ContextActionAttribute), false);
+			foreach (var t in typeof (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeActionProvider).Assembly.GetTypes ()) {
+				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.PlayScript.ContextActionAttribute), false);
 				if (attr == null || attr.Length != 1)
 					continue;
 				yield return new NRefactoryCodeActionProvider (
-					(ICSharpCode.NRefactory.CSharp.Refactoring.ICodeActionProvider)Activator.CreateInstance (t),
-					(ICSharpCode.NRefactory.CSharp.ContextActionAttribute)attr [0]);
+					(ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeActionProvider)Activator.CreateInstance (t),
+					(ICSharpCode.NRefactory.PlayScript.ContextActionAttribute)attr [0]);
 			}
 		}
 		#endregion
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryCodeIssueSource.cs	2013-04-20 10:51:08.000000000 -0700
@@ -27,20 +27,20 @@ using System;
 using MonoDevelop.CodeIssues;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public class NRefactoryCodeIssueSource : ICodeIssueProviderSource
 	{
 		#region ICodeIssueProviderSource implementation
 		public IEnumerable<CodeIssueProvider> GetProviders ()
 		{
-			foreach (var t in typeof (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider).Assembly.GetTypes ()) {
-				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.CSharp.IssueDescriptionAttribute), false);
+			foreach (var t in typeof (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider).Assembly.GetTypes ()) {
+				var attr = t.GetCustomAttributes (typeof(ICSharpCode.NRefactory.PlayScript.IssueDescriptionAttribute), false);
 				if (attr == null || attr.Length != 1)
 					continue;
 				yield return new NRefactoryIssueProvider (
-					(ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider)Activator.CreateInstance (t),
-					(ICSharpCode.NRefactory.CSharp.IssueDescriptionAttribute)attr [0]);
+					(ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider)Activator.CreateInstance (t),
+					(ICSharpCode.NRefactory.PlayScript.IssueDescriptionAttribute)attr [0]);
 			}
 		}
 		#endregion
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NRefactoryIssueProvider.cs	2013-04-20 11:37:03.000000000 -0700
@@ -27,18 +27,18 @@
 using System;
 using System.Linq;
 using System.Collections.Generic;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using MonoDevelop.Ide.Gui;
 using System.Threading;
 using MonoDevelop.CodeIssues;
-using MonoDevelop.CSharp.Refactoring.CodeActions;
+using MonoDevelop.PlayScript.Refactoring.CodeActions;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	class NRefactoryIssueProvider : CodeIssueProvider
 	{
-		ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider issueProvider;
+		ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider issueProvider;
 		readonly string providerIdString;
 
 		public override string IdString {
@@ -47,16 +47,16 @@ namespace MonoDevelop.CSharp.Refactoring
 			}
 		}
 
-		public NRefactoryIssueProvider (ICSharpCode.NRefactory.CSharp.Refactoring.ICodeIssueProvider issue, IssueDescriptionAttribute attr)
+		public NRefactoryIssueProvider (ICSharpCode.NRefactory.PlayScript.Refactoring.ICodeIssueProvider issue, IssueDescriptionAttribute attr)
 		{
 			issueProvider = issue;
 			providerIdString = issueProvider.GetType ().FullName;
 			Category = GettextCatalog.GetString (attr.Category ?? "");
 			Title = GettextCatalog.GetString (attr.Title ?? "");
 			Description = GettextCatalog.GetString (attr.Description ?? "");
-			DefaultSeverity = attr.Severity;
-			IssueMarker = attr.IssueMarker;
-			MimeType = "text/x-csharp";
+			DefaultSeverity = (ICSharpCode.NRefactory.CSharp.Severity)attr.Severity;
+			IssueMarker = (ICSharpCode.NRefactory.CSharp.IssueMarker)attr.IssueMarker;
+			MimeType = "text/x-playscript";
 		}
 
 		public override IEnumerable<CodeIssue> GetIssues (Document document, object ctx, CancellationToken cancellationToken)
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionEditRuleDialog.cs	2013-04-20 10:51:08.000000000 -0700
@@ -24,14 +24,14 @@
 // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 // THE SOFTWARE.
 using System;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using System.Linq;
 using Gtk;
 using System.Collections.Generic;
 using MonoDevelop.Core;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public partial class NameConventionEditRuleDialog : Gtk.Dialog
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanel.cs	2013-04-20 10:47:18.000000000 -0700
@@ -28,7 +28,7 @@ using MonoDevelop.Ide.Gui.Dialogs;
 using Gtk;
 using MonoDevelop.Core;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	class NameConventionPanel : PolicyOptionsPanel<NameConventionPolicy>
 	{
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPanelWidget.cs	2013-04-20 10:51:08.000000000 -0700
@@ -25,12 +25,12 @@
 // THE SOFTWARE.
 using System;
 using Gtk;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 using MonoDevelop.Core;
 using MonoDevelop.Ide;
 using System.Collections.Generic;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	[System.ComponentModel.ToolboxItem(true)]
 	partial class NameConventionPanelWidget : Gtk.Bin
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionPolicy.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,10 +28,10 @@ using System.Linq;
 using System.Collections.Generic;
 using MonoDevelop.Projects.Policies;
 using MonoDevelop.Core.Serialization;
-using ICS = ICSharpCode.NRefactory.CSharp;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICS = ICSharpCode.NRefactory.PlayScript;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	[PolicyType ("Naming Conventions Policy")]
 	public class NameConventionPolicy : IEquatable<NameConventionPolicy>
@@ -56,11 +56,11 @@ namespace MonoDevelop.CSharp.Refactoring
 			rules = new List<NameConventionRule> (DefaultRules.GetFdgRules ().Select (r => new NameConventionRule (r))).ToArray ();
 		}
 
-		class NamingConventionService : ICSharpCode.NRefactory.CSharp.Refactoring.NamingConventionService
+		class NamingConventionService : ICSharpCode.NRefactory.PlayScript.Refactoring.NamingConventionService
 		{
 			NameConventionPolicy policy;
-			ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule[] rules = null;
-			public override IEnumerable<ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule> Rules {
+			ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule[] rules = null;
+			public override IEnumerable<ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule> Rules {
 				get {
 					if (rules == null) {
 						this.rules = policy.Rules.Select (r => r.GetNRefactoryRule ()).ToArray ();
@@ -69,14 +69,14 @@ namespace MonoDevelop.CSharp.Refactoring
 				}
 			}
 
-			public NamingConventionService (MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPolicy policy)
+			public NamingConventionService (MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPolicy policy)
 			{
 				this.policy = policy;
 			}
 			
 		}
 
-		public ICSharpCode.NRefactory.CSharp.Refactoring.NamingConventionService CreateNRefactoryService ()
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.NamingConventionService CreateNRefactoryService ()
 		{
 			return new NamingConventionService (this);
 		}
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Refactoring.CodeIssues/NamingInspection/NameConventionRule.cs	2013-04-20 10:51:08.000000000 -0700
@@ -28,12 +28,12 @@ using System.Text;
 using MonoDevelop.Projects.Policies;
 using MonoDevelop.Core.Serialization;
 
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	[DataItem ("NamingRule")]
 	public class NameConventionRule
 	{
-		ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule wrappedRule = new ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule (ICSharpCode.NRefactory.CSharp.Refactoring.AffectedEntity.None);
+		ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule wrappedRule = new ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule (ICSharpCode.NRefactory.PlayScript.Refactoring.AffectedEntity.None);
 
 		[ItemProperty]
 		public string Name {
@@ -72,19 +72,19 @@ namespace MonoDevelop.CSharp.Refactoring
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Refactoring.AffectedEntity AffectedEntity {
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.AffectedEntity AffectedEntity {
 			get { return wrappedRule.AffectedEntity; } 
 			set { wrappedRule.AffectedEntity = value;} 
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Modifiers VisibilityMask {
+		public ICSharpCode.NRefactory.PlayScript.Modifiers VisibilityMask {
 			get { return wrappedRule.VisibilityMask; } 
 			set { wrappedRule.VisibilityMask = value;} 
 		}
 
 		[ItemProperty]
-		public ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle NamingStyle {
+		public ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle NamingStyle {
 			get { return wrappedRule.NamingStyle; } 
 			set { wrappedRule.NamingStyle = value;} 
 		}
@@ -102,7 +102,7 @@ namespace MonoDevelop.CSharp.Refactoring
 		}
 
 		
-		internal NameConventionRule (ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule wrappedRule)
+		internal NameConventionRule (ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule wrappedRule)
 		{
 			this.wrappedRule = wrappedRule;
 		}
@@ -124,19 +124,19 @@ namespace MonoDevelop.CSharp.Refactoring
 			if (RequiredPrefixes != null && RequiredPrefixes.Length > 0)
 				result.Append (RequiredPrefixes [0]);
 			switch (NamingStyle) {
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.PascalCase:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.PascalCase:
 				result.Append ("PascalCase");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.CamelCase:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.CamelCase:
 				result.Append ("camelCase");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllUpper:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.AllUpper:
 				result.Append ("ALL_UPPER");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.AllLower:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.AllLower:
 				result.Append ("all_lower");
 				break;
-			case ICSharpCode.NRefactory.CSharp.Refactoring.NamingStyle.FirstUpper:
+			case ICSharpCode.NRefactory.PlayScript.Refactoring.NamingStyle.FirstUpper:
 				result.Append ("First_upper");
 				break;
 			}
@@ -152,7 +152,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			return result.ToString ();
 		}
 
-		internal ICSharpCode.NRefactory.CSharp.Refactoring.NamingRule GetNRefactoryRule ()
+		internal ICSharpCode.NRefactory.PlayScript.Refactoring.NamingRule GetNRefactoryRule ()
 		{
 			return wrappedRule;
 		}
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs ../PlayScriptBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Resolver/HelperMethods.cs	2013-04-20 12:51:09.000000000 -0700
@@ -40,16 +40,16 @@ using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Ide.CodeTemplates;
 using MonoDevelop.Ide.CodeCompletion;
 using MonoDevelop.Refactoring;
-using MonoDevelop.CSharp.Parser;
+using MonoDevelop.PlayScript.Parser;
 using Mono.TextEditor;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using ICSharpCode.NRefactory.Completion;
 using ICSharpCode.NRefactory.Semantics;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 
-namespace MonoDevelop.CSharp
+namespace MonoDevelop.PlayScript
 {
 	public static class HelperMethods
 	{
@@ -64,14 +64,14 @@ namespace MonoDevelop.CSharp
 			}
 		}
 		
-		public static ICSharpCode.NRefactory.CSharp.SyntaxTree Parse (this ICSharpCode.NRefactory.CSharp.CSharpParser parser, TextEditorData data)
+		public static ICSharpCode.NRefactory.PlayScript.SyntaxTree Parse (this ICSharpCode.NRefactory.PlayScript.PlayScriptParser parser, TextEditorData data)
 		{
 			using (var stream = data.OpenStream ()) {
 				return parser.Parse (stream, data.Document.FileName);
 			}
 		}
 		
-//		public static AstNode ParseSnippet (this ICSharpCode.NRefactory.CSharp.CSharpParser parser, TextEditorData data)
+//		public static AstNode ParseSnippet (this ICSharpCode.NRefactory.PlayScript.CSharpParser parser, TextEditorData data)
 //		{
 //			using (var stream = new  StreamReader (data.OpenStream ())) {
 //				var result = parser.ParseExpression (stream);
@@ -90,11 +90,11 @@ namespace MonoDevelop.CSharp
 //			}
 //		}
 		
-		public static MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy GetFormattingPolicy (this MonoDevelop.Ide.Gui.Document doc)
+		public static MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy GetFormattingPolicy (this MonoDevelop.Ide.Gui.Document doc)
 		{
 			var policyParent = doc.Project != null ? doc.Project.Policies : null;
-			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
-			var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
+			var codePolicy = policyParent != null ? policyParent.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 			return codePolicy;
 		}
 
@@ -105,9 +105,9 @@ namespace MonoDevelop.CSharp
 		
 		public static CSharpFormattingOptions GetFormattingOptions (this MonoDevelop.Projects.Project project)
 		{
-			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.CSharp.Formatting.CSharpFormatter.MimeType);
-			var codePolicy = project != null ? project.Policies.Get<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types) :
-				MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);
+			var types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MonoDevelop.PlayScript.Formatting.CSharpFormatter.MimeType);
+			var codePolicy = project != null ? project.Policies.Get<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types) :
+				MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.PlayScript.Formatting.PlayScriptFormattingPolicy> (types);
 			return codePolicy.CreateOptions ();
 		}
 		
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Resolver/TextEditorResolverProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -30,20 +30,20 @@ using Mono.TextEditor;
 using System.Text;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp.Resolver;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
 using ICSharpCode.NRefactory.TypeSystem;
 using MonoDevelop.Ide.TypeSystem;
-using ICSharpCode.NRefactory.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
 using System.Linq;
 using System.Collections.Generic;
 using ICSharpCode.NRefactory.Semantics;
 using ICSharpCode.NRefactory;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 using MonoDevelop.Refactoring;
-using ICSharpCode.NRefactory.CSharp.Refactoring;
+using ICSharpCode.NRefactory.PlayScript.Refactoring;
 
-namespace MonoDevelop.CSharp.Resolver
+namespace MonoDevelop.PlayScript.Resolver
 {
 	public class TextEditorResolverProvider : ITextEditorResolverProvider
 	{
@@ -197,9 +197,9 @@ namespace MonoDevelop.CSharp.Resolver
 			return builder;
 		}
 
-		internal static MonoDevelop.CSharp.Completion.MemberCompletionData.MyAmbience CreateAmbience (Document doc, int offset, ICompilation compilation)
+		internal static MonoDevelop.PlayScript.Completion.MemberCompletionData.MyAmbience CreateAmbience (Document doc, int offset, ICompilation compilation)
 		{
-			return new MonoDevelop.CSharp.Completion.MemberCompletionData.MyAmbience (CreateBuilder (doc, offset, compilation));
+			return new MonoDevelop.PlayScript.Completion.MemberCompletionData.MyAmbience (CreateBuilder (doc, offset, compilation));
 		}
 
 		public string CreateTooltip (MonoDevelop.Ide.Gui.Document doc, int offset, ResolveResult result, string errorInformations, Gdk.ModifierType modifierState)
diff -rupN ../CSharpBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs ../PlayScriptBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs
--- ../CSharpBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs	2013-03-14 23:31:54.000000000 -0700
+++ ../PlayScriptBinding/MonoDevelop.CSharp.Tooltips/LanguageItemTooltipProvider.cs	2013-04-20 10:51:08.000000000 -0700
@@ -29,20 +29,20 @@ using Mono.TextEditor;
 using MonoDevelop.Ide.TypeSystem;
 using ICSharpCode.NRefactory.Semantics;
 using MonoDevelop.Ide;
-using ICSharpCode.NRefactory.CSharp;
-using MonoDevelop.CSharp;
+using ICSharpCode.NRefactory.PlayScript;
+using MonoDevelop.PlayScript;
 using ICSharpCode.NRefactory.TypeSystem;
 using Gtk;
-using ICSharpCode.NRefactory.CSharp.Resolver;
-using ICSharpCode.NRefactory.CSharp.TypeSystem;
+using ICSharpCode.NRefactory.PlayScript.Resolver;
+using ICSharpCode.NRefactory.PlayScript.TypeSystem;
 using System.Threading;
 using System.Text;
 using MonoDevelop.Core;
 using System.Collections.Generic;
 using System.Linq;
-using MonoDevelop.CSharp.Resolver;
+using MonoDevelop.PlayScript.Resolver;
 using MonoDevelop.Ide.CodeCompletion;
-using MonoDevelop.CSharp.Completion;
+using MonoDevelop.PlayScript.Completion;
 using MonoDevelop.Components;
 using MonoDevelop.Projects;
 
@@ -61,7 +61,7 @@ namespace MonoDevelop.SourceEditor
 			public AstNode Node;
 			public CSharpAstResolver Resolver;
 
-			public ToolTipData (ICSharpCode.NRefactory.CSharp.SyntaxTree unit, ICSharpCode.NRefactory.Semantics.ResolveResult result, ICSharpCode.NRefactory.CSharp.AstNode node, CSharpAstResolver file)
+			public ToolTipData (ICSharpCode.NRefactory.PlayScript.SyntaxTree unit, ICSharpCode.NRefactory.Semantics.ResolveResult result, ICSharpCode.NRefactory.PlayScript.AstNode node, CSharpAstResolver file)
 			{
 				this.Unit = unit;
 				this.Result = result;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpFormattingPolicyPanelWidget
 	{
@@ -13,10 +13,10 @@ namespace MonoDevelop.CSharp.Formatting
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget
+			// Widget MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget
 			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget";
-			// Container child MonoDevelop.CSharp.Formatting.CSharpFormattingPolicyPanelWidget.Gtk.Container+ContainerChild
+			this.Name = "MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget";
+			// Container child MonoDevelop.PlayScript.Formatting.CSharpFormattingPolicyPanelWidget.Gtk.Container+ContainerChild
 			this.vbox1 = new global::Gtk.VBox ();
 			this.vbox1.Name = "vbox1";
 			this.vbox1.Spacing = 6;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class CSharpFormattingProfileDialog
 	{
@@ -52,11 +52,11 @@ namespace MonoDevelop.CSharp.Formatting
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog
-			this.Name = "MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog";
+			// Widget MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog
+			this.Name = "MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog";
 			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
 			this.BorderWidth = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.VBox
+			// Internal child MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.VBox
 			global::Gtk.VBox w1 = this.VBox;
 			w1.Name = "dialog1_VBox";
 			w1.Spacing = 6;
@@ -431,7 +431,7 @@ namespace MonoDevelop.CSharp.Formatting
 			w1.Add (this.vbox5);
 			global::Gtk.Box.BoxChild w38 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox5]));
 			w38.Position = 0;
-			// Internal child MonoDevelop.CSharp.Formatting.CSharpFormattingProfileDialog.ActionArea
+			// Internal child MonoDevelop.PlayScript.Formatting.CSharpFormattingProfileDialog.ActionArea
 			global::Gtk.HButtonBox w39 = this.ActionArea;
 			w39.Name = "dialog1_ActionArea";
 			w39.Spacing = 10;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Formatting
+namespace MonoDevelop.PlayScript.Formatting
 {
 	public partial class NewFormattingProfileDialog
 	{
@@ -15,12 +15,12 @@ namespace MonoDevelop.CSharp.Formatting
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog
-			this.Name = "MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog";
+			// Widget MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog
+			this.Name = "MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog";
 			this.Title = global::Mono.Unix.Catalog.GetString ("New Profile");
 			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
 			this.BorderWidth = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.VBox
+			// Internal child MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.VBox
 			global::Gtk.VBox w1 = this.VBox;
 			w1.Name = "dialog1_VBox";
 			w1.Spacing = 6;
@@ -75,7 +75,7 @@ namespace MonoDevelop.CSharp.Formatting
 			w6.Position = 0;
 			w6.Expand = false;
 			w6.Fill = false;
-			// Internal child MonoDevelop.CSharp.Formatting.NewFormattingProfileDialog.ActionArea
+			// Internal child MonoDevelop.PlayScript.Formatting.NewFormattingProfileDialog.ActionArea
 			global::Gtk.HButtonBox w7 = this.ActionArea;
 			w7.Name = "dialog1_ActionArea";
 			w7.Spacing = 10;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs	2013-03-14 23:27:13.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	internal partial class CodeGenerationPanelWidget
 	{
@@ -41,10 +41,10 @@ namespace MonoDevelop.CSharp.Project
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Project.CodeGenerationPanelWidget
+			// Widget MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget
 			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Project.CodeGenerationPanelWidget";
-			// Container child MonoDevelop.CSharp.Project.CodeGenerationPanelWidget.Gtk.Container+ContainerChild
+			this.Name = "MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget";
+			// Container child MonoDevelop.PlayScript.Project.CodeGenerationPanelWidget.Gtk.Container+ContainerChild
 			this.vbox62 = new global::Gtk.VBox ();
 			this.vbox62.Name = "vbox62";
 			this.vbox62.Spacing = 12;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs	2012-11-19 22:23:17.000000000 -0800
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Project
+namespace MonoDevelop.PlayScript.Project
 {
 	public partial class CompilerOptionsPanelWidget
 	{
@@ -33,10 +33,10 @@ namespace MonoDevelop.CSharp.Project
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget
+			// Widget MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget
 			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget";
-			// Container child MonoDevelop.CSharp.Project.CompilerOptionsPanelWidget.Gtk.Container+ContainerChild
+			this.Name = "MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget";
+			// Container child MonoDevelop.PlayScript.Project.CompilerOptionsPanelWidget.Gtk.Container+ContainerChild
 			this.vbox1 = new global::Gtk.VBox ();
 			this.vbox1.Name = "vbox1";
 			this.vbox1.Spacing = 6;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public partial class NameConventionEditRuleDialog
 	{
@@ -41,10 +41,10 @@ namespace MonoDevelop.CSharp.Refactoring
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog
+			// Widget MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog
 			this.WidthRequest = 640;
 			this.HeightRequest = 480;
-			this.Name = "MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog";
+			this.Name = "MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog";
 			this.Title = global::Mono.Unix.Catalog.GetString ("Edit Naming Rule");
 			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
 			this.Modal = true;
@@ -52,7 +52,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			this.DestroyWithParent = true;
 			this.SkipPagerHint = true;
 			this.SkipTaskbarHint = true;
-			// Internal child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.VBox
+			// Internal child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.VBox
 			global::Gtk.VBox w1 = this.VBox;
 			w1.Name = "dialog1_VBox";
 			w1.BorderWidth = ((uint)(2));
@@ -380,7 +380,7 @@ namespace MonoDevelop.CSharp.Refactoring
 			global::Gtk.Box.BoxChild w32 = ((global::Gtk.Box.BoxChild)(w1 [this.vbox3]));
 			w32.Position = 0;
 			w32.Padding = ((uint)(6));
-			// Internal child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionEditRuleDialog.ActionArea
+			// Internal child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionEditRuleDialog.ActionArea
 			global::Gtk.HButtonBox w33 = this.ActionArea;
 			w33.Name = "dialog1_ActionArea";
 			w33.Spacing = 10;
diff -rupN ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs
--- ../CSharpBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/gtk-gui/MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.cs	2013-04-20 10:47:18.000000000 -0700
@@ -1,6 +1,6 @@
 
 // This file has been generated by the GUI designer. Do not modify.
-namespace MonoDevelop.CSharp.Refactoring.CodeIssues
+namespace MonoDevelop.PlayScript.Refactoring.CodeIssues
 {
 	public partial class NameConventionPanelWidget
 	{
@@ -15,10 +15,10 @@ namespace MonoDevelop.CSharp.Refactoring
 		protected virtual void Build ()
 		{
 			global::Stetic.Gui.Initialize (this);
-			// Widget MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget
+			// Widget MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget
 			global::Stetic.BinContainer.Attach (this);
-			this.Name = "MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget";
-			// Container child MonoDevelop.CSharp.Refactoring.CodeIssues.NameConventionPanelWidget.Gtk.Container+ContainerChild
+			this.Name = "MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget";
+			// Container child MonoDevelop.PlayScript.Refactoring.CodeIssues.NameConventionPanelWidget.Gtk.Container+ContainerChild
 			this.hbox3 = new global::Gtk.HBox ();
 			this.hbox3.Name = "hbox3";
 			this.hbox3.Spacing = 6;
Binary files ../CSharpBinding/icons/playscript-project-16.png and ../PlayScriptBinding/icons/playscript-project-16.png differ
diff -rupN ../CSharpBinding/templates/AsConsoleProject.xpt.xml ../PlayScriptBinding/templates/AsConsoleProject.xpt.xml
--- ../CSharpBinding/templates/AsConsoleProject.xpt.xml	2013-04-04 17:36:12.000000000 -0700
+++ ../PlayScriptBinding/templates/AsConsoleProject.xpt.xml	2013-04-14 02:26:32.000000000 -0700
@@ -7,8 +7,8 @@
 	<TemplateConfiguration>
 		<_Name>ActionScript Console Project</_Name>
 		<_Category>PlayScript</_Category>
-		<Icon>md-project-console|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
+		<Icon>md-project-console|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
 		<_Description>Creates a new ActionScript console project.</_Description>
 	</TemplateConfiguration>
 	
@@ -31,16 +31,18 @@
 				<Reference type="Package" refto="PlayScript.Dynamic" />
 			</References>
 			<Files>
-				<File name="Main.as" AddStandardHeader="True"><![CDATA[package
+				<File name="Main.as" AddStandardHeader="True">
+<![CDATA[package
 {
-	class MainClass
+	public class MainClass
 	{
 		public static function Main():void
 		{
 			trace("Hello World!");
 		}
 	}
-}]]></File>
+}]]>
+				</File>
 			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
 			</Files>
 		</Project>
diff -rupN ../CSharpBinding/templates/AsEmptyClass.xft.xml ../PlayScriptBinding/templates/AsEmptyClass.xft.xml
--- ../CSharpBinding/templates/AsEmptyClass.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/AsEmptyClass.xft.xml	2013-04-22 22:01:30.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript Class</_Name>
+		<Icon>md-class-file</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates an empty ActionScript class file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public class ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/AsEmptyFile.xft.xml ../PlayScriptBinding/templates/AsEmptyFile.xft.xml
--- ../CSharpBinding/templates/AsEmptyFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/AsEmptyFile.xft.xml	2013-04-22 22:03:38.000000000 -0700
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates an empty ActionScript file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="EmptyFile" AddStandardHeader="True">
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/AsEmptyInterface.xft.xml ../PlayScriptBinding/templates/AsEmptyInterface.xft.xml
--- ../CSharpBinding/templates/AsEmptyInterface.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/AsEmptyInterface.xft.xml	2013-04-22 22:00:49.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty ActionScript Interface</_Name>
+		<Icon>md-interface-file</Icon>
+		<_Category>ActionScript</_Category>
+		<LanguageName>ActionScript</LanguageName>
+		<_Description>Creates an empty ActionScript interface file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".as" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public interface ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/ConsoleProject.xpt.xml ../PlayScriptBinding/templates/ConsoleProject.xpt.xml
--- ../CSharpBinding/templates/ConsoleProject.xpt.xml	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/templates/ConsoleProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,48 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "06/10/2001"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Console Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-console|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a new C# console project.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "Program.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options ExternalConsole="True"/>
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-			</References>
-			<Files>
-				<File name="Program.cs" AddStandardHeader="True"><![CDATA[using System;
-
-namespace ${Namespace}
-{
-	class MainClass
-	{
-		public static void Main(string[] args)
-		{
-			Console.WriteLine("Hello World!");
-		}
-	}
-}]]></File>
-			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN ../CSharpBinding/templates/EmptyActionScriptFile.xft.xml ../PlayScriptBinding/templates/EmptyActionScriptFile.xft.xml
--- ../CSharpBinding/templates/EmptyActionScriptFile.xft.xml	2013-04-04 16:46:44.000000000 -0700
+++ ../PlayScriptBinding/templates/EmptyActionScriptFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<Template Originator="Ben Cooley" Language="C#" Created="3/09/2001" LastModified="3/09/2013">
-	
-	<TemplateConfiguration>
-		<_Name>Empty ActionScript File</_Name>
-		<Icon>md-text-file-icon</Icon>
-		<_Category>General</_Category>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty ActionScript file.</_Description>
-	</TemplateConfiguration>
-	
-	<TemplateFiles>
-		<File DefaultExtension=".as" DefaultName="EmptyActionScriptfile" AddStandardHeader="True">
-		</File>
-	</TemplateFiles>
-	
-	<FileOptions/>
-	
-</Template>
diff -rupN ../CSharpBinding/templates/EmptyCSharpFile.xft.xml ../PlayScriptBinding/templates/EmptyCSharpFile.xft.xml
--- ../CSharpBinding/templates/EmptyCSharpFile.xft.xml	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/templates/EmptyCSharpFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<Template Originator="Mike Krueger" Language="C#" Created="3/09/2001" LastModified="3/09/2001">
-	
-	<TemplateConfiguration>
-		<_Name>Empty File</_Name>
-		<Icon>md-text-file-icon</Icon>
-		<_Category>General</_Category>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# file.</_Description>
-	</TemplateConfiguration>
-	
-	<TemplateFiles>
-		<File DefaultExtension=".cs" DefaultName="EmptyCSharpfile" AddStandardHeader="True">
-		</File>
-	</TemplateFiles>
-	
-	<FileOptions/>
-	
-</Template>
diff -rupN ../CSharpBinding/templates/EmptyPlayScriptFile.xft.xml ../PlayScriptBinding/templates/EmptyPlayScriptFile.xft.xml
--- ../CSharpBinding/templates/EmptyPlayScriptFile.xft.xml	2013-04-04 16:46:47.000000000 -0700
+++ ../PlayScriptBinding/templates/EmptyPlayScriptFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,19 +0,0 @@
-<?xml version="1.0"?>
-<Template Originator="Ben Cooley" Language="C#" Created="3/09/2001" LastModified="3/09/2013">
-	
-	<TemplateConfiguration>
-		<_Name>Empty PlayScript File</_Name>
-		<Icon>md-text-file-icon</Icon>
-		<_Category>General</_Category>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty PlayScript file.</_Description>
-	</TemplateConfiguration>
-	
-	<TemplateFiles>
-		<File DefaultExtension=".play" DefaultName="EmptyPlayScriptfile" AddStandardHeader="True">
-		</File>
-	</TemplateFiles>
-	
-	<FileOptions/>
-	
-</Template>
diff -rupN ../CSharpBinding/templates/EmptyProject.xpt.xml ../PlayScriptBinding/templates/EmptyProject.xpt.xml
--- ../CSharpBinding/templates/EmptyProject.xpt.xml	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/templates/EmptyProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,18 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "01/10/2001"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Empty Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# project.</_Description>
-	</TemplateConfiguration>
-	
-	<Combine name = "${ProjectName}" directory = ".">
-		<Project name = "${ProjectName}" directory = "."/>
-	</Combine>
-</Template>
diff -rupN ../CSharpBinding/templates/GtkSharp2Project.xpt.xml ../PlayScriptBinding/templates/GtkSharp2Project.xpt.xml
--- ../CSharpBinding/templates/GtkSharp2Project.xpt.xml	2013-03-14 23:31:22.000000000 -0700
+++ ../PlayScriptBinding/templates/GtkSharp2Project.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,102 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Ben Motmans"
-          created      = "02/16/2005"
-          lastModified = "02/16/2005">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Gtk# 2.0 Project</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-gui|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a Gtk# 2.0 project.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "Program.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options Target = "WinExe"/>
-			
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-				<Reference type="Package" SpecificVersion="false" refto="gtk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="gdk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="glib-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="glade-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="pango-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-				<Reference type="Package" SpecificVersion="false" refto="atk-sharp, Version=2.4.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
-			</References>
-		
-			<Files>
-			
-			<!-- A window template -->
-			
-				<Widget>
-					<SteticTemplate>
-					  <widget class="Gtk.Window" id="MainWindow" design-size="400 300">
-					    <property name="Title" translatable="yes">${Name}</property>
-					    <property name="WindowPosition">CenterOnParent</property>
-					    <signal name="DeleteEvent" handler="OnDeleteEvent" />
-				        <child>
-				          <placeholder />
-				        </child>
-					  </widget>			
-					</SteticTemplate>
-					
-					<!-- Class bound to the window -->
-				
-					<File name="MainWindow.cs" AddStandardHeader="True">
-<![CDATA[using System;
-using Gtk;
-
-public partial class MainWindow: Gtk.Window
-{	
-	public MainWindow (): base (Gtk.WindowType.Toplevel)
-	{
-		Build ();
-	}
-	
-	protected void OnDeleteEvent (object sender, DeleteEventArgs a)
-	{
-		Application.Quit ();
-		a.RetVal = true;
-	}
-}]]>
-					</File>
-				</Widget>
-				
-				<!-- The main class -->
-				
-				<File name="Program.cs" AddStandardHeader="True">
-<![CDATA[using System;
-using Gtk;
-
-namespace ${Namespace}
-{
-	class MainClass
-	{
-		public static void Main (string[] args)
-		{
-			Application.Init ();
-			MainWindow win = new MainWindow ();
-			win.Show ();
-			Application.Run ();
-		}
-	}
-}]]>
-				</File>
-				
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN ../CSharpBinding/templates/Library.xpt.xml ../PlayScriptBinding/templates/Library.xpt.xml
--- ../CSharpBinding/templates/Library.xpt.xml	2012-09-28 16:27:12.000000000 -0700
+++ ../PlayScriptBinding/templates/Library.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,37 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Mike Krueger"
-          created      = "02/01/2003"
-          lastModified = "02/01/2003">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Library</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-library|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates an empty C# class library</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "MyClass.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = ".">
-			<Options Target = "Library" PauseConsoleOutput = "False" />
-			<References>
-				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
-			</References>
-			<Files>
-				<FileTemplateReference TemplateID="EmptyClass" name="MyClass.cs" />
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN ../CSharpBinding/templates/PortableLibrary.xpt.xml ../PlayScriptBinding/templates/PortableLibrary.xpt.xml
--- ../CSharpBinding/templates/PortableLibrary.xpt.xml	2013-04-14 02:16:35.000000000 -0700
+++ ../PlayScriptBinding/templates/PortableLibrary.xpt.xml	1969-12-31 16:00:00.000000000 -0800
@@ -1,39 +0,0 @@
-<?xml version="1.0"?>
-<Template originator   = "Jeffrey Stedfast"
-          created      = "04/03/2012"
-          lastModified = "04/03/2012">
-	
-	<!-- Template Header -->
-	<TemplateConfiguration>
-		<_Name>Portable Library</_Name>
-		<_Category>C#</_Category>
-		<Icon>md-project-library|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
-		<_Description>Creates a C# library that can be used in Windows, Silverlight, Windows Phone, Xbox 360, MonoTouch and Mono for Android.</_Description>
-	</TemplateConfiguration>
-	
-	<!-- Actions -->
-	<Actions>
-		<Open filename = "MyClass.cs"/>
-	</Actions>
-	
-	<!-- Template Content -->
-	<Combine name = "${ProjectName}" directory = ".">
-		<Options>
-			<StartupProject>${ProjectName}</StartupProject>
-		</Options>
-		
-		<Project name = "${ProjectName}" directory = "." type = "PortableDotNet">
-			<Options Target = "Library" TargetFrameworkVersion = ".NETPortable,Version=v4.0,Profile=Profile1"/>
-			<References>
-				<Reference type="Gac" refto="System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-				<Reference type="Gac" refto="System.Xml, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-				<Reference type="Gac" refto="System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e" />
-			</References>
-			<Files>
-				<FileTemplateReference TemplateID="EmptyClass" name="MyClass.cs" />
-				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
-			</Files>
-		</Project>
-	</Combine>
-</Template>
diff -rupN ../CSharpBinding/templates/PsConsoleProject.xpt.xml ../PlayScriptBinding/templates/PsConsoleProject.xpt.xml
--- ../CSharpBinding/templates/PsConsoleProject.xpt.xml	2013-04-04 17:37:09.000000000 -0700
+++ ../PlayScriptBinding/templates/PsConsoleProject.xpt.xml	2013-04-14 02:26:16.000000000 -0700
@@ -7,8 +7,8 @@
 	<TemplateConfiguration>
 		<_Name>PlayScript Console Project</_Name>
 		<_Category>PlayScript</_Category>
-		<Icon>md-project-console|res:csharp-icon-32.png</Icon>
-		<LanguageName>C#</LanguageName>
+		<Icon>md-project-console|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
 		<_Description>Creates a new PlayScript console project.</_Description>
 	</TemplateConfiguration>
 	
@@ -31,16 +31,18 @@
 				<Reference type="Package" refto="PlayScript.Dynamic" />
 			</References>
 			<Files>
-				<File name="Main.play" AddStandardHeader="True"><![CDATA[package
+				<File name="Main.play" AddStandardHeader="True">
+<![CDATA[package
 {
-	class MainClass
+	public class MainClass
 	{
 		public static function Main():void
 		{
 			trace("Hello World from PlayScript!");
 		}
 	}
-}]]></File>
+}]]>
+				</File>
 			<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
 			</Files>
 		</Project>
diff -rupN ../CSharpBinding/templates/PsEmptyClass.xft.xml ../PlayScriptBinding/templates/PsEmptyClass.xft.xml
--- ../CSharpBinding/templates/PsEmptyClass.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/PsEmptyClass.xft.xml	2013-04-22 22:04:19.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript Class</_Name>
+		<Icon>md-class-file</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript class file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public class ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/PsEmptyFile.xft.xml ../PlayScriptBinding/templates/PsEmptyFile.xft.xml
--- ../CSharpBinding/templates/PsEmptyFile.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/PsEmptyFile.xft.xml	2013-04-22 22:04:15.000000000 -0700
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="EmptyFile" AddStandardHeader="True">
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/PsEmptyInterface.xft.xml ../PlayScriptBinding/templates/PsEmptyInterface.xft.xml
--- ../CSharpBinding/templates/PsEmptyInterface.xft.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/PsEmptyInterface.xft.xml	2013-04-22 22:01:44.000000000 -0700
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<Template Originator="Ben Cooley" Language="PlayScript" Created="3/09/2001" LastModified="3/09/2013">
+	
+	<TemplateConfiguration>
+		<_Name>Empty PlayScript Interface</_Name>
+		<Icon>md-interface-file</Icon>
+		<_Category>PlayScript</_Category>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript interface file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".play" DefaultName="MyClass" AddStandardHeader="True">
+<![CDATA[package ${Namespace}
+{
+	public interface ${Name}
+	{
+	
+	}
+}]]>		
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
diff -rupN ../CSharpBinding/templates/PsEmptyProject.xpt.xml ../PlayScriptBinding/templates/PsEmptyProject.xpt.xml
--- ../CSharpBinding/templates/PsEmptyProject.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/PsEmptyProject.xpt.xml	2013-04-13 19:39:43.000000000 -0700
@@ -0,0 +1,18 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "01/10/2001"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>Empty Project</_Name>
+		<_Category>PlayScript</_Category>
+		<Icon>md-project|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript project.</_Description>
+	</TemplateConfiguration>
+	
+	<Combine name = "${ProjectName}" directory = ".">
+		<Project name = "${ProjectName}" directory = "."/>
+	</Combine>
+</Template>
diff -rupN ../CSharpBinding/templates/PsLibrary.xpt.xml ../PlayScriptBinding/templates/PsLibrary.xpt.xml
--- ../CSharpBinding/templates/PsLibrary.xpt.xml	1969-12-31 16:00:00.000000000 -0800
+++ ../PlayScriptBinding/templates/PsLibrary.xpt.xml	2013-04-13 19:41:37.000000000 -0700
@@ -0,0 +1,37 @@
+<?xml version="1.0"?>
+<Template originator   = "Mike Krueger"
+          created      = "02/01/2003"
+          lastModified = "02/01/2003">
+	
+	<!-- Template Header -->
+	<TemplateConfiguration>
+		<_Name>Library</_Name>
+		<_Category>PlayScript</_Category>
+		<Icon>md-project-library|res:playscript-icon-32.png</Icon>
+		<LanguageName>PlayScript</LanguageName>
+		<_Description>Creates an empty PlayScript class library</_Description>
+	</TemplateConfiguration>
+	
+	<!-- Actions -->
+	<Actions>
+		<Open filename = "MyClass.play"/>
+	</Actions>
+	
+	<!-- Template Content -->
+	<Combine name = "${ProjectName}" directory = ".">
+		<Options>
+			<StartupProject>${ProjectName}</StartupProject>
+		</Options>
+		
+		<Project name = "${ProjectName}" directory = ".">
+			<Options Target = "Library" PauseConsoleOutput = "False" />
+			<References>
+				<Reference type="Package" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
+			</References>
+			<Files>
+				<FileTemplateReference TemplateID="PsEmptyClass" name="MyClass.play" />
+				<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
+			</Files>
+		</Project>
+	</Combine>
+</Template>
